
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800593c  0800593c  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800593c  0800593c  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800593c  0800593c  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800593c  0800593c  0001593c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005940  08005940  00015940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200000f0  08005a34  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08005a34  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f08  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003165  00000000  00000000  00037021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0003a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  0003b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0d6  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001369b  00000000  00000000  00055ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba57  00000000  00000000  00069561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4fb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd0  00000000  00000000  000f500c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	080057c8 	.word	0x080057c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	080057c8 	.word	0x080057c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2uiz>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	d20e      	bcs.n	8000726 <__aeabi_f2uiz+0x22>
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30b      	bcc.n	8000726 <__aeabi_f2uiz+0x22>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d409      	bmi.n	800072c <__aeabi_f2uiz+0x28>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	fa23 f002 	lsr.w	r0, r3, r2
 8000724:	4770      	bx	lr
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	4770      	bx	lr
 800072c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000730:	d101      	bne.n	8000736 <__aeabi_f2uiz+0x32>
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	d102      	bne.n	800073c <__aeabi_f2uiz+0x38>
 8000736:	f04f 30ff 	mov.w	r0, #4294967295
 800073a:	4770      	bx	lr
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 800074c:	4a09      	ldr	r2, [pc, #36]	; (8000774 <isButtonPressed+0x30>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d106      	bne.n	8000766 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <isButtonPressed+0x30>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2100      	movs	r1, #0
 800075e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <isButtonPressed+0x24>
	}
	return 0;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000010c 	.word	0x2000010c

08000778 <subKeyProcess>:

void subKeyProcess(int i){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <subKeyProcess+0x1c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2101      	movs	r1, #1
 8000786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	2000010c 	.word	0x2000010c

08000798 <ReadPin>:

GPIO_PinState ReadPin(int index){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d105      	bne.n	80007b2 <ReadPin+0x1a>
 80007a6:	2102      	movs	r1, #2
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <ReadPin+0x5c>)
 80007aa:	f002 f9af 	bl	8002b0c <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	e01b      	b.n	80007ea <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d105      	bne.n	80007c4 <ReadPin+0x2c>
 80007b8:	2110      	movs	r1, #16
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <ReadPin+0x5c>)
 80007bc:	f002 f9a6 	bl	8002b0c <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	e012      	b.n	80007ea <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d105      	bne.n	80007d6 <ReadPin+0x3e>
 80007ca:	2101      	movs	r1, #1
 80007cc:	480a      	ldr	r0, [pc, #40]	; (80007f8 <ReadPin+0x60>)
 80007ce:	f002 f99d 	bl	8002b0c <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	e009      	b.n	80007ea <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d105      	bne.n	80007e8 <ReadPin+0x50>
 80007dc:	2101      	movs	r1, #1
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <ReadPin+0x5c>)
 80007e0:	f002 f994 	bl	8002b0c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	e000      	b.n	80007ea <ReadPin+0x52>
	else return 0;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010800 	.word	0x40010800
 80007f8:	40010c00 	.word	0x40010c00

080007fc <getKeyinput>:

void getKeyinput(){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	e05c      	b.n	80008c2 <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 8000808:	4a32      	ldr	r2, [pc, #200]	; (80008d4 <getKeyinput+0xd8>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000810:	4931      	ldr	r1, [pc, #196]	; (80008d8 <getKeyinput+0xdc>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000818:	4a30      	ldr	r2, [pc, #192]	; (80008dc <getKeyinput+0xe0>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000820:	492c      	ldr	r1, [pc, #176]	; (80008d4 <getKeyinput+0xd8>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff ffb5 	bl	8000798 <ReadPin>
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a2a      	ldr	r2, [pc, #168]	; (80008dc <getKeyinput+0xe0>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800083a:	4a27      	ldr	r2, [pc, #156]	; (80008d8 <getKeyinput+0xdc>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000842:	4924      	ldr	r1, [pc, #144]	; (80008d4 <getKeyinput+0xd8>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084a:	429a      	cmp	r2, r3
 800084c:	d136      	bne.n	80008bc <getKeyinput+0xc0>
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <getKeyinput+0xd8>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000856:	4921      	ldr	r1, [pc, #132]	; (80008dc <getKeyinput+0xe0>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800085e:	429a      	cmp	r2, r3
 8000860:	d12c      	bne.n	80008bc <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <getKeyinput+0xe4>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800086a:	491c      	ldr	r1, [pc, #112]	; (80008dc <getKeyinput+0xe0>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000872:	429a      	cmp	r2, r3
 8000874:	d014      	beq.n	80008a0 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 8000876:	4a19      	ldr	r2, [pc, #100]	; (80008dc <getKeyinput+0xe0>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800087e:	4918      	ldr	r1, [pc, #96]	; (80008e0 <getKeyinput+0xe4>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <getKeyinput+0xe4>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d114      	bne.n	80008bc <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <getKeyinput+0xe8>)
 8000894:	22c8      	movs	r2, #200	; 0xc8
 8000896:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff6d 	bl	8000778 <subKeyProcess>
 800089e:	e00d      	b.n	80008bc <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <getKeyinput+0xe8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <getKeyinput+0xe8>)
 80008a8:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <getKeyinput+0xe8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d104      	bne.n	80008bc <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <getKeyinput+0xe4>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2101      	movs	r1, #1
 80008b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3301      	adds	r3, #1
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	dd9f      	ble.n	8000808 <getKeyinput+0xc>
				}
			}
		}
	}

}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000010 	.word	0x20000010
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000020 	.word	0x20000020
 80008e0:	20000030 	.word	0x20000030
 80008e4:	20000040 	.word	0x20000040

080008e8 <get_buzzer_counter>:
extern TIM_HandleTypeDef htim3;  // External declaration
int buzzer_counter;
int state_buzzer = 2;
float scale_buzzer=0;
float cycle;
void get_buzzer_counter(){	// for take the value of the red time
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
	buzzer_counter = red_time;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <get_buzzer_counter+0x14>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a03      	ldr	r2, [pc, #12]	; (8000900 <get_buzzer_counter+0x18>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	2000004c 	.word	0x2000004c
 8000900:	20000250 	.word	0x20000250

08000904 <cal_cycle>:
void cal_cycle() {
 8000904:	b598      	push	{r3, r4, r7, lr}
 8000906:	af00      	add	r7, sp, #0
    //cycle = ((float)buzzer_counter / red_time) * 100.0f;	// the speaker decreases volume every 1s
    cycle = ((float)buzzer_counter / red_time) * 100.0f - scale_buzzer;// the speaker decreases volume every 100ms
 8000908:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <cal_cycle+0xbc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fcdf 	bl	80002d0 <__aeabi_i2f>
 8000912:	4604      	mov	r4, r0
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <cal_cycle+0xc0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fcd9 	bl	80002d0 <__aeabi_i2f>
 800091e:	4603      	mov	r3, r0
 8000920:	4619      	mov	r1, r3
 8000922:	4620      	mov	r0, r4
 8000924:	f7ff fddc 	bl	80004e0 <__aeabi_fdiv>
 8000928:	4603      	mov	r3, r0
 800092a:	4927      	ldr	r1, [pc, #156]	; (80009c8 <cal_cycle+0xc4>)
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fd23 	bl	8000378 <__aeabi_fmul>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <cal_cycle+0xc8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4619      	mov	r1, r3
 800093c:	4610      	mov	r0, r2
 800093e:	f7ff fc11 	bl	8000164 <__aeabi_fsub>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <cal_cycle+0xcc>)
 8000948:	601a      	str	r2, [r3, #0]
    scale_buzzer += (float) (1 / (red_time))*100/10;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <cal_cycle+0xc0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2201      	movs	r2, #1
 8000950:	fb92 f3f3 	sdiv	r3, r2, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fcbb 	bl	80002d0 <__aeabi_i2f>
 800095a:	4603      	mov	r3, r0
 800095c:	491a      	ldr	r1, [pc, #104]	; (80009c8 <cal_cycle+0xc4>)
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fd0a 	bl	8000378 <__aeabi_fmul>
 8000964:	4603      	mov	r3, r0
 8000966:	491b      	ldr	r1, [pc, #108]	; (80009d4 <cal_cycle+0xd0>)
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fdb9 	bl	80004e0 <__aeabi_fdiv>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <cal_cycle+0xc8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f7ff fbf5 	bl	8000168 <__addsf3>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <cal_cycle+0xc8>)
 8000984:	601a      	str	r2, [r3, #0]
    if (scale_buzzer >= (1 / (red_time))*100) {
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <cal_cycle+0xc0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2201      	movs	r2, #1
 800098c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000990:	2264      	movs	r2, #100	; 0x64
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fc9a 	bl	80002d0 <__aeabi_i2f>
 800099c:	4602      	mov	r2, r0
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <cal_cycle+0xc8>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4610      	mov	r0, r2
 80009a6:	f7ff fe8f 	bl	80006c8 <__aeabi_fcmple>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d100      	bne.n	80009b2 <cal_cycle+0xae>
        scale_buzzer = 0;
    }
}
 80009b0:	e003      	b.n	80009ba <cal_cycle+0xb6>
        scale_buzzer = 0;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <cal_cycle+0xc8>)
 80009b4:	f04f 0200 	mov.w	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	bd98      	pop	{r3, r4, r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000250 	.word	0x20000250
 80009c4:	2000004c 	.word	0x2000004c
 80009c8:	42c80000 	.word	0x42c80000
 80009cc:	2000011c 	.word	0x2000011c
 80009d0:	2000024c 	.word	0x2000024c
 80009d4:	41200000 	.word	0x41200000

080009d8 <buzzer>:

void buzzer(){
 80009d8:	b598      	push	{r3, r4, r7, lr}
 80009da:	af00      	add	r7, sp, #0
	switch(state_buzzer){
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <buzzer+0x90>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d002      	beq.n	80009ea <buzzer+0x12>
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d036      	beq.n	8000a56 <buzzer+0x7e>
	}
	break;
	case OFF:
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
		break;
	default: break;
 80009e8:	e03b      	b.n	8000a62 <buzzer+0x8a>
	if (timer_flag[6] == 1){// just for decrease the counter, like the red time
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <buzzer+0x94>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d111      	bne.n	8000a16 <buzzer+0x3e>
		if (buzzer_counter>=0)
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <buzzer+0x98>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db04      	blt.n	8000a04 <buzzer+0x2c>
		{HAL_GPIO_TogglePin(TEST_GPIO_Port,TEST_Pin);}
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	481d      	ldr	r0, [pc, #116]	; (8000a74 <buzzer+0x9c>)
 8000a00:	f002 f8b3 	bl	8002b6a <HAL_GPIO_TogglePin>
		buzzer_counter--;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <buzzer+0x98>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	4a19      	ldr	r2, [pc, #100]	; (8000a70 <buzzer+0x98>)
 8000a0c:	6013      	str	r3, [r2, #0]
		setTimer(100, 6);
 8000a0e:	2106      	movs	r1, #6
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f001 f907 	bl	8001c24 <setTimer>
	if (timer_flag[7] == 1){// for update the PWM more detail
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <buzzer+0x94>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d114      	bne.n	8000a48 <buzzer+0x70>
		cal_cycle ();
 8000a1e:	f7ff ff71 	bl	8000904 <cal_cycle>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,100- cycle);
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <buzzer+0xa0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4814      	ldr	r0, [pc, #80]	; (8000a7c <buzzer+0xa4>)
 8000a2a:	f7ff fb9b 	bl	8000164 <__aeabi_fsub>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <buzzer+0xa8>)
 8000a34:	681c      	ldr	r4, [r3, #0]
 8000a36:	4610      	mov	r0, r2
 8000a38:	f7ff fe64 	bl	8000704 <__aeabi_f2uiz>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	6363      	str	r3, [r4, #52]	; 0x34
		setTimer(10, 7);// because we want to update the speaker every 100ms, so we set 10
 8000a40:	2107      	movs	r1, #7
 8000a42:	200a      	movs	r0, #10
 8000a44:	f001 f8ee 	bl	8001c24 <setTimer>
	if (buzzer_counter==0){
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <buzzer+0x98>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d107      	bne.n	8000a60 <buzzer+0x88>
		get_buzzer_counter();
 8000a50:	f7ff ff4a 	bl	80008e8 <get_buzzer_counter>
	break;
 8000a54:	e004      	b.n	8000a60 <buzzer+0x88>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <buzzer+0xa8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000a5e:	e000      	b.n	8000a62 <buzzer+0x8a>
	break;
 8000a60:	bf00      	nop
	}
}
 8000a62:	bf00      	nop
 8000a64:	bd98      	pop	{r3, r4, r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000044 	.word	0x20000044
 8000a6c:	20000058 	.word	0x20000058
 8000a70:	20000250 	.word	0x20000250
 8000a74:	40011000 	.word	0x40011000
 8000a78:	2000024c 	.word	0x2000024c
 8000a7c:	42c80000 	.word	0x42c80000
 8000a80:	20000260 	.word	0x20000260

08000a84 <fsm_auto>:
int green_time = 3;
int red_time_cd = 0 ; // temp variable for red time length
int yellow_time_cd= 0 ;
int green_time_cd = 0 ;

void fsm_auto(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	switch (status){
 8000a88:	4b57      	ldr	r3, [pc, #348]	; (8000be8 <fsm_auto+0x164>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3b5a      	subs	r3, #90	; 0x5a
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	f200 809e 	bhi.w	8000bd0 <fsm_auto+0x14c>
 8000a94:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <fsm_auto+0x18>)
 8000a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9a:	bf00      	nop
 8000a9c:	08000ab1 	.word	0x08000ab1
 8000aa0:	08000ad1 	.word	0x08000ad1
 8000aa4:	08000b0d 	.word	0x08000b0d
 8000aa8:	08000b51 	.word	0x08000b51
 8000aac:	08000b8d 	.word	0x08000b8d
	case INIT:
		red_time_cd = red_time; // time length = 5s, start at 4 and end at 0
 8000ab0:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <fsm_auto+0x168>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a4e      	ldr	r2, [pc, #312]	; (8000bf0 <fsm_auto+0x16c>)
 8000ab6:	6013      	str	r3, [r2, #0]
		green_time_cd = green_time;
 8000ab8:	4b4e      	ldr	r3, [pc, #312]	; (8000bf4 <fsm_auto+0x170>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <fsm_auto+0x174>)
 8000abe:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2064      	movs	r0, #100	; 0x64
 8000ac4:	f001 f8ae 	bl	8001c24 <setTimer>
		status = AUTO_RED_GREEN;
 8000ac8:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <fsm_auto+0x164>)
 8000aca:	225b      	movs	r2, #91	; 0x5b
 8000acc:	601a      	str	r2, [r3, #0]
		break;
 8000ace:	e088      	b.n	8000be2 <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <fsm_auto+0x178>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d17d      	bne.n	8000bd4 <fsm_auto+0x150>
			red_time_cd --;
 8000ad8:	4b45      	ldr	r3, [pc, #276]	; (8000bf0 <fsm_auto+0x16c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a44      	ldr	r2, [pc, #272]	; (8000bf0 <fsm_auto+0x16c>)
 8000ae0:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000ae2:	4b45      	ldr	r3, [pc, #276]	; (8000bf8 <fsm_auto+0x174>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	4a43      	ldr	r2, [pc, #268]	; (8000bf8 <fsm_auto+0x174>)
 8000aea:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000aec:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <fsm_auto+0x174>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d106      	bne.n	8000b02 <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 8000af4:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <fsm_auto+0x164>)
 8000af6:	225c      	movs	r2, #92	; 0x5c
 8000af8:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000afa:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <fsm_auto+0x17c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a41      	ldr	r2, [pc, #260]	; (8000c04 <fsm_auto+0x180>)
 8000b00:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f001 f88d 	bl	8001c24 <setTimer>
		}
		break;
 8000b0a:	e063      	b.n	8000bd4 <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <fsm_auto+0x178>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d161      	bne.n	8000bd8 <fsm_auto+0x154>
			red_time_cd --;
 8000b14:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <fsm_auto+0x16c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a35      	ldr	r2, [pc, #212]	; (8000bf0 <fsm_auto+0x16c>)
 8000b1c:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000b1e:	4b39      	ldr	r3, [pc, #228]	; (8000c04 <fsm_auto+0x180>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a37      	ldr	r2, [pc, #220]	; (8000c04 <fsm_auto+0x180>)
 8000b26:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <fsm_auto+0x180>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10a      	bne.n	8000b46 <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <fsm_auto+0x164>)
 8000b32:	225d      	movs	r2, #93	; 0x5d
 8000b34:	601a      	str	r2, [r3, #0]
				red_time_cd = red_time;
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <fsm_auto+0x168>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2d      	ldr	r2, [pc, #180]	; (8000bf0 <fsm_auto+0x16c>)
 8000b3c:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <fsm_auto+0x170>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a2d      	ldr	r2, [pc, #180]	; (8000bf8 <fsm_auto+0x174>)
 8000b44:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000b46:	2100      	movs	r1, #0
 8000b48:	2064      	movs	r0, #100	; 0x64
 8000b4a:	f001 f86b 	bl	8001c24 <setTimer>
		}
		break;
 8000b4e:	e043      	b.n	8000bd8 <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <fsm_auto+0x178>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d141      	bne.n	8000bdc <fsm_auto+0x158>
			red_time_cd --;
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <fsm_auto+0x16c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	4a24      	ldr	r2, [pc, #144]	; (8000bf0 <fsm_auto+0x16c>)
 8000b60:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000b62:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <fsm_auto+0x174>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	4a23      	ldr	r2, [pc, #140]	; (8000bf8 <fsm_auto+0x174>)
 8000b6a:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <fsm_auto+0x174>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <fsm_auto+0x164>)
 8000b76:	225e      	movs	r2, #94	; 0x5e
 8000b78:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <fsm_auto+0x17c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <fsm_auto+0x180>)
 8000b80:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f001 f84d 	bl	8001c24 <setTimer>
		}
		break;
 8000b8a:	e027      	b.n	8000bdc <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <fsm_auto+0x178>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d125      	bne.n	8000be0 <fsm_auto+0x15c>
			red_time_cd --;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <fsm_auto+0x16c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	4a15      	ldr	r2, [pc, #84]	; (8000bf0 <fsm_auto+0x16c>)
 8000b9c:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <fsm_auto+0x180>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <fsm_auto+0x180>)
 8000ba6:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <fsm_auto+0x180>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10a      	bne.n	8000bc6 <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <fsm_auto+0x164>)
 8000bb2:	225b      	movs	r2, #91	; 0x5b
 8000bb4:	601a      	str	r2, [r3, #0]
				red_time_cd  = red_time;
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <fsm_auto+0x168>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <fsm_auto+0x16c>)
 8000bbc:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <fsm_auto+0x170>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <fsm_auto+0x174>)
 8000bc4:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	f001 f82b 	bl	8001c24 <setTimer>
		}
		break;
 8000bce:	e007      	b.n	8000be0 <fsm_auto+0x15c>
	default: break;
 8000bd0:	bf00      	nop
 8000bd2:	e006      	b.n	8000be2 <fsm_auto+0x15e>
		break;
 8000bd4:	bf00      	nop
 8000bd6:	e004      	b.n	8000be2 <fsm_auto+0x15e>
		break;
 8000bd8:	bf00      	nop
 8000bda:	e002      	b.n	8000be2 <fsm_auto+0x15e>
		break;
 8000bdc:	bf00      	nop
 8000bde:	e000      	b.n	8000be2 <fsm_auto+0x15e>
		break;
 8000be0:	bf00      	nop
	}
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000048 	.word	0x20000048
 8000bec:	2000004c 	.word	0x2000004c
 8000bf0:	20000120 	.word	0x20000120
 8000bf4:	20000054 	.word	0x20000054
 8000bf8:	20000128 	.word	0x20000128
 8000bfc:	20000058 	.word	0x20000058
 8000c00:	20000050 	.word	0x20000050
 8000c04:	20000124 	.word	0x20000124

08000c08 <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp , yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <turnbackINIT+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dd07      	ble.n	8000c24 <turnbackINIT+0x1c>
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <turnbackINIT+0x54>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd03      	ble.n	8000c24 <turnbackINIT+0x1c>
			green_time < 1){
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <turnbackINIT+0x58>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dc08      	bgt.n	8000c36 <turnbackINIT+0x2e>
		red_time = 5;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <turnbackINIT+0x50>)
 8000c26:	2205      	movs	r2, #5
 8000c28:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <turnbackINIT+0x54>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	601a      	str	r2, [r3, #0]
		green_time = 3;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <turnbackINIT+0x58>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	601a      	str	r2, [r3, #0]
	}
	setTimer(0, 3); // turn off timer_flag for scan led
 8000c36:	2103      	movs	r1, #3
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 fff3 	bl	8001c24 <setTimer>
	red_time = green_time + yellow_time;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <turnbackINIT+0x58>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <turnbackINIT+0x54>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <turnbackINIT+0x50>)
 8000c4a:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <turnbackINIT+0x5c>)
 8000c4e:	225a      	movs	r2, #90	; 0x5a
 8000c50:	601a      	str	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000004c 	.word	0x2000004c
 8000c5c:	20000050 	.word	0x20000050
 8000c60:	20000054 	.word	0x20000054
 8000c64:	20000048 	.word	0x20000048

08000c68 <checkButton1>:
void checkButton1(){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fd69 	bl	8000744 <isButtonPressed>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d11e      	bne.n	8000cb6 <checkButton1+0x4e>
		//reset set timer

		if (status == MANUAL_RED) {
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <checkButton1+0x54>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b14      	cmp	r3, #20
 8000c7e:	d103      	bne.n	8000c88 <checkButton1+0x20>
			status = MANUAL_YELLOW;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <checkButton1+0x54>)
 8000c82:	2215      	movs	r2, #21
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e011      	b.n	8000cac <checkButton1+0x44>
		}
		else if (status == MANUAL_YELLOW) {
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <checkButton1+0x54>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b15      	cmp	r3, #21
 8000c8e:	d103      	bne.n	8000c98 <checkButton1+0x30>
			status = MANUAL_GREEN;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <checkButton1+0x54>)
 8000c92:	2216      	movs	r2, #22
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	e009      	b.n	8000cac <checkButton1+0x44>
		}
		else if (status == MANUAL_GREEN) {
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <checkButton1+0x54>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b16      	cmp	r3, #22
 8000c9e:	d102      	bne.n	8000ca6 <checkButton1+0x3e>
			turnbackINIT();
 8000ca0:	f7ff ffb2 	bl	8000c08 <turnbackINIT>
 8000ca4:	e002      	b.n	8000cac <checkButton1+0x44>
		}
		else {
			status = MANUAL_INIT; //auto state -> manual state
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <checkButton1+0x54>)
 8000ca8:	2217      	movs	r2, #23
 8000caa:	601a      	str	r2, [r3, #0]
		}
		setTimer(10000, 2);// after 10 sec don't press button1 -> turn back to auto mode
 8000cac:	2102      	movs	r1, #2
 8000cae:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cb2:	f000 ffb7 	bl	8001c24 <setTimer>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000048 	.word	0x20000048

08000cc0 <checkButton2>:

void checkButton2(){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fd3d 	bl	8000744 <isButtonPressed>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d126      	bne.n	8000d1e <checkButton2+0x5e>
		if (status == MANUAL_RED){
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <checkButton2+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b14      	cmp	r3, #20
 8000cd6:	d108      	bne.n	8000cea <checkButton2+0x2a>
			if (red_time_tmp < 99) red_time_tmp++;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <checkButton2+0x68>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b62      	cmp	r3, #98	; 0x62
 8000cde:	dc04      	bgt.n	8000cea <checkButton2+0x2a>
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <checkButton2+0x68>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <checkButton2+0x68>)
 8000ce8:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_YELLOW){
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <checkButton2+0x64>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b15      	cmp	r3, #21
 8000cf0:	d108      	bne.n	8000d04 <checkButton2+0x44>
			if (yellow_time_tmp < 99) yellow_time_tmp++;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <checkButton2+0x6c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b62      	cmp	r3, #98	; 0x62
 8000cf8:	dc04      	bgt.n	8000d04 <checkButton2+0x44>
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <checkButton2+0x6c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <checkButton2+0x6c>)
 8000d02:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_GREEN){
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <checkButton2+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b16      	cmp	r3, #22
 8000d0a:	d108      	bne.n	8000d1e <checkButton2+0x5e>
			if (green_time_tmp < 99) green_time_tmp++;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <checkButton2+0x70>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b62      	cmp	r3, #98	; 0x62
 8000d12:	dc04      	bgt.n	8000d1e <checkButton2+0x5e>
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <checkButton2+0x70>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <checkButton2+0x70>)
 8000d1c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000048 	.word	0x20000048
 8000d28:	2000025c 	.word	0x2000025c
 8000d2c:	20000254 	.word	0x20000254
 8000d30:	20000258 	.word	0x20000258

08000d34 <checkButton3>:
void checkButton3(){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff fd03 	bl	8000744 <isButtonPressed>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d119      	bne.n	8000d78 <checkButton3+0x44>
		if (status == MANUAL_RED){
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <checkButton3+0x48>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b14      	cmp	r3, #20
 8000d4a:	d104      	bne.n	8000d56 <checkButton3+0x22>
			red_time = red_time_tmp;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <checkButton3+0x4c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <checkButton3+0x50>)
 8000d52:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 8000d54:	e010      	b.n	8000d78 <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <checkButton3+0x48>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b15      	cmp	r3, #21
 8000d5c:	d104      	bne.n	8000d68 <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <checkButton3+0x54>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <checkButton3+0x58>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	e007      	b.n	8000d78 <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <checkButton3+0x48>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b16      	cmp	r3, #22
 8000d6e:	d103      	bne.n	8000d78 <checkButton3+0x44>
			green_time = green_time_tmp;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <checkButton3+0x5c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <checkButton3+0x60>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000048 	.word	0x20000048
 8000d80:	2000025c 	.word	0x2000025c
 8000d84:	2000004c 	.word	0x2000004c
 8000d88:	20000254 	.word	0x20000254
 8000d8c:	20000050 	.word	0x20000050
 8000d90:	20000258 	.word	0x20000258
 8000d94:	20000054 	.word	0x20000054

08000d98 <fsm_manual>:


void fsm_manual(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	checkButton1();
 8000d9c:	f7ff ff64 	bl	8000c68 <checkButton1>
	switch (status){
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <fsm_manual+0x94>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3b14      	subs	r3, #20
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d83c      	bhi.n	8000e24 <fsm_manual+0x8c>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <fsm_manual+0x18>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000de3 	.word	0x08000de3
 8000db4:	08000df9 	.word	0x08000df9
 8000db8:	08000e0f 	.word	0x08000e0f
 8000dbc:	08000dc1 	.word	0x08000dc1
	case MANUAL_INIT:
		red_time_tmp = 0;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <fsm_manual+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
		yellow_time_tmp = 0;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <fsm_manual+0x9c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <fsm_manual+0xa0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <fsm_manual+0x94>)
 8000dd4:	2214      	movs	r2, #20
 8000dd6:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 8000dd8:	2103      	movs	r1, #3
 8000dda:	2032      	movs	r0, #50	; 0x32
 8000ddc:	f000 ff22 	bl	8001c24 <setTimer>
		break;
 8000de0:	e021      	b.n	8000e26 <fsm_manual+0x8e>
	case MANUAL_RED:
		if (timer_flag [2] == 1) {
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <fsm_manual+0xa4>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d101      	bne.n	8000dee <fsm_manual+0x56>
			turnbackINIT();
 8000dea:	f7ff ff0d 	bl	8000c08 <turnbackINIT>
		}
		checkButton2();
 8000dee:	f7ff ff67 	bl	8000cc0 <checkButton2>
		checkButton3();
 8000df2:	f7ff ff9f 	bl	8000d34 <checkButton3>
		break;
 8000df6:	e016      	b.n	8000e26 <fsm_manual+0x8e>
	case MANUAL_YELLOW:
		if (timer_flag [2] == 1){
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <fsm_manual+0xa4>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <fsm_manual+0x6c>
			turnbackINIT();
 8000e00:	f7ff ff02 	bl	8000c08 <turnbackINIT>
		}
		checkButton2();
 8000e04:	f7ff ff5c 	bl	8000cc0 <checkButton2>
		checkButton3();
 8000e08:	f7ff ff94 	bl	8000d34 <checkButton3>
		break;
 8000e0c:	e00b      	b.n	8000e26 <fsm_manual+0x8e>
	case MANUAL_GREEN:
		if (timer_flag [2] == 1){
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <fsm_manual+0xa4>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d101      	bne.n	8000e1a <fsm_manual+0x82>
			turnbackINIT();
 8000e16:	f7ff fef7 	bl	8000c08 <turnbackINIT>
		}
		checkButton2();
 8000e1a:	f7ff ff51 	bl	8000cc0 <checkButton2>
		checkButton3();
 8000e1e:	f7ff ff89 	bl	8000d34 <checkButton3>
		break;
 8000e22:	e000      	b.n	8000e26 <fsm_manual+0x8e>
	default: break;
 8000e24:	bf00      	nop
	}




}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000048 	.word	0x20000048
 8000e30:	2000025c 	.word	0x2000025c
 8000e34:	20000254 	.word	0x20000254
 8000e38:	20000258 	.word	0x20000258
 8000e3c:	20000058 	.word	0x20000058

08000e40 <fsm_pedestrian_light>:
 */

#include "fsm_pedestrian_light.h"
#include "buzzer.h"

void fsm_pedestrian_light(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	if(isButtonPressed(3)){
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff fc7d 	bl	8000744 <isButtonPressed>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <fsm_pedestrian_light+0x1a>
		setTimer(1500,4);
 8000e50:	2104      	movs	r1, #4
 8000e52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e56:	f000 fee5 	bl	8001c24 <setTimer>
//		case MANUAL_GREEN:
//			state_buzzer =OFF;
//			break;
//		default: break;
//	}
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <main>:
void test_print_1(){
	int len=sprintf(str,"%s\r\n","Hello world");
	HAL_UART_Transmit (&huart2 , (uint8_t *) str, len, 1000);
}
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f001 faac 	bl	80023c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e68:	f000 f856 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 f97c 	bl	8001168 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e70:	f000 f88e 	bl	8000f90 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e74:	f000 f94e 	bl	8001114 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e78:	f000 f8d6 	bl	8001028 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e7c:	481c      	ldr	r0, [pc, #112]	; (8000ef0 <main+0x90>)
 8000e7e:	f002 fb07 	bl	8003490 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e82:	2100      	movs	r1, #0
 8000e84:	481b      	ldr	r0, [pc, #108]	; (8000ef4 <main+0x94>)
 8000e86:	f002 fbad 	bl	80035e4 <HAL_TIM_PWM_Start>
  setTimer(10, 7);// for the PWM detail
 8000e8a:	2107      	movs	r1, #7
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f000 fec9 	bl	8001c24 <setTimer>
  setTimer(10, 6);// for the buzzer counter
 8000e92:	2106      	movs	r1, #6
 8000e94:	200a      	movs	r0, #10
 8000e96:	f000 fec5 	bl	8001c24 <setTimer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	SCH_Add_Task(scanLed, 0, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <main+0x98>)
 8000ea0:	f000 fc1e 	bl	80016e0 <SCH_Add_Task>
    SCH_Add_Task(timerRun, 0, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4814      	ldr	r0, [pc, #80]	; (8000efc <main+0x9c>)
 8000eaa:	f000 fc19 	bl	80016e0 <SCH_Add_Task>
    SCH_Add_Task(getKeyinput, 0, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <main+0xa0>)
 8000eb4:	f000 fc14 	bl	80016e0 <SCH_Add_Task>
    SCH_Add_Task(print_statement, 0, 1);// uart
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4811      	ldr	r0, [pc, #68]	; (8000f04 <main+0xa4>)
 8000ebe:	f000 fc0f 	bl	80016e0 <SCH_Add_Task>
    SCH_Add_Task(fsm_auto, 0, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <main+0xa8>)
 8000ec8:	f000 fc0a 	bl	80016e0 <SCH_Add_Task>
    SCH_Add_Task(fsm_manual, 0, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480e      	ldr	r0, [pc, #56]	; (8000f0c <main+0xac>)
 8000ed2:	f000 fc05 	bl	80016e0 <SCH_Add_Task>
    SCH_Add_Task(fsm_pedestrian_light, 0, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2100      	movs	r1, #0
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <main+0xb0>)
 8000edc:	f000 fc00 	bl	80016e0 <SCH_Add_Task>
    SCH_Add_Task(buzzer, 0, 1);// task buzzer
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <main+0xb4>)
 8000ee6:	f000 fbfb 	bl	80016e0 <SCH_Add_Task>
//	  fsm_auto();
//	  fsm_manual();
//	  fsm_pedestrian_light();
//	  buzzer();
//	  print_statement();
	  SCH_Dispatch_Tasks();
 8000eea:	f000 fe57 	bl	8001b9c <SCH_Dispatch_Tasks>
 8000eee:	e7fc      	b.n	8000eea <main+0x8a>
 8000ef0:	200002a8 	.word	0x200002a8
 8000ef4:	20000260 	.word	0x20000260
 8000ef8:	08001509 	.word	0x08001509
 8000efc:	08001c55 	.word	0x08001c55
 8000f00:	080007fd 	.word	0x080007fd
 8000f04:	08001fa5 	.word	0x08001fa5
 8000f08:	08000a85 	.word	0x08000a85
 8000f0c:	08000d99 	.word	0x08000d99
 8000f10:	08000e41 	.word	0x08000e41
 8000f14:	080009d9 	.word	0x080009d9

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b090      	sub	sp, #64	; 0x40
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0318 	add.w	r3, r7, #24
 8000f22:	2228      	movs	r2, #40	; 0x28
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 f80c 	bl	8004f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f42:	2310      	movs	r3, #16
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fe40 	bl	8002bd4 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f5a:	f000 f9aa 	bl	80012b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 f8ac 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f82:	f000 f996 	bl	80012b2 <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3740      	adds	r7, #64	; 0x40
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fb6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd4:	4813      	ldr	r0, [pc, #76]	; (8001024 <MX_TIM2_Init+0x94>)
 8000fd6:	f002 fa0b 	bl	80033f0 <HAL_TIM_Base_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fe0:	f000 f967 	bl	80012b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_TIM2_Init+0x94>)
 8000ff2:	f002 fd63 	bl	8003abc <HAL_TIM_ConfigClockSource>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ffc:	f000 f959 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_TIM2_Init+0x94>)
 800100e:	f003 f8e5 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001018:	f000 f94b 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200002a8 	.word	0x200002a8

08001028 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_TIM3_Init+0xe4>)
 800105a:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <MX_TIM3_Init+0xe8>)
 800105c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <MX_TIM3_Init+0xe4>)
 8001060:	224f      	movs	r2, #79	; 0x4f
 8001062:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <MX_TIM3_Init+0xe4>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <MX_TIM3_Init+0xe4>)
 800106c:	2263      	movs	r2, #99	; 0x63
 800106e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <MX_TIM3_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <MX_TIM3_Init+0xe4>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800107c:	4823      	ldr	r0, [pc, #140]	; (800110c <MX_TIM3_Init+0xe4>)
 800107e:	f002 f9b7 	bl	80033f0 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001088:	f000 f913 	bl	80012b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001096:	4619      	mov	r1, r3
 8001098:	481c      	ldr	r0, [pc, #112]	; (800110c <MX_TIM3_Init+0xe4>)
 800109a:	f002 fd0f 	bl	8003abc <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010a4:	f000 f905 	bl	80012b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010a8:	4818      	ldr	r0, [pc, #96]	; (800110c <MX_TIM3_Init+0xe4>)
 80010aa:	f002 fa43 	bl	8003534 <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80010b4:	f000 f8fd 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4619      	mov	r1, r3
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <MX_TIM3_Init+0xe4>)
 80010c8:	f003 f888 	bl	80041dc <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80010d2:	f000 f8ee 	bl	80012b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d6:	2360      	movs	r3, #96	; 0x60
 80010d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM3_Init+0xe4>)
 80010ee:	f002 fc23 	bl	8003938 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80010f8:	f000 f8db 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM3_Init+0xe4>)
 80010fe:	f000 fe4b 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3738      	adds	r7, #56	; 0x38
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000260 	.word	0x20000260
 8001110:	40000400 	.word	0x40000400

08001114 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <MX_USART2_UART_Init+0x50>)
 800111c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001120:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_USART2_UART_Init+0x4c>)
 800114c:	f003 f8b6 	bl	80042bc <HAL_UART_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001156:	f000 f8ac 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200002f0 	.word	0x200002f0
 8001164:	40004400 	.word	0x40004400

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <MX_GPIO_Init+0x114>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a3e      	ldr	r2, [pc, #248]	; (800127c <MX_GPIO_Init+0x114>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b3c      	ldr	r3, [pc, #240]	; (800127c <MX_GPIO_Init+0x114>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001194:	4b39      	ldr	r3, [pc, #228]	; (800127c <MX_GPIO_Init+0x114>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a38      	ldr	r2, [pc, #224]	; (800127c <MX_GPIO_Init+0x114>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <MX_GPIO_Init+0x114>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <MX_GPIO_Init+0x114>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <MX_GPIO_Init+0x114>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <MX_GPIO_Init+0x114>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80011ca:	482d      	ldr	r0, [pc, #180]	; (8001280 <MX_GPIO_Init+0x118>)
 80011cc:	f001 fcb5 	bl	8002b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d6:	482b      	ldr	r0, [pc, #172]	; (8001284 <MX_GPIO_Init+0x11c>)
 80011d8:	f001 fcaf 	bl	8002b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80011e2:	4829      	ldr	r0, [pc, #164]	; (8001288 <MX_GPIO_Init+0x120>)
 80011e4:	f001 fca9 	bl	8002b3a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 80011e8:	2313      	movs	r3, #19
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4823      	ldr	r0, [pc, #140]	; (8001288 <MX_GPIO_Init+0x120>)
 80011fc:	f001 fb02 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	481b      	ldr	r0, [pc, #108]	; (8001280 <MX_GPIO_Init+0x118>)
 8001214:	f001 faf6 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 8001218:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4813      	ldr	r0, [pc, #76]	; (8001280 <MX_GPIO_Init+0x118>)
 8001232:	f001 fae7 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	480d      	ldr	r0, [pc, #52]	; (8001284 <MX_GPIO_Init+0x11c>)
 8001250:	f001 fad8 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 8001254:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2302      	movs	r3, #2
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4619      	mov	r1, r3
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_GPIO_Init+0x120>)
 800126e:	f001 fac9 	bl	8002804 <HAL_GPIO_Init>

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40011000 	.word	0x40011000
 8001288:	40010800 	.word	0x40010800

0800128c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
//	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
//	timerRun(); // software timer
//	getKeyinput(); // button
//	print_statement();
	SCH_Update();
 8001294:	f000 fa04 	bl	80016a0 <SCH_Update>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b6:	b672      	cpsid	i
}
 80012b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ba:	e7fe      	b.n	80012ba <Error_Handler+0x8>

080012bc <turnoffAll>:

#include "scanLed.h"

int enable_change = 0;
//lenh bat tat den cho nhanh
void turnoffAll(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <turnoffAll+0x4c>)
 80012c8:	f001 fc37 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2108      	movs	r1, #8
 80012d0:	480e      	ldr	r0, [pc, #56]	; (800130c <turnoffAll+0x50>)
 80012d2:	f001 fc32 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2120      	movs	r1, #32
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <turnoffAll+0x50>)
 80012dc:	f001 fc2d 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2110      	movs	r1, #16
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <turnoffAll+0x50>)
 80012e6:	f001 fc28 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <turnoffAll+0x50>)
 80012f2:	f001 fc22 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <turnoffAll+0x4c>)
 80012fe:	f001 fc1c 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00

08001310 <onRed_1>:
void onRed_1(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <onRed_1+0x20>)
 800131c:	f001 fc0d 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2108      	movs	r1, #8
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <onRed_1+0x24>)
 8001326:	f001 fc08 	bl	8002b3a <HAL_GPIO_WritePin>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40010800 	.word	0x40010800
 8001334:	40010c00 	.word	0x40010c00

08001338 <onYellow_1>:
void onYellow_1(){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <onYellow_1+0x20>)
 8001344:	f001 fbf9 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2108      	movs	r1, #8
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <onYellow_1+0x24>)
 800134e:	f001 fbf4 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40010800 	.word	0x40010800
 800135c:	40010c00 	.word	0x40010c00

08001360 <onGreen_1>:
void onGreen_1(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <onGreen_1+0x20>)
 800136c:	f001 fbe5 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2108      	movs	r1, #8
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <onGreen_1+0x24>)
 8001376:	f001 fbe0 	bl	8002b3a <HAL_GPIO_WritePin>
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40010800 	.word	0x40010800
 8001384:	40010c00 	.word	0x40010c00

08001388 <onRed_2>:
void onRed_2(){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2120      	movs	r1, #32
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <onRed_2+0x1c>)
 8001392:	f001 fbd2 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2110      	movs	r1, #16
 800139a:	4802      	ldr	r0, [pc, #8]	; (80013a4 <onRed_2+0x1c>)
 800139c:	f001 fbcd 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010c00 	.word	0x40010c00

080013a8 <onYellow_2>:
void onYellow_2(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2120      	movs	r1, #32
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <onYellow_2+0x1c>)
 80013b2:	f001 fbc2 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2110      	movs	r1, #16
 80013ba:	4802      	ldr	r0, [pc, #8]	; (80013c4 <onYellow_2+0x1c>)
 80013bc:	f001 fbbd 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40010c00 	.word	0x40010c00

080013c8 <onGreen_2>:
void onGreen_2(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2120      	movs	r1, #32
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <onGreen_2+0x1c>)
 80013d2:	f001 fbb2 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2110      	movs	r1, #16
 80013da:	4802      	ldr	r0, [pc, #8]	; (80013e4 <onGreen_2+0x1c>)
 80013dc:	f001 fbad 	bl	8002b3a <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40010c00 	.word	0x40010c00

080013e8 <offPed>:
void offPed(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <offPed+0x20>)
 80013f4:	f001 fba1 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <offPed+0x24>)
 8001400:	f001 fb9b 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40010c00 	.word	0x40010c00
 800140c:	40010800 	.word	0x40010800

08001410 <onGreenPed>:

void onGreenPed(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <onGreenPed+0x20>)
 800141c:	f001 fb8d 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <onGreenPed+0x24>)
 8001428:	f001 fb87 	bl	8002b3a <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40010800 	.word	0x40010800

08001438 <onRedPed>:
void onRedPed(){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <onRedPed+0x20>)
 8001444:	f001 fb79 	bl	8002b3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <onRedPed+0x24>)
 8001450:	f001 fb73 	bl	8002b3a <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40010800 	.word	0x40010800

08001460 <onRed_Toggle>:
void onRed_Toggle(){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <onRed_Toggle+0x34>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d107      	bne.n	800147c <onRed_Toggle+0x1c>
		onRed_1();
 800146c:	f7ff ff50 	bl	8001310 <onRed_1>
		onRed_2();
 8001470:	f7ff ff8a 	bl	8001388 <onRed_2>
		enable_change = 1;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <onRed_Toggle+0x34>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 800147a:	e008      	b.n	800148e <onRed_Toggle+0x2e>
	else if (enable_change == 1){
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <onRed_Toggle+0x34>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d104      	bne.n	800148e <onRed_Toggle+0x2e>
		turnoffAll();
 8001484:	f7ff ff1a 	bl	80012bc <turnoffAll>
		enable_change = 0;
 8001488:	4b02      	ldr	r3, [pc, #8]	; (8001494 <onRed_Toggle+0x34>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000012c 	.word	0x2000012c

08001498 <onGreen_Toggle>:
void onGreen_Toggle(){
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <onGreen_Toggle+0x34>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <onGreen_Toggle+0x1c>
		onGreen_1();
 80014a4:	f7ff ff5c 	bl	8001360 <onGreen_1>
		onGreen_2();
 80014a8:	f7ff ff8e 	bl	80013c8 <onGreen_2>
		enable_change = 1;
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <onGreen_Toggle+0x34>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 80014b2:	e008      	b.n	80014c6 <onGreen_Toggle+0x2e>
	else if (enable_change == 1){
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <onGreen_Toggle+0x34>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d104      	bne.n	80014c6 <onGreen_Toggle+0x2e>
		turnoffAll();
 80014bc:	f7ff fefe 	bl	80012bc <turnoffAll>
		enable_change = 0;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <onGreen_Toggle+0x34>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000012c 	.word	0x2000012c

080014d0 <onYellow_Toggle>:
void onYellow_Toggle(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <onYellow_Toggle+0x34>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d107      	bne.n	80014ec <onYellow_Toggle+0x1c>
		onYellow_1();
 80014dc:	f7ff ff2c 	bl	8001338 <onYellow_1>
		onYellow_2();
 80014e0:	f7ff ff62 	bl	80013a8 <onYellow_2>
		enable_change = 1;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <onYellow_Toggle+0x34>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 80014ea:	e008      	b.n	80014fe <onYellow_Toggle+0x2e>
	else if (enable_change == 1){
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <onYellow_Toggle+0x34>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d104      	bne.n	80014fe <onYellow_Toggle+0x2e>
		turnoffAll();
 80014f4:	f7ff fee2 	bl	80012bc <turnoffAll>
		enable_change = 0;
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <onYellow_Toggle+0x34>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000012c 	.word	0x2000012c

08001508 <scanLed>:
void scanLed(){
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	switch (status){
 800150c:	4b61      	ldr	r3, [pc, #388]	; (8001694 <scanLed+0x18c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b5e      	cmp	r3, #94	; 0x5e
 8001512:	f300 80ad 	bgt.w	8001670 <scanLed+0x168>
 8001516:	2b5b      	cmp	r3, #91	; 0x5b
 8001518:	da0b      	bge.n	8001532 <scanLed+0x2a>
 800151a:	2b16      	cmp	r3, #22
 800151c:	f000 8098 	beq.w	8001650 <scanLed+0x148>
 8001520:	2b16      	cmp	r3, #22
 8001522:	f300 80a5 	bgt.w	8001670 <scanLed+0x168>
 8001526:	2b14      	cmp	r3, #20
 8001528:	d072      	beq.n	8001610 <scanLed+0x108>
 800152a:	2b15      	cmp	r3, #21
 800152c:	f000 8080 	beq.w	8001630 <scanLed+0x128>
		if (timer_flag[3] == 1){
			onGreen_Toggle();
			setTimer(50,3);
		}
		break;
	default: break;
 8001530:	e09e      	b.n	8001670 <scanLed+0x168>
 8001532:	3b5b      	subs	r3, #91	; 0x5b
 8001534:	2b03      	cmp	r3, #3
 8001536:	f200 809b 	bhi.w	8001670 <scanLed+0x168>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <scanLed+0x38>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001581 	.word	0x08001581
 8001548:	080015b1 	.word	0x080015b1
 800154c:	080015e1 	.word	0x080015e1
		onRed_1();
 8001550:	f7ff fede 	bl	8001310 <onRed_1>
		onGreen_2();
 8001554:	f7ff ff38 	bl	80013c8 <onGreen_2>
		if(timer_flag[4] == 0){
 8001558:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <scanLed+0x190>)
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d105      	bne.n	800156c <scanLed+0x64>
			onGreenPed();
 8001560:	f7ff ff56 	bl	8001410 <onGreenPed>
			state_buzzer =OFF;//buzzer
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <scanLed+0x194>)
 8001566:	2202      	movs	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
		break;
 800156a:	e083      	b.n	8001674 <scanLed+0x16c>
		}else if(timer_flag[4] == 1){
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <scanLed+0x190>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d17f      	bne.n	8001674 <scanLed+0x16c>
			offPed();
 8001574:	f7ff ff38 	bl	80013e8 <offPed>
			state_buzzer =OFF;//buzzer
 8001578:	4b48      	ldr	r3, [pc, #288]	; (800169c <scanLed+0x194>)
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
		break;
 800157e:	e079      	b.n	8001674 <scanLed+0x16c>
		onRed_1();
 8001580:	f7ff fec6 	bl	8001310 <onRed_1>
		onYellow_2();
 8001584:	f7ff ff10 	bl	80013a8 <onYellow_2>
		if(timer_flag[4] == 0){
 8001588:	4b43      	ldr	r3, [pc, #268]	; (8001698 <scanLed+0x190>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <scanLed+0x94>
			onGreenPed();
 8001590:	f7ff ff3e 	bl	8001410 <onGreenPed>
			state_buzzer =OFF;//buzzer
 8001594:	4b41      	ldr	r3, [pc, #260]	; (800169c <scanLed+0x194>)
 8001596:	2202      	movs	r2, #2
 8001598:	601a      	str	r2, [r3, #0]
		break;
 800159a:	e06d      	b.n	8001678 <scanLed+0x170>
		}else if(timer_flag[4] == 1){
 800159c:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <scanLed+0x190>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d169      	bne.n	8001678 <scanLed+0x170>
			offPed();
 80015a4:	f7ff ff20 	bl	80013e8 <offPed>
			state_buzzer =OFF;//buzzer
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <scanLed+0x194>)
 80015aa:	2202      	movs	r2, #2
 80015ac:	601a      	str	r2, [r3, #0]
		break;
 80015ae:	e063      	b.n	8001678 <scanLed+0x170>
		onGreen_1();
 80015b0:	f7ff fed6 	bl	8001360 <onGreen_1>
		onRed_2();
 80015b4:	f7ff fee8 	bl	8001388 <onRed_2>
		if(timer_flag[4] == 0){
 80015b8:	4b37      	ldr	r3, [pc, #220]	; (8001698 <scanLed+0x190>)
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <scanLed+0xc4>
			state_buzzer =ON;//buzzer
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <scanLed+0x194>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]
			onRedPed();
 80015c6:	f7ff ff37 	bl	8001438 <onRedPed>
		break;
 80015ca:	e057      	b.n	800167c <scanLed+0x174>
		}else if(timer_flag[4] == 1){
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <scanLed+0x190>)
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d153      	bne.n	800167c <scanLed+0x174>
			state_buzzer =OFF;//buzzer
 80015d4:	4b31      	ldr	r3, [pc, #196]	; (800169c <scanLed+0x194>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	601a      	str	r2, [r3, #0]
			offPed();
 80015da:	f7ff ff05 	bl	80013e8 <offPed>
		break;
 80015de:	e04d      	b.n	800167c <scanLed+0x174>
		onYellow_1();
 80015e0:	f7ff feaa 	bl	8001338 <onYellow_1>
		onRed_2();
 80015e4:	f7ff fed0 	bl	8001388 <onRed_2>
		if(timer_flag[4] == 0){
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <scanLed+0x190>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <scanLed+0xf4>
			state_buzzer =ON;//buzzer
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <scanLed+0x194>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
			onRedPed();
 80015f6:	f7ff ff1f 	bl	8001438 <onRedPed>
		break;
 80015fa:	e041      	b.n	8001680 <scanLed+0x178>
		}else if(timer_flag[4] == 1){
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <scanLed+0x190>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d13d      	bne.n	8001680 <scanLed+0x178>
			state_buzzer =OFF;//buzzer
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <scanLed+0x194>)
 8001606:	2202      	movs	r2, #2
 8001608:	601a      	str	r2, [r3, #0]
			offPed();
 800160a:	f7ff feed 	bl	80013e8 <offPed>
		break;
 800160e:	e037      	b.n	8001680 <scanLed+0x178>
		offPed();
 8001610:	f7ff feea 	bl	80013e8 <offPed>
		state_buzzer =OFF;//buzzer
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <scanLed+0x194>)
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <scanLed+0x190>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d130      	bne.n	8001684 <scanLed+0x17c>
			onRed_Toggle();
 8001622:	f7ff ff1d 	bl	8001460 <onRed_Toggle>
			setTimer(50,3);
 8001626:	2103      	movs	r1, #3
 8001628:	2032      	movs	r0, #50	; 0x32
 800162a:	f000 fafb 	bl	8001c24 <setTimer>
		break;
 800162e:	e029      	b.n	8001684 <scanLed+0x17c>
		offPed();
 8001630:	f7ff feda 	bl	80013e8 <offPed>
		state_buzzer =OFF;//buzzer
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <scanLed+0x194>)
 8001636:	2202      	movs	r2, #2
 8001638:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <scanLed+0x190>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d122      	bne.n	8001688 <scanLed+0x180>
			onYellow_Toggle();
 8001642:	f7ff ff45 	bl	80014d0 <onYellow_Toggle>
			setTimer(50,3);
 8001646:	2103      	movs	r1, #3
 8001648:	2032      	movs	r0, #50	; 0x32
 800164a:	f000 faeb 	bl	8001c24 <setTimer>
		break;
 800164e:	e01b      	b.n	8001688 <scanLed+0x180>
		offPed();
 8001650:	f7ff feca 	bl	80013e8 <offPed>
		state_buzzer =OFF; //buzzer
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <scanLed+0x194>)
 8001656:	2202      	movs	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <scanLed+0x190>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d114      	bne.n	800168c <scanLed+0x184>
			onGreen_Toggle();
 8001662:	f7ff ff19 	bl	8001498 <onGreen_Toggle>
			setTimer(50,3);
 8001666:	2103      	movs	r1, #3
 8001668:	2032      	movs	r0, #50	; 0x32
 800166a:	f000 fadb 	bl	8001c24 <setTimer>
		break;
 800166e:	e00d      	b.n	800168c <scanLed+0x184>
	default: break;
 8001670:	bf00      	nop
 8001672:	e00c      	b.n	800168e <scanLed+0x186>
		break;
 8001674:	bf00      	nop
 8001676:	e00a      	b.n	800168e <scanLed+0x186>
		break;
 8001678:	bf00      	nop
 800167a:	e008      	b.n	800168e <scanLed+0x186>
		break;
 800167c:	bf00      	nop
 800167e:	e006      	b.n	800168e <scanLed+0x186>
		break;
 8001680:	bf00      	nop
 8001682:	e004      	b.n	800168e <scanLed+0x186>
		break;
 8001684:	bf00      	nop
 8001686:	e002      	b.n	800168e <scanLed+0x186>
		break;
 8001688:	bf00      	nop
 800168a:	e000      	b.n	800168e <scanLed+0x186>
		break;
 800168c:	bf00      	nop
	}
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000048 	.word	0x20000048
 8001698:	20000058 	.word	0x20000058
 800169c:	20000044 	.word	0x20000044

080016a0 <SCH_Update>:
    for (i = 0; i < SCH_MAX_TASKS; i++) {
        SCH_Delete_Task(i);
    }
}

void SCH_Update(void){
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
	//CHECK ALL TASK 'S DELAY TIME. IF RUN OUT, RUN THAT TASK
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <SCH_Update+0x3c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <SCH_Update+0x34>
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <SCH_Update+0x3c>)
 80016ae:	7b1b      	ldrb	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d10f      	bne.n	80016d4 <SCH_Update+0x34>
		if(SCH_tasks_G[0].Delay > 0){
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <SCH_Update+0x3c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <SCH_Update+0x26>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <SCH_Update+0x3c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	4a06      	ldr	r2, [pc, #24]	; (80016dc <SCH_Update+0x3c>)
 80016c4:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 80016c6:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SCH_Update+0x3c>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <SCH_Update+0x34>
			SCH_tasks_G[0].RunMe = 1;
 80016ce:	4b03      	ldr	r3, [pc, #12]	; (80016dc <SCH_Update+0x3c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000130 	.word	0x20000130

080016e0 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
 80016fc:	e147      	b.n	800198e <SCH_Add_Task+0x2ae>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 80016fe:	7ffa      	ldrb	r2, [r7, #31]
 8001700:	49ab      	ldr	r1, [pc, #684]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	3304      	adds	r3, #4
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4413      	add	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	f240 80d5 	bls.w	80018ca <SCH_Add_Task+0x1ea>
			//ADD NEW TASK BEFORE THE CURRENT TASK
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8001720:	7ffa      	ldrb	r2, [r7, #31]
 8001722:	49a3      	ldr	r1, [pc, #652]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3304      	adds	r3, #4
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 800173c:	7ffa      	ldrb	r2, [r7, #31]
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	1ac9      	subs	r1, r1, r3
 8001744:	489a      	ldr	r0, [pc, #616]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4403      	add	r3, r0
 8001750:	3304      	adds	r3, #4
 8001752:	6019      	str	r1, [r3, #0]
				// shift the tasks in the Array
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001754:	2309      	movs	r3, #9
 8001756:	75fb      	strb	r3, [r7, #23]
 8001758:	e060      	b.n	800181c <SCH_Add_Task+0x13c>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	1e59      	subs	r1, r3, #1
 800175e:	7dfa      	ldrb	r2, [r7, #23]
 8001760:	4893      	ldr	r0, [pc, #588]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001762:	460b      	mov	r3, r1
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4403      	add	r3, r0
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	4890      	ldr	r0, [pc, #576]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4403      	add	r3, r0
 800177a:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	1e59      	subs	r1, r3, #1
 8001780:	7dfa      	ldrb	r2, [r7, #23]
 8001782:	488b      	ldr	r0, [pc, #556]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001784:	460b      	mov	r3, r1
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4403      	add	r3, r0
 800178e:	3308      	adds	r3, #8
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	4887      	ldr	r0, [pc, #540]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4403      	add	r3, r0
 800179e:	3308      	adds	r3, #8
 80017a0:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	1e59      	subs	r1, r3, #1
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	4881      	ldr	r0, [pc, #516]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80017aa:	460b      	mov	r3, r1
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4403      	add	r3, r0
 80017b4:	3304      	adds	r3, #4
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	487d      	ldr	r0, [pc, #500]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4403      	add	r3, r0
 80017c4:	3304      	adds	r3, #4
 80017c6:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	1e59      	subs	r1, r3, #1
 80017cc:	7dfa      	ldrb	r2, [r7, #23]
 80017ce:	4878      	ldr	r0, [pc, #480]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80017d0:	460b      	mov	r3, r1
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4403      	add	r3, r0
 80017da:	330c      	adds	r3, #12
 80017dc:	7818      	ldrb	r0, [r3, #0]
 80017de:	4974      	ldr	r1, [pc, #464]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	330c      	adds	r3, #12
 80017ec:	4602      	mov	r2, r0
 80017ee:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	1e59      	subs	r1, r3, #1
 80017f4:	7dfa      	ldrb	r2, [r7, #23]
 80017f6:	486e      	ldr	r0, [pc, #440]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4403      	add	r3, r0
 8001802:	3310      	adds	r3, #16
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	486a      	ldr	r0, [pc, #424]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001808:	4613      	mov	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4403      	add	r3, r0
 8001812:	3310      	adds	r3, #16
 8001814:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	3b01      	subs	r3, #1
 800181a:	75fb      	strb	r3, [r7, #23]
 800181c:	7dfa      	ldrb	r2, [r7, #23]
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	429a      	cmp	r2, r3
 8001822:	d89a      	bhi.n	800175a <SCH_Add_Task+0x7a>
				}
			}
			// insert the new task
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001824:	7ffa      	ldrb	r2, [r7, #31]
 8001826:	4962      	ldr	r1, [pc, #392]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8001836:	7ffa      	ldrb	r2, [r7, #31]
 8001838:	495d      	ldr	r1, [pc, #372]	; (80019b0 <SCH_Add_Task+0x2d0>)
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3304      	adds	r3, #4
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800184a:	7ffa      	ldrb	r2, [r7, #31]
 800184c:	4958      	ldr	r1, [pc, #352]	; (80019b0 <SCH_Add_Task+0x2d0>)
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3308      	adds	r3, #8
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 800185e:	7ffa      	ldrb	r2, [r7, #31]
 8001860:	4953      	ldr	r1, [pc, #332]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3304      	adds	r3, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <SCH_Add_Task+0x1aa>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001874:	7ffa      	ldrb	r2, [r7, #31]
 8001876:	494e      	ldr	r1, [pc, #312]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	330c      	adds	r3, #12
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	e009      	b.n	800189e <SCH_Add_Task+0x1be>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 800188a:	7ffa      	ldrb	r2, [r7, #31]
 800188c:	4948      	ldr	r1, [pc, #288]	; (80019b0 <SCH_Add_Task+0x2d0>)
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	330c      	adds	r3, #12
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800189e:	7ffc      	ldrb	r4, [r7, #31]
 80018a0:	f000 f9a8 	bl	8001bf4 <Get_New_Task_ID>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4942      	ldr	r1, [pc, #264]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80018a8:	4623      	mov	r3, r4
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4423      	add	r3, r4
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3310      	adds	r3, #16
 80018b4:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 80018b6:	7ffa      	ldrb	r2, [r7, #31]
 80018b8:	493d      	ldr	r1, [pc, #244]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3310      	adds	r3, #16
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e06e      	b.n	80019a8 <SCH_Add_Task+0x2c8>
		} else {
			// One an empty slot is found, the new task is added there with the remaning delay
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 80018ca:	7ffa      	ldrb	r2, [r7, #31]
 80018cc:	4938      	ldr	r1, [pc, #224]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d154      	bne.n	8001988 <SCH_Add_Task+0x2a8>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80018de:	7ffa      	ldrb	r2, [r7, #31]
 80018e0:	4933      	ldr	r1, [pc, #204]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 80018f0:	7ffa      	ldrb	r2, [r7, #31]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ac9      	subs	r1, r1, r3
 80018f8:	482d      	ldr	r0, [pc, #180]	; (80019b0 <SCH_Add_Task+0x2d0>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4403      	add	r3, r0
 8001904:	3304      	adds	r3, #4
 8001906:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001908:	7ffa      	ldrb	r2, [r7, #31]
 800190a:	4929      	ldr	r1, [pc, #164]	; (80019b0 <SCH_Add_Task+0x2d0>)
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3308      	adds	r3, #8
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 800191c:	7ffa      	ldrb	r2, [r7, #31]
 800191e:	4924      	ldr	r1, [pc, #144]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3304      	adds	r3, #4
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10a      	bne.n	8001948 <SCH_Add_Task+0x268>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001932:	7ffa      	ldrb	r2, [r7, #31]
 8001934:	491e      	ldr	r1, [pc, #120]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	330c      	adds	r3, #12
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e009      	b.n	800195c <SCH_Add_Task+0x27c>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001948:	7ffa      	ldrb	r2, [r7, #31]
 800194a:	4919      	ldr	r1, [pc, #100]	; (80019b0 <SCH_Add_Task+0x2d0>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	330c      	adds	r3, #12
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 800195c:	7ffc      	ldrb	r4, [r7, #31]
 800195e:	f000 f949 	bl	8001bf4 <Get_New_Task_ID>
 8001962:	4602      	mov	r2, r0
 8001964:	4912      	ldr	r1, [pc, #72]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001966:	4623      	mov	r3, r4
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4423      	add	r3, r4
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3310      	adds	r3, #16
 8001972:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8001974:	7ffa      	ldrb	r2, [r7, #31]
 8001976:	490e      	ldr	r1, [pc, #56]	; (80019b0 <SCH_Add_Task+0x2d0>)
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3310      	adds	r3, #16
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	e00f      	b.n	80019a8 <SCH_Add_Task+0x2c8>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8001988:	7ffb      	ldrb	r3, [r7, #31]
 800198a:	3301      	adds	r3, #1
 800198c:	77fb      	strb	r3, [r7, #31]
 800198e:	7ffb      	ldrb	r3, [r7, #31]
 8001990:	2b09      	cmp	r3, #9
 8001992:	f67f aeb4 	bls.w	80016fe <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8001996:	7ffa      	ldrb	r2, [r7, #31]
 8001998:	4905      	ldr	r1, [pc, #20]	; (80019b0 <SCH_Add_Task+0x2d0>)
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3310      	adds	r3, #16
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3724      	adds	r7, #36	; 0x24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	20000130 	.word	0x20000130

080019b4 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80e2 	beq.w	8001b8c <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	e0da      	b.n	8001b84 <SCH_Delete_Task+0x1d0>
			// Searching task for delete
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 80019ce:	7bfa      	ldrb	r2, [r7, #15]
 80019d0:	4971      	ldr	r1, [pc, #452]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	3310      	adds	r3, #16
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	f040 80cb 	bne.w	8001b7e <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 80019e8:	2301      	movs	r3, #1
 80019ea:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d02b      	beq.n	8001a4a <SCH_Delete_Task+0x96>
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d828      	bhi.n	8001a4a <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	4966      	ldr	r1, [pc, #408]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01d      	beq.n	8001a4a <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	4961      	ldr	r1, [pc, #388]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3304      	adds	r3, #4
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	485c      	ldr	r0, [pc, #368]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4403      	add	r3, r0
 8001a30:	3304      	adds	r3, #4
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	3201      	adds	r2, #1
 8001a38:	4419      	add	r1, r3
 8001a3a:	4857      	ldr	r0, [pc, #348]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4403      	add	r3, r0
 8001a46:	3304      	adds	r3, #4
 8001a48:	6019      	str	r1, [r3, #0]
					}
				}
				// after delete the task, shift the array
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	73bb      	strb	r3, [r7, #14]
 8001a4e:	e060      	b.n	8001b12 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8001a50:	7bbb      	ldrb	r3, [r7, #14]
 8001a52:	1c59      	adds	r1, r3, #1
 8001a54:	7bba      	ldrb	r2, [r7, #14]
 8001a56:	4850      	ldr	r0, [pc, #320]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4403      	add	r3, r0
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	484c      	ldr	r0, [pc, #304]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4403      	add	r3, r0
 8001a70:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	1c59      	adds	r1, r3, #1
 8001a76:	7bba      	ldrb	r2, [r7, #14]
 8001a78:	4847      	ldr	r0, [pc, #284]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4403      	add	r3, r0
 8001a84:	3308      	adds	r3, #8
 8001a86:	6819      	ldr	r1, [r3, #0]
 8001a88:	4843      	ldr	r0, [pc, #268]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4403      	add	r3, r0
 8001a94:	3308      	adds	r3, #8
 8001a96:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8001a98:	7bbb      	ldrb	r3, [r7, #14]
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	7bba      	ldrb	r2, [r7, #14]
 8001a9e:	483e      	ldr	r0, [pc, #248]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4403      	add	r3, r0
 8001aaa:	3304      	adds	r3, #4
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	483a      	ldr	r0, [pc, #232]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4403      	add	r3, r0
 8001aba:	3304      	adds	r3, #4
 8001abc:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8001abe:	7bbb      	ldrb	r3, [r7, #14]
 8001ac0:	1c59      	adds	r1, r3, #1
 8001ac2:	7bba      	ldrb	r2, [r7, #14]
 8001ac4:	4834      	ldr	r0, [pc, #208]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4403      	add	r3, r0
 8001ad0:	330c      	adds	r3, #12
 8001ad2:	7818      	ldrb	r0, [r3, #0]
 8001ad4:	4930      	ldr	r1, [pc, #192]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8001ae6:	7bbb      	ldrb	r3, [r7, #14]
 8001ae8:	1c59      	adds	r1, r3, #1
 8001aea:	7bba      	ldrb	r2, [r7, #14]
 8001aec:	482a      	ldr	r0, [pc, #168]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001aee:	460b      	mov	r3, r1
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4403      	add	r3, r0
 8001af8:	3310      	adds	r3, #16
 8001afa:	6819      	ldr	r1, [r3, #0]
 8001afc:	4826      	ldr	r0, [pc, #152]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4403      	add	r3, r0
 8001b08:	3310      	adds	r3, #16
 8001b0a:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001b0c:	7bbb      	ldrb	r3, [r7, #14]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	73bb      	strb	r3, [r7, #14]
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d99b      	bls.n	8001a50 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8001b18:	7bba      	ldrb	r2, [r7, #14]
 8001b1a:	491f      	ldr	r1, [pc, #124]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 8001b2a:	7bba      	ldrb	r2, [r7, #14]
 8001b2c:	491a      	ldr	r1, [pc, #104]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	3308      	adds	r3, #8
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8001b3e:	7bba      	ldrb	r2, [r7, #14]
 8001b40:	4915      	ldr	r1, [pc, #84]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001b52:	7bba      	ldrb	r2, [r7, #14]
 8001b54:	4910      	ldr	r1, [pc, #64]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	330c      	adds	r3, #12
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8001b66:	7bba      	ldrb	r2, [r7, #14]
 8001b68:	490b      	ldr	r1, [pc, #44]	; (8001b98 <SCH_Delete_Task+0x1e4>)
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	3310      	adds	r3, #16
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
				return Return_code;
 8001b7a:	7b7b      	ldrb	r3, [r7, #13]
 8001b7c:	e007      	b.n	8001b8e <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	3301      	adds	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	f67f af21 	bls.w	80019ce <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000130 	.word	0x20000130

08001b9c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001b9c:	b5b0      	push	{r4, r5, r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
	// CHECK IF THE TASK READY TO RUN. AFTER FINISHED RUNNING, DELETE THAT TASK AND ADD IT AGAIN
	if(SCH_tasks_G[0].RunMe > 0) {
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <SCH_Dispatch_Tasks+0x54>)
 8001ba4:	7b1b      	ldrb	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <SCH_Dispatch_Tasks+0x54>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <SCH_Dispatch_Tasks+0x54>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <SCH_Dispatch_Tasks+0x54>)
 8001bb8:	1d3c      	adds	r4, r7, #4
 8001bba:	461d      	mov	r5, r3
 8001bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fef4 	bl	80019b4 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fd81 	bl	80016e0 <SCH_Add_Task>
		}
	}
	// Enter low-power mode (Sleep mode). The MCU will wake up on the next interrupt
	    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001bde:	2101      	movs	r1, #1
 8001be0:	2000      	movs	r0, #0
 8001be2:	f000 ffdb 	bl	8002b9c <HAL_PWR_EnterSLEEPMode>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdb0      	pop	{r4, r5, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000130 	.word	0x20000130

08001bf4 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	newTaskID++;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Get_New_Task_ID+0x2c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <Get_New_Task_ID+0x2c>)
 8001c00:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <Get_New_Task_ID+0x2c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d104      	bne.n	8001c14 <Get_New_Task_ID+0x20>
		newTaskID++;
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <Get_New_Task_ID+0x2c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <Get_New_Task_ID+0x2c>)
 8001c12:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <Get_New_Task_ID+0x2c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	200001f8 	.word	0x200001f8

08001c24 <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8001c2e:	4907      	ldr	r1, [pc, #28]	; (8001c4c <setTimer+0x28>)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 8001c38:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <setTimer+0x2c>)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	200001fc 	.word	0x200001fc
 8001c50:	20000058 	.word	0x20000058

08001c54 <timerRun>:

void timerRun(){
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	e01c      	b.n	8001c9a <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001c60:	4a12      	ldr	r2, [pc, #72]	; (8001cac <timerRun+0x58>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	dd13      	ble.n	8001c94 <timerRun+0x40>
			timer_counter[i]--;
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <timerRun+0x58>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	1e5a      	subs	r2, r3, #1
 8001c76:	490d      	ldr	r1, [pc, #52]	; (8001cac <timerRun+0x58>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <timerRun+0x58>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d104      	bne.n	8001c94 <timerRun+0x40>
				timer_flag [i] = 1;
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <timerRun+0x5c>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2101      	movs	r1, #1
 8001c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3301      	adds	r3, #1
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	dddf      	ble.n	8001c60 <timerRun+0xc>
			}
		}
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	200001fc 	.word	0x200001fc
 8001cb0:	20000058 	.word	0x20000058

08001cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6193      	str	r3, [r2, #24]
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_MspInit+0x5c>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_MspInit+0x5c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_MspInit+0x60>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <HAL_MspInit+0x60>)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000

08001d18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d114      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_TIM_Base_MspInit+0x78>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a18      	ldr	r2, [pc, #96]	; (8001d90 <HAL_TIM_Base_MspInit+0x78>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	61d3      	str	r3, [r2, #28]
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_TIM_Base_MspInit+0x78>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201c      	movs	r0, #28
 8001d48:	f000 fc73 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d4c:	201c      	movs	r0, #28
 8001d4e:	f000 fc8c 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d52:	e018      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_TIM_Base_MspInit+0x7c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0x78>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_TIM_Base_MspInit+0x78>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_TIM_Base_MspInit+0x78>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	201d      	movs	r0, #29
 8001d7c:	f000 fc59 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d80:	201d      	movs	r0, #29
 8001d82:	f000 fc72 	bl	800266a <HAL_NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40000400 	.word	0x40000400

08001d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_TIM_MspPostInit+0x58>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d117      	bne.n	8001de8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_TIM_MspPostInit+0x5c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_TIM_MspPostInit+0x5c>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_TIM_MspPostInit+0x5c>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001dd0:	2340      	movs	r3, #64	; 0x40
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <HAL_TIM_MspPostInit+0x60>)
 8001de4:	f000 fd0e 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40000400 	.word	0x40000400
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010800 	.word	0x40010800

08001dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_UART_MspInit+0x98>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d137      	bne.n	8001e8c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <HAL_UART_MspInit+0x9c>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_UART_MspInit+0x9c>)
 8001e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e26:	61d3      	str	r3, [r2, #28]
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_UART_MspInit+0x9c>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_UART_MspInit+0x9c>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_UART_MspInit+0x9c>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_UART_MspInit+0x9c>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <HAL_UART_MspInit+0xa0>)
 8001e60:	f000 fcd0 	bl	8002804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e64:	2308      	movs	r3, #8
 8001e66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	4619      	mov	r1, r3
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <HAL_UART_MspInit+0xa0>)
 8001e78:	f000 fcc4 	bl	8002804 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2026      	movs	r0, #38	; 0x26
 8001e82:	f000 fbd6 	bl	8002632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e86:	2026      	movs	r0, #38	; 0x26
 8001e88:	f000 fbef 	bl	800266a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40004400 	.word	0x40004400
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <HardFault_Handler+0x4>

08001eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <MemManage_Handler+0x4>

08001eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee6:	f000 fab1 	bl	800244c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM2_IRQHandler+0x10>)
 8001ef6:	f001 fc17 	bl	8003728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200002a8 	.word	0x200002a8

08001f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <TIM3_IRQHandler+0x10>)
 8001f0a:	f001 fc0d 	bl	8003728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000260 	.word	0x20000260

08001f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USART2_IRQHandler+0x10>)
 8001f1e:	f002 faa1 	bl	8004464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200002f0 	.word	0x200002f0

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f002 ffc8 	bl	8004ef0 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20005000 	.word	0x20005000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	20000224 	.word	0x20000224
 8001f94:	20000380 	.word	0x20000380

08001f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <print_statement>:
int yellow_time_tmp_change =0;
int state_uart =0;
void test_print(){
	HAL_UART_Transmit (&huart2 , (uint8_t *) tx_buffer, strlen( tx_buffer), 20);
}
void print_statement(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	switch (status){
 8001fa8:	4b8c      	ldr	r3, [pc, #560]	; (80021dc <print_statement+0x238>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b17      	cmp	r3, #23
 8001fae:	dc21      	bgt.n	8001ff4 <print_statement+0x50>
 8001fb0:	2b14      	cmp	r3, #20
 8001fb2:	da0f      	bge.n	8001fd4 <print_statement+0x30>
				strr[strlen(strr)] = '\0';  // Add null terminator
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
				green_time_tmp_change = green_time_tmp;
			}
			break;
		default: break;
 8001fb4:	e1b4      	b.n	8002320 <print_statement+0x37c>
 8001fb6:	3b5b      	subs	r3, #91	; 0x5b
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	f200 81b1 	bhi.w	8002320 <print_statement+0x37c>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <print_statement+0x20>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08002001 	.word	0x08002001
 8001fc8:	08002049 	.word	0x08002049
 8001fcc:	08002091 	.word	0x08002091
 8001fd0:	080020d9 	.word	0x080020d9
 8001fd4:	3b14      	subs	r3, #20
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	f200 81a2 	bhi.w	8002320 <print_statement+0x37c>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <print_statement+0x40>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	0800215d 	.word	0x0800215d
 8001fe8:	08002225 	.word	0x08002225
 8001fec:	080022a3 	.word	0x080022a3
 8001ff0:	08002121 	.word	0x08002121
	switch (status){
 8001ff4:	2b5e      	cmp	r3, #94	; 0x5e
 8001ff6:	f300 8193 	bgt.w	8002320 <print_statement+0x37c>
 8001ffa:	2b5b      	cmp	r3, #91	; 0x5b
 8001ffc:	dadb      	bge.n	8001fb6 <print_statement+0x12>
		default: break;
 8001ffe:	e18f      	b.n	8002320 <print_statement+0x37c>
			if(red_time_change != red_time_cd){
 8002000:	4b77      	ldr	r3, [pc, #476]	; (80021e0 <print_statement+0x23c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4b77      	ldr	r3, [pc, #476]	; (80021e4 <print_statement+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	f000 818b 	beq.w	8002324 <print_statement+0x380>
				sprintf( strr , "\r\n!RED_AUTO=%u#\r\n", red_time_cd );
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <print_statement+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4974      	ldr	r1, [pc, #464]	; (80021e8 <print_statement+0x244>)
 8002016:	4875      	ldr	r0, [pc, #468]	; (80021ec <print_statement+0x248>)
 8002018:	f002 ff9c 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 800201c:	4873      	ldr	r0, [pc, #460]	; (80021ec <print_statement+0x248>)
 800201e:	f7fe f895 	bl	800014c <strlen>
 8002022:	4603      	mov	r3, r0
 8002024:	4a71      	ldr	r2, [pc, #452]	; (80021ec <print_statement+0x248>)
 8002026:	2100      	movs	r1, #0
 8002028:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 800202a:	4870      	ldr	r0, [pc, #448]	; (80021ec <print_statement+0x248>)
 800202c:	f7fe f88e 	bl	800014c <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	b29a      	uxth	r2, r3
 8002034:	2314      	movs	r3, #20
 8002036:	496d      	ldr	r1, [pc, #436]	; (80021ec <print_statement+0x248>)
 8002038:	486d      	ldr	r0, [pc, #436]	; (80021f0 <print_statement+0x24c>)
 800203a:	f002 f98f 	bl	800435c <HAL_UART_Transmit>
				red_time_change = red_time_cd;
 800203e:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <print_statement+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <print_statement+0x23c>)
 8002044:	6013      	str	r3, [r2, #0]
			break;
 8002046:	e16d      	b.n	8002324 <print_statement+0x380>
			if(red_time_change != red_time_cd){
 8002048:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <print_statement+0x23c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <print_statement+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	f000 8169 	beq.w	8002328 <print_statement+0x384>
				sprintf( strr , "\r\n!RED_AUTO=%u#\r\n", red_time_cd );
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <print_statement+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4962      	ldr	r1, [pc, #392]	; (80021e8 <print_statement+0x244>)
 800205e:	4863      	ldr	r0, [pc, #396]	; (80021ec <print_statement+0x248>)
 8002060:	f002 ff78 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 8002064:	4861      	ldr	r0, [pc, #388]	; (80021ec <print_statement+0x248>)
 8002066:	f7fe f871 	bl	800014c <strlen>
 800206a:	4603      	mov	r3, r0
 800206c:	4a5f      	ldr	r2, [pc, #380]	; (80021ec <print_statement+0x248>)
 800206e:	2100      	movs	r1, #0
 8002070:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8002072:	485e      	ldr	r0, [pc, #376]	; (80021ec <print_statement+0x248>)
 8002074:	f7fe f86a 	bl	800014c <strlen>
 8002078:	4603      	mov	r3, r0
 800207a:	b29a      	uxth	r2, r3
 800207c:	2314      	movs	r3, #20
 800207e:	495b      	ldr	r1, [pc, #364]	; (80021ec <print_statement+0x248>)
 8002080:	485b      	ldr	r0, [pc, #364]	; (80021f0 <print_statement+0x24c>)
 8002082:	f002 f96b 	bl	800435c <HAL_UART_Transmit>
				red_time_change = red_time_cd;
 8002086:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <print_statement+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <print_statement+0x23c>)
 800208c:	6013      	str	r3, [r2, #0]
			break;
 800208e:	e14b      	b.n	8002328 <print_statement+0x384>
			if(green_time_change != green_time_cd){
 8002090:	4b58      	ldr	r3, [pc, #352]	; (80021f4 <print_statement+0x250>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <print_statement+0x254>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	f000 8147 	beq.w	800232c <print_statement+0x388>
				sprintf( strr , "\r\n!GREEN_AUTO=%u#\r\n", green_time_cd );
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <print_statement+0x254>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4955      	ldr	r1, [pc, #340]	; (80021fc <print_statement+0x258>)
 80020a6:	4851      	ldr	r0, [pc, #324]	; (80021ec <print_statement+0x248>)
 80020a8:	f002 ff54 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 80020ac:	484f      	ldr	r0, [pc, #316]	; (80021ec <print_statement+0x248>)
 80020ae:	f7fe f84d 	bl	800014c <strlen>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a4d      	ldr	r2, [pc, #308]	; (80021ec <print_statement+0x248>)
 80020b6:	2100      	movs	r1, #0
 80020b8:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 80020ba:	484c      	ldr	r0, [pc, #304]	; (80021ec <print_statement+0x248>)
 80020bc:	f7fe f846 	bl	800014c <strlen>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2314      	movs	r3, #20
 80020c6:	4949      	ldr	r1, [pc, #292]	; (80021ec <print_statement+0x248>)
 80020c8:	4849      	ldr	r0, [pc, #292]	; (80021f0 <print_statement+0x24c>)
 80020ca:	f002 f947 	bl	800435c <HAL_UART_Transmit>
				green_time_change = green_time_cd;
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <print_statement+0x254>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <print_statement+0x250>)
 80020d4:	6013      	str	r3, [r2, #0]
			break;
 80020d6:	e129      	b.n	800232c <print_statement+0x388>
			if(yellow_time_change != yellow_time_cd){
 80020d8:	4b49      	ldr	r3, [pc, #292]	; (8002200 <print_statement+0x25c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <print_statement+0x260>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	f000 8125 	beq.w	8002330 <print_statement+0x38c>
				sprintf( strr , "\r\n!YELLOW_AUTO=%u#\r\n", yellow_time_cd);
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <print_statement+0x260>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4946      	ldr	r1, [pc, #280]	; (8002208 <print_statement+0x264>)
 80020ee:	483f      	ldr	r0, [pc, #252]	; (80021ec <print_statement+0x248>)
 80020f0:	f002 ff30 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 80020f4:	483d      	ldr	r0, [pc, #244]	; (80021ec <print_statement+0x248>)
 80020f6:	f7fe f829 	bl	800014c <strlen>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4a3b      	ldr	r2, [pc, #236]	; (80021ec <print_statement+0x248>)
 80020fe:	2100      	movs	r1, #0
 8002100:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8002102:	483a      	ldr	r0, [pc, #232]	; (80021ec <print_statement+0x248>)
 8002104:	f7fe f822 	bl	800014c <strlen>
 8002108:	4603      	mov	r3, r0
 800210a:	b29a      	uxth	r2, r3
 800210c:	2314      	movs	r3, #20
 800210e:	4937      	ldr	r1, [pc, #220]	; (80021ec <print_statement+0x248>)
 8002110:	4837      	ldr	r0, [pc, #220]	; (80021f0 <print_statement+0x24c>)
 8002112:	f002 f923 	bl	800435c <HAL_UART_Transmit>
				yellow_time_change = yellow_time_cd;
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <print_statement+0x260>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a39      	ldr	r2, [pc, #228]	; (8002200 <print_statement+0x25c>)
 800211c:	6013      	str	r3, [r2, #0]
			break;
 800211e:	e107      	b.n	8002330 <print_statement+0x38c>
			if(state_uart != MANUAL_INIT){
 8002120:	4b3a      	ldr	r3, [pc, #232]	; (800220c <print_statement+0x268>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b17      	cmp	r3, #23
 8002126:	f000 8105 	beq.w	8002334 <print_statement+0x390>
				sprintf( strr , "\r\n!MANUAL_INIT_MODE\r\n");
 800212a:	4939      	ldr	r1, [pc, #228]	; (8002210 <print_statement+0x26c>)
 800212c:	482f      	ldr	r0, [pc, #188]	; (80021ec <print_statement+0x248>)
 800212e:	f002 ff11 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 8002132:	482e      	ldr	r0, [pc, #184]	; (80021ec <print_statement+0x248>)
 8002134:	f7fe f80a 	bl	800014c <strlen>
 8002138:	4603      	mov	r3, r0
 800213a:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <print_statement+0x248>)
 800213c:	2100      	movs	r1, #0
 800213e:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8002140:	482a      	ldr	r0, [pc, #168]	; (80021ec <print_statement+0x248>)
 8002142:	f7fe f803 	bl	800014c <strlen>
 8002146:	4603      	mov	r3, r0
 8002148:	b29a      	uxth	r2, r3
 800214a:	2314      	movs	r3, #20
 800214c:	4927      	ldr	r1, [pc, #156]	; (80021ec <print_statement+0x248>)
 800214e:	4828      	ldr	r0, [pc, #160]	; (80021f0 <print_statement+0x24c>)
 8002150:	f002 f904 	bl	800435c <HAL_UART_Transmit>
				state_uart = MANUAL_INIT;
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <print_statement+0x268>)
 8002156:	2217      	movs	r2, #23
 8002158:	601a      	str	r2, [r3, #0]
			break;
 800215a:	e0eb      	b.n	8002334 <print_statement+0x390>
			if(state_uart != MANUAL_RED){
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <print_statement+0x268>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b14      	cmp	r3, #20
 8002162:	d017      	beq.n	8002194 <print_statement+0x1f0>
				sprintf( strr , "\r\n!MANUAL_RED_MODE\r\n");
 8002164:	492b      	ldr	r1, [pc, #172]	; (8002214 <print_statement+0x270>)
 8002166:	4821      	ldr	r0, [pc, #132]	; (80021ec <print_statement+0x248>)
 8002168:	f002 fef4 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 800216c:	481f      	ldr	r0, [pc, #124]	; (80021ec <print_statement+0x248>)
 800216e:	f7fd ffed 	bl	800014c <strlen>
 8002172:	4603      	mov	r3, r0
 8002174:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <print_statement+0x248>)
 8002176:	2100      	movs	r1, #0
 8002178:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 800217a:	481c      	ldr	r0, [pc, #112]	; (80021ec <print_statement+0x248>)
 800217c:	f7fd ffe6 	bl	800014c <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	b29a      	uxth	r2, r3
 8002184:	2314      	movs	r3, #20
 8002186:	4919      	ldr	r1, [pc, #100]	; (80021ec <print_statement+0x248>)
 8002188:	4819      	ldr	r0, [pc, #100]	; (80021f0 <print_statement+0x24c>)
 800218a:	f002 f8e7 	bl	800435c <HAL_UART_Transmit>
				state_uart = MANUAL_RED;
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <print_statement+0x268>)
 8002190:	2214      	movs	r2, #20
 8002192:	601a      	str	r2, [r3, #0]
			if(red_time_tmp_change != red_time_tmp){
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <print_statement+0x274>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <print_statement+0x278>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	f000 80cb 	beq.w	8002338 <print_statement+0x394>
				sprintf( strr , "\r\n!MANUAL_RED_ADJUST=%u#\r\n", red_time_tmp);
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <print_statement+0x278>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	491d      	ldr	r1, [pc, #116]	; (8002220 <print_statement+0x27c>)
 80021aa:	4810      	ldr	r0, [pc, #64]	; (80021ec <print_statement+0x248>)
 80021ac:	f002 fed2 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 80021b0:	480e      	ldr	r0, [pc, #56]	; (80021ec <print_statement+0x248>)
 80021b2:	f7fd ffcb 	bl	800014c <strlen>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <print_statement+0x248>)
 80021ba:	2100      	movs	r1, #0
 80021bc:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 80021be:	480b      	ldr	r0, [pc, #44]	; (80021ec <print_statement+0x248>)
 80021c0:	f7fd ffc4 	bl	800014c <strlen>
 80021c4:	4603      	mov	r3, r0
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2314      	movs	r3, #20
 80021ca:	4908      	ldr	r1, [pc, #32]	; (80021ec <print_statement+0x248>)
 80021cc:	4808      	ldr	r0, [pc, #32]	; (80021f0 <print_statement+0x24c>)
 80021ce:	f002 f8c5 	bl	800435c <HAL_UART_Transmit>
				red_time_tmp_change = red_time_tmp;
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <print_statement+0x278>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <print_statement+0x274>)
 80021d8:	6013      	str	r3, [r2, #0]
			break;
 80021da:	e0ad      	b.n	8002338 <print_statement+0x394>
 80021dc:	20000048 	.word	0x20000048
 80021e0:	20000228 	.word	0x20000228
 80021e4:	20000120 	.word	0x20000120
 80021e8:	080057e0 	.word	0x080057e0
 80021ec:	20000338 	.word	0x20000338
 80021f0:	200002f0 	.word	0x200002f0
 80021f4:	2000022c 	.word	0x2000022c
 80021f8:	20000128 	.word	0x20000128
 80021fc:	080057f4 	.word	0x080057f4
 8002200:	20000230 	.word	0x20000230
 8002204:	20000124 	.word	0x20000124
 8002208:	08005808 	.word	0x08005808
 800220c:	20000240 	.word	0x20000240
 8002210:	08005820 	.word	0x08005820
 8002214:	08005838 	.word	0x08005838
 8002218:	20000234 	.word	0x20000234
 800221c:	2000025c 	.word	0x2000025c
 8002220:	08005850 	.word	0x08005850
			if(state_uart != MANUAL_YELLOW){
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <print_statement+0x3a4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b15      	cmp	r3, #21
 800222a:	d017      	beq.n	800225c <print_statement+0x2b8>
				sprintf( strr , "\r\n!MANUAL_YELLOW_MODE\r\n");
 800222c:	4947      	ldr	r1, [pc, #284]	; (800234c <print_statement+0x3a8>)
 800222e:	4848      	ldr	r0, [pc, #288]	; (8002350 <print_statement+0x3ac>)
 8002230:	f002 fe90 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 8002234:	4846      	ldr	r0, [pc, #280]	; (8002350 <print_statement+0x3ac>)
 8002236:	f7fd ff89 	bl	800014c <strlen>
 800223a:	4603      	mov	r3, r0
 800223c:	4a44      	ldr	r2, [pc, #272]	; (8002350 <print_statement+0x3ac>)
 800223e:	2100      	movs	r1, #0
 8002240:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8002242:	4843      	ldr	r0, [pc, #268]	; (8002350 <print_statement+0x3ac>)
 8002244:	f7fd ff82 	bl	800014c <strlen>
 8002248:	4603      	mov	r3, r0
 800224a:	b29a      	uxth	r2, r3
 800224c:	2314      	movs	r3, #20
 800224e:	4940      	ldr	r1, [pc, #256]	; (8002350 <print_statement+0x3ac>)
 8002250:	4840      	ldr	r0, [pc, #256]	; (8002354 <print_statement+0x3b0>)
 8002252:	f002 f883 	bl	800435c <HAL_UART_Transmit>
				state_uart = MANUAL_YELLOW;
 8002256:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <print_statement+0x3a4>)
 8002258:	2215      	movs	r2, #21
 800225a:	601a      	str	r2, [r3, #0]
			if(yellow_time_tmp_change != yellow_time_tmp){
 800225c:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <print_statement+0x3b4>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b3e      	ldr	r3, [pc, #248]	; (800235c <print_statement+0x3b8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d069      	beq.n	800233c <print_statement+0x398>
				sprintf( strr , "\r\n!MANUAL_YELLOW_ADJUST=%u#\r\n", yellow_time_tmp);
 8002268:	4b3c      	ldr	r3, [pc, #240]	; (800235c <print_statement+0x3b8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	493c      	ldr	r1, [pc, #240]	; (8002360 <print_statement+0x3bc>)
 8002270:	4837      	ldr	r0, [pc, #220]	; (8002350 <print_statement+0x3ac>)
 8002272:	f002 fe6f 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 8002276:	4836      	ldr	r0, [pc, #216]	; (8002350 <print_statement+0x3ac>)
 8002278:	f7fd ff68 	bl	800014c <strlen>
 800227c:	4603      	mov	r3, r0
 800227e:	4a34      	ldr	r2, [pc, #208]	; (8002350 <print_statement+0x3ac>)
 8002280:	2100      	movs	r1, #0
 8002282:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8002284:	4832      	ldr	r0, [pc, #200]	; (8002350 <print_statement+0x3ac>)
 8002286:	f7fd ff61 	bl	800014c <strlen>
 800228a:	4603      	mov	r3, r0
 800228c:	b29a      	uxth	r2, r3
 800228e:	2314      	movs	r3, #20
 8002290:	492f      	ldr	r1, [pc, #188]	; (8002350 <print_statement+0x3ac>)
 8002292:	4830      	ldr	r0, [pc, #192]	; (8002354 <print_statement+0x3b0>)
 8002294:	f002 f862 	bl	800435c <HAL_UART_Transmit>
				yellow_time_tmp_change = yellow_time_tmp;
 8002298:	4b30      	ldr	r3, [pc, #192]	; (800235c <print_statement+0x3b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <print_statement+0x3b4>)
 800229e:	6013      	str	r3, [r2, #0]
			break;
 80022a0:	e04c      	b.n	800233c <print_statement+0x398>
			if(state_uart != MANUAL_GREEN){
 80022a2:	4b29      	ldr	r3, [pc, #164]	; (8002348 <print_statement+0x3a4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b16      	cmp	r3, #22
 80022a8:	d017      	beq.n	80022da <print_statement+0x336>
				sprintf( strr , "\r\n!MANUAL_GREEN_MODE\r\n");
 80022aa:	492e      	ldr	r1, [pc, #184]	; (8002364 <print_statement+0x3c0>)
 80022ac:	4828      	ldr	r0, [pc, #160]	; (8002350 <print_statement+0x3ac>)
 80022ae:	f002 fe51 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 80022b2:	4827      	ldr	r0, [pc, #156]	; (8002350 <print_statement+0x3ac>)
 80022b4:	f7fd ff4a 	bl	800014c <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a25      	ldr	r2, [pc, #148]	; (8002350 <print_statement+0x3ac>)
 80022bc:	2100      	movs	r1, #0
 80022be:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 80022c0:	4823      	ldr	r0, [pc, #140]	; (8002350 <print_statement+0x3ac>)
 80022c2:	f7fd ff43 	bl	800014c <strlen>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	2314      	movs	r3, #20
 80022cc:	4920      	ldr	r1, [pc, #128]	; (8002350 <print_statement+0x3ac>)
 80022ce:	4821      	ldr	r0, [pc, #132]	; (8002354 <print_statement+0x3b0>)
 80022d0:	f002 f844 	bl	800435c <HAL_UART_Transmit>
				state_uart = MANUAL_GREEN;
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <print_statement+0x3a4>)
 80022d6:	2216      	movs	r2, #22
 80022d8:	601a      	str	r2, [r3, #0]
			if(green_time_tmp_change != green_time_tmp){
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <print_statement+0x3c4>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <print_statement+0x3c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d02c      	beq.n	8002340 <print_statement+0x39c>
				sprintf( strr , "\r\n!MANUAL_GREEN_ADJUST=%u#\r\n", green_time_tmp);
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <print_statement+0x3c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4920      	ldr	r1, [pc, #128]	; (8002370 <print_statement+0x3cc>)
 80022ee:	4818      	ldr	r0, [pc, #96]	; (8002350 <print_statement+0x3ac>)
 80022f0:	f002 fe30 	bl	8004f54 <siprintf>
				strr[strlen(strr)] = '\0';  // Add null terminator
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <print_statement+0x3ac>)
 80022f6:	f7fd ff29 	bl	800014c <strlen>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <print_statement+0x3ac>)
 80022fe:	2100      	movs	r1, #0
 8002300:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8002302:	4813      	ldr	r0, [pc, #76]	; (8002350 <print_statement+0x3ac>)
 8002304:	f7fd ff22 	bl	800014c <strlen>
 8002308:	4603      	mov	r3, r0
 800230a:	b29a      	uxth	r2, r3
 800230c:	2314      	movs	r3, #20
 800230e:	4910      	ldr	r1, [pc, #64]	; (8002350 <print_statement+0x3ac>)
 8002310:	4810      	ldr	r0, [pc, #64]	; (8002354 <print_statement+0x3b0>)
 8002312:	f002 f823 	bl	800435c <HAL_UART_Transmit>
				green_time_tmp_change = green_time_tmp;
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <print_statement+0x3c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <print_statement+0x3c4>)
 800231c:	6013      	str	r3, [r2, #0]
			break;
 800231e:	e00f      	b.n	8002340 <print_statement+0x39c>
		default: break;
 8002320:	bf00      	nop
 8002322:	e00e      	b.n	8002342 <print_statement+0x39e>
			break;
 8002324:	bf00      	nop
 8002326:	e00c      	b.n	8002342 <print_statement+0x39e>
			break;
 8002328:	bf00      	nop
 800232a:	e00a      	b.n	8002342 <print_statement+0x39e>
			break;
 800232c:	bf00      	nop
 800232e:	e008      	b.n	8002342 <print_statement+0x39e>
			break;
 8002330:	bf00      	nop
 8002332:	e006      	b.n	8002342 <print_statement+0x39e>
			break;
 8002334:	bf00      	nop
 8002336:	e004      	b.n	8002342 <print_statement+0x39e>
			break;
 8002338:	bf00      	nop
 800233a:	e002      	b.n	8002342 <print_statement+0x39e>
			break;
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <print_statement+0x39e>
			break;
 8002340:	bf00      	nop
		}
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000240 	.word	0x20000240
 800234c:	0800586c 	.word	0x0800586c
 8002350:	20000338 	.word	0x20000338
 8002354:	200002f0 	.word	0x200002f0
 8002358:	2000023c 	.word	0x2000023c
 800235c:	20000254 	.word	0x20000254
 8002360:	08005884 	.word	0x08005884
 8002364:	080058a4 	.word	0x080058a4
 8002368:	20000238 	.word	0x20000238
 800236c:	20000258 	.word	0x20000258
 8002370:	080058bc 	.word	0x080058bc

08002374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002374:	f7ff fe10 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002378:	480b      	ldr	r0, [pc, #44]	; (80023a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800237a:	490c      	ldr	r1, [pc, #48]	; (80023ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800237e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002380:	e002      	b.n	8002388 <LoopCopyDataInit>

08002382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002386:	3304      	adds	r3, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800238c:	d3f9      	bcc.n	8002382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002390:	4c09      	ldr	r4, [pc, #36]	; (80023b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002394:	e001      	b.n	800239a <LoopFillZerobss>

08002396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002398:	3204      	adds	r2, #4

0800239a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800239c:	d3fb      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800239e:	f002 fdad 	bl	8004efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023a2:	f7fe fd5d 	bl	8000e60 <main>
  bx lr
 80023a6:	4770      	bx	lr
  ldr r0, =_sdata
 80023a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ac:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80023b0:	08005944 	.word	0x08005944
  ldr r2, =_sbss
 80023b4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80023b8:	20000380 	.word	0x20000380

080023bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023bc:	e7fe      	b.n	80023bc <ADC1_2_IRQHandler>
	...

080023c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_Init+0x28>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_Init+0x28>)
 80023ca:	f043 0310 	orr.w	r3, r3, #16
 80023ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f923 	bl	800261c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023d6:	200f      	movs	r0, #15
 80023d8:	f000 f808 	bl	80023ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023dc:	f7ff fc6a 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_InitTick+0x54>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x58>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002402:	fbb3 f3f1 	udiv	r3, r3, r1
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f93b 	bl	8002686 <HAL_SYSTICK_Config>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e00e      	b.n	8002438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0f      	cmp	r3, #15
 800241e:	d80a      	bhi.n	8002436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002420:	2200      	movs	r2, #0
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f000 f903 	bl	8002632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <HAL_InitTick+0x5c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	e000      	b.n	8002438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000080 	.word	0x20000080
 8002444:	20000088 	.word	0x20000088
 8002448:	20000084 	.word	0x20000084

0800244c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_IncTick+0x1c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_IncTick+0x20>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4413      	add	r3, r2
 800245c:	4a03      	ldr	r2, [pc, #12]	; (800246c <HAL_IncTick+0x20>)
 800245e:	6013      	str	r3, [r2, #0]
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000088 	.word	0x20000088
 800246c:	2000036c 	.word	0x2000036c

08002470 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return uwTick;
 8002474:	4b02      	ldr	r3, [pc, #8]	; (8002480 <HAL_GetTick+0x10>)
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	2000036c 	.word	0x2000036c

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4906      	ldr	r1, [pc, #24]	; (800251c <__NVIC_EnableIRQ+0x34>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e8:	d301      	bcc.n	80025ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ea:	2301      	movs	r3, #1
 80025ec:	e00f      	b.n	800260e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <SysTick_Config+0x40>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025f6:	210f      	movs	r1, #15
 80025f8:	f04f 30ff 	mov.w	r0, #4294967295
 80025fc:	f7ff ff90 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <SysTick_Config+0x40>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <SysTick_Config+0x40>)
 8002608:	2207      	movs	r2, #7
 800260a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	e000e010 	.word	0xe000e010

0800261c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff2d 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002644:	f7ff ff42 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7ff ff90 	bl	8002574 <NVIC_EncodePriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff5f 	bl	8002520 <__NVIC_SetPriority>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff35 	bl	80024e8 <__NVIC_EnableIRQ>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ffa2 	bl	80025d8 <SysTick_Config>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d008      	beq.n	80026c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2204      	movs	r2, #4
 80026ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e020      	b.n	800270a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 020e 	bic.w	r2, r2, #14
 80026d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d005      	beq.n	8002738 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2204      	movs	r2, #4
 8002730:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e051      	b.n	80027dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 020e 	bic.w	r2, r2, #14
 8002746:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_DMA_Abort_IT+0xd4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d029      	beq.n	80027b6 <HAL_DMA_Abort_IT+0xa2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_DMA_Abort_IT+0xd8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d022      	beq.n	80027b2 <HAL_DMA_Abort_IT+0x9e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_DMA_Abort_IT+0xdc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d01a      	beq.n	80027ac <HAL_DMA_Abort_IT+0x98>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_DMA_Abort_IT+0xe0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d012      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x92>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1c      	ldr	r2, [pc, #112]	; (80027f8 <HAL_DMA_Abort_IT+0xe4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00a      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x8c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1b      	ldr	r2, [pc, #108]	; (80027fc <HAL_DMA_Abort_IT+0xe8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d102      	bne.n	800279a <HAL_DMA_Abort_IT+0x86>
 8002794:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002798:	e00e      	b.n	80027b8 <HAL_DMA_Abort_IT+0xa4>
 800279a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800279e:	e00b      	b.n	80027b8 <HAL_DMA_Abort_IT+0xa4>
 80027a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a4:	e008      	b.n	80027b8 <HAL_DMA_Abort_IT+0xa4>
 80027a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027aa:	e005      	b.n	80027b8 <HAL_DMA_Abort_IT+0xa4>
 80027ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027b0:	e002      	b.n	80027b8 <HAL_DMA_Abort_IT+0xa4>
 80027b2:	2310      	movs	r3, #16
 80027b4:	e000      	b.n	80027b8 <HAL_DMA_Abort_IT+0xa4>
 80027b6:	2301      	movs	r3, #1
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <HAL_DMA_Abort_IT+0xec>)
 80027ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
    } 
  }
  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40020008 	.word	0x40020008
 80027ec:	4002001c 	.word	0x4002001c
 80027f0:	40020030 	.word	0x40020030
 80027f4:	40020044 	.word	0x40020044
 80027f8:	40020058 	.word	0x40020058
 80027fc:	4002006c 	.word	0x4002006c
 8002800:	40020000 	.word	0x40020000

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b08b      	sub	sp, #44	; 0x2c
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	e169      	b.n	8002aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002818:	2201      	movs	r2, #1
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	f040 8158 	bne.w	8002ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a9a      	ldr	r2, [pc, #616]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d05e      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002840:	4a98      	ldr	r2, [pc, #608]	; (8002aa4 <HAL_GPIO_Init+0x2a0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d875      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002846:	4a98      	ldr	r2, [pc, #608]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d058      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 800284c:	4a96      	ldr	r2, [pc, #600]	; (8002aa8 <HAL_GPIO_Init+0x2a4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d86f      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002852:	4a96      	ldr	r2, [pc, #600]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d052      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002858:	4a94      	ldr	r2, [pc, #592]	; (8002aac <HAL_GPIO_Init+0x2a8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d869      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800285e:	4a94      	ldr	r2, [pc, #592]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d04c      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002864:	4a92      	ldr	r2, [pc, #584]	; (8002ab0 <HAL_GPIO_Init+0x2ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d863      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800286a:	4a92      	ldr	r2, [pc, #584]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d046      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
 8002870:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_GPIO_Init+0x2b0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d85d      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 8002876:	2b12      	cmp	r3, #18
 8002878:	d82a      	bhi.n	80028d0 <HAL_GPIO_Init+0xcc>
 800287a:	2b12      	cmp	r3, #18
 800287c:	d859      	bhi.n	8002932 <HAL_GPIO_Init+0x12e>
 800287e:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <HAL_GPIO_Init+0x80>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	080028ff 	.word	0x080028ff
 8002888:	080028d9 	.word	0x080028d9
 800288c:	080028eb 	.word	0x080028eb
 8002890:	0800292d 	.word	0x0800292d
 8002894:	08002933 	.word	0x08002933
 8002898:	08002933 	.word	0x08002933
 800289c:	08002933 	.word	0x08002933
 80028a0:	08002933 	.word	0x08002933
 80028a4:	08002933 	.word	0x08002933
 80028a8:	08002933 	.word	0x08002933
 80028ac:	08002933 	.word	0x08002933
 80028b0:	08002933 	.word	0x08002933
 80028b4:	08002933 	.word	0x08002933
 80028b8:	08002933 	.word	0x08002933
 80028bc:	08002933 	.word	0x08002933
 80028c0:	08002933 	.word	0x08002933
 80028c4:	08002933 	.word	0x08002933
 80028c8:	080028e1 	.word	0x080028e1
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	4a79      	ldr	r2, [pc, #484]	; (8002ab8 <HAL_GPIO_Init+0x2b4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028d6:	e02c      	b.n	8002932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e029      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	3304      	adds	r3, #4
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e024      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	3308      	adds	r3, #8
 80028f0:	623b      	str	r3, [r7, #32]
          break;
 80028f2:	e01f      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	330c      	adds	r3, #12
 80028fa:	623b      	str	r3, [r7, #32]
          break;
 80028fc:	e01a      	b.n	8002934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002906:	2304      	movs	r3, #4
 8002908:	623b      	str	r3, [r7, #32]
          break;
 800290a:	e013      	b.n	8002934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	611a      	str	r2, [r3, #16]
          break;
 800291e:	e009      	b.n	8002934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	615a      	str	r2, [r3, #20]
          break;
 800292a:	e003      	b.n	8002934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
          break;
 8002930:	e000      	b.n	8002934 <HAL_GPIO_Init+0x130>
          break;
 8002932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2bff      	cmp	r3, #255	; 0xff
 8002938:	d801      	bhi.n	800293e <HAL_GPIO_Init+0x13a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_Init+0x13e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2bff      	cmp	r3, #255	; 0xff
 8002948:	d802      	bhi.n	8002950 <HAL_GPIO_Init+0x14c>
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	e002      	b.n	8002956 <HAL_GPIO_Init+0x152>
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3b08      	subs	r3, #8
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	210f      	movs	r1, #15
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80b1 	beq.w	8002ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002984:	4b4d      	ldr	r3, [pc, #308]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x2b8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800299c:	4a48      	ldr	r2, [pc, #288]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	3302      	adds	r3, #2
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	220f      	movs	r2, #15
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a40      	ldr	r2, [pc, #256]	; (8002ac4 <HAL_GPIO_Init+0x2c0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d013      	beq.n	80029f0 <HAL_GPIO_Init+0x1ec>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a3f      	ldr	r2, [pc, #252]	; (8002ac8 <HAL_GPIO_Init+0x2c4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00d      	beq.n	80029ec <HAL_GPIO_Init+0x1e8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a3e      	ldr	r2, [pc, #248]	; (8002acc <HAL_GPIO_Init+0x2c8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d007      	beq.n	80029e8 <HAL_GPIO_Init+0x1e4>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a3d      	ldr	r2, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x2cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_GPIO_Init+0x1e0>
 80029e0:	2303      	movs	r3, #3
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1ee>
 80029f0:	2300      	movs	r3, #0
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a02:	492f      	ldr	r1, [pc, #188]	; (8002ac0 <HAL_GPIO_Init+0x2bc>)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	492c      	ldr	r1, [pc, #176]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4928      	ldr	r1, [pc, #160]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60cb      	str	r3, [r1, #12]
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	491e      	ldr	r1, [pc, #120]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4918      	ldr	r1, [pc, #96]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4914      	ldr	r1, [pc, #80]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d021      	beq.n	8002ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e021      	b.n	8002ae6 <HAL_GPIO_Init+0x2e2>
 8002aa2:	bf00      	nop
 8002aa4:	10320000 	.word	0x10320000
 8002aa8:	10310000 	.word	0x10310000
 8002aac:	10220000 	.word	0x10220000
 8002ab0:	10210000 	.word	0x10210000
 8002ab4:	10120000 	.word	0x10120000
 8002ab8:	10110000 	.word	0x10110000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	40010c00 	.word	0x40010c00
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40011400 	.word	0x40011400
 8002ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4909      	ldr	r1, [pc, #36]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	3301      	adds	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f47f ae8e 	bne.w	8002818 <HAL_GPIO_Init+0x14>
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	372c      	adds	r7, #44	; 0x2c
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e001      	b.n	8002b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	460b      	mov	r3, r1
 8002b44:	807b      	strh	r3, [r7, #2]
 8002b46:	4613      	mov	r3, r2
 8002b48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b4a:	787b      	ldrb	r3, [r7, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b56:	e003      	b.n	8002b60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	041a      	lsls	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	611a      	str	r2, [r3, #16]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b7c:	887a      	ldrh	r2, [r7, #2]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	041a      	lsls	r2, r3, #16
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002bba:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002bbc:	e002      	b.n	8002bc4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002bbe:	bf40      	sev
    __WFE();
 8002bc0:	bf20      	wfe
    __WFE();
 8002bc2:	bf20      	wfe
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e26c      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8087 	beq.w	8002d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf4:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d00c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c00:	4b8f      	ldr	r3, [pc, #572]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d112      	bne.n	8002c32 <HAL_RCC_OscConfig+0x5e>
 8002c0c:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	d10b      	bne.n	8002c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1a:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d06c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x12c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d168      	bne.n	8002d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e246      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x76>
 8002c3c:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7f      	ldr	r2, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e02e      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b7b      	ldr	r3, [pc, #492]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7a      	ldr	r2, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0xbc>
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a71      	ldr	r2, [pc, #452]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6e      	ldr	r2, [pc, #440]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd4>
 8002c90:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6a      	ldr	r2, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a67      	ldr	r2, [pc, #412]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fbde 	bl	8002470 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff fbda 	bl	8002470 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1fa      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe4>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7ff fbca 	bl	8002470 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7ff fbc6 	bl	8002470 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1e6      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x10c>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d063      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x18c>
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x176>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e1ba      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4939      	ldr	r1, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	e03a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d68:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fb7f 	bl	8002470 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7ff fb7b 	bl	8002470 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e19b      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4927      	ldr	r1, [pc, #156]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7ff fb5e 	bl	8002470 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db8:	f7ff fb5a 	bl	8002470 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e17a      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03a      	beq.n	8002e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d019      	beq.n	8002e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df0:	f7ff fb3e 	bl	8002470 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7ff fb3a 	bl	8002470 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e15a      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f000 facc 	bl	80033b4 <RCC_Delay>
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7ff fb24 	bl	8002470 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7ff fb20 	bl	8002470 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e140      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	42420000 	.word	0x42420000
 8002e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b9e      	ldr	r3, [pc, #632]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e9      	bne.n	8002e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a6 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b97      	ldr	r3, [pc, #604]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b94      	ldr	r3, [pc, #592]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a93      	ldr	r2, [pc, #588]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	61d3      	str	r3, [r2, #28]
 8002e82:	4b91      	ldr	r3, [pc, #580]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b8e      	ldr	r3, [pc, #568]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b8b      	ldr	r3, [pc, #556]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a8a      	ldr	r2, [pc, #552]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fae1 	bl	8002470 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7ff fadd 	bl	8002470 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0fd      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b81      	ldr	r3, [pc, #516]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x312>
 8002ed8:	4b7b      	ldr	r3, [pc, #492]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a7a      	ldr	r2, [pc, #488]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	e02d      	b.n	8002f42 <HAL_RCC_OscConfig+0x36e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x334>
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a75      	ldr	r2, [pc, #468]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	e01c      	b.n	8002f42 <HAL_RCC_OscConfig+0x36e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x356>
 8002f10:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a6c      	ldr	r2, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	e00b      	b.n	8002f42 <HAL_RCC_OscConfig+0x36e>
 8002f2a:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a66      	ldr	r2, [pc, #408]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6213      	str	r3, [r2, #32]
 8002f36:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a63      	ldr	r2, [pc, #396]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d015      	beq.n	8002f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7ff fa91 	bl	8002470 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7ff fa8d 	bl	8002470 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0ab      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCC_OscConfig+0x37e>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7ff fa7b 	bl	8002470 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7ff fa77 	bl	8002470 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e095      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b48      	ldr	r3, [pc, #288]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4a47      	ldr	r2, [pc, #284]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8081 	beq.w	80030be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbc:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d061      	beq.n	800308c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d146      	bne.n	800305e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_RCC_OscConfig+0x4fc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff fa4b 	bl	8002470 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7ff fa47 	bl	8002470 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e067      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d108      	bne.n	8003018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	492d      	ldr	r1, [pc, #180]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a19      	ldr	r1, [r3, #32]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	430b      	orrs	r3, r1
 800302a:	4927      	ldr	r1, [pc, #156]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x4fc>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7ff fa1b 	bl	8002470 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7ff fa17 	bl	8002470 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e037      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x46a>
 800305c:	e02f      	b.n	80030be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <HAL_RCC_OscConfig+0x4fc>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fa04 	bl	8002470 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7ff fa00 	bl	8002470 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e020      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x498>
 800308a:	e018      	b.n	80030be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e013      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
 80030d0:	42420060 	.word	0x42420060

080030d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4965      	ldr	r1, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800313a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d115      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e073      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4936      	ldr	r1, [pc, #216]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7ff f954 	bl	8002470 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7ff f950 	bl	8002470 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e053      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d210      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4922      	ldr	r1, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1cc>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff f8b2 	bl	80023ec <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40022000 	.word	0x40022000
 8003298:	40021000 	.word	0x40021000
 800329c:	080058dc 	.word	0x080058dc
 80032a0:	20000080 	.word	0x20000080
 80032a4:	20000084 	.word	0x20000084

080032a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <HAL_RCC_GetSysClockFreq+0x94>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d002      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x30>
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d003      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x36>
 80032d6:	e027      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <HAL_RCC_GetSysClockFreq+0x98>)
 80032da:	613b      	str	r3, [r7, #16]
      break;
 80032dc:	e027      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	0c9b      	lsrs	r3, r3, #18
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032e8:	5cd3      	ldrb	r3, [r2, r3]
 80032ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_GetSysClockFreq+0x94>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	0c5b      	lsrs	r3, r3, #17
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	4a11      	ldr	r2, [pc, #68]	; (8003348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <HAL_RCC_GetSysClockFreq+0x98>)
 800330a:	fb02 f203 	mul.w	r2, r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	fbb2 f3f3 	udiv	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	e004      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <HAL_RCC_GetSysClockFreq+0xa4>)
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	613b      	str	r3, [r7, #16]
      break;
 8003326:	e002      	b.n	800332e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetSysClockFreq+0x98>)
 800332a:	613b      	str	r3, [r7, #16]
      break;
 800332c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332e:	693b      	ldr	r3, [r7, #16]
}
 8003330:	4618      	mov	r0, r3
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	007a1200 	.word	0x007a1200
 8003344:	080058f4 	.word	0x080058f4
 8003348:	08005904 	.word	0x08005904
 800334c:	003d0900 	.word	0x003d0900

08003350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003354:	4b02      	ldr	r3, [pc, #8]	; (8003360 <HAL_RCC_GetHCLKFreq+0x10>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	20000080 	.word	0x20000080

08003364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003368:	f7ff fff2 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	4903      	ldr	r1, [pc, #12]	; (8003388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003380:	4618      	mov	r0, r3
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000
 8003388:	080058ec 	.word	0x080058ec

0800338c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003390:	f7ff ffde 	bl	8003350 <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	0adb      	lsrs	r3, r3, #11
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4903      	ldr	r1, [pc, #12]	; (80033b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000
 80033b0:	080058ec 	.word	0x080058ec

080033b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <RCC_Delay+0x34>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <RCC_Delay+0x38>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0a5b      	lsrs	r3, r3, #9
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033d0:	bf00      	nop
  }
  while (Delay --);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1e5a      	subs	r2, r3, #1
 80033d6:	60fa      	str	r2, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f9      	bne.n	80033d0 <RCC_Delay+0x1c>
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	20000080 	.word	0x20000080
 80033ec:	10624dd3 	.word	0x10624dd3

080033f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fc7e 	bl	8001d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 fc30 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e03a      	b.n	800351e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_TIM_Base_Start_IT+0x98>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00e      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x58>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d009      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x58>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a14      	ldr	r2, [pc, #80]	; (800352c <HAL_TIM_Base_Start_IT+0x9c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x58>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_TIM_Base_Start_IT+0xa0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d111      	bne.n	800350c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d010      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350a:	e007      	b.n	800351c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800

08003534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e041      	b.n	80035ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f839 	bl	80035d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f000 fb8e 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_TIM_PWM_Start+0x24>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e022      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b04      	cmp	r3, #4
 800360c:	d109      	bne.n	8003622 <HAL_TIM_PWM_Start+0x3e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	e015      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d109      	bne.n	800363c <HAL_TIM_PWM_Start+0x58>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	e008      	b.n	800364e <HAL_TIM_PWM_Start+0x6a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e05e      	b.n	8003714 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0x82>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003664:	e013      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b04      	cmp	r3, #4
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start+0x92>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003674:	e00b      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d104      	bne.n	8003686 <HAL_TIM_PWM_Start+0xa2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	e003      	b.n	800368e <HAL_TIM_PWM_Start+0xaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2201      	movs	r2, #1
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fd7c 	bl	8004194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_TIM_PWM_Start+0x138>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d107      	bne.n	80036b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_TIM_PWM_Start+0x138>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_TIM_PWM_Start+0xfa>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d009      	beq.n	80036de <HAL_TIM_PWM_Start+0xfa>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a14      	ldr	r2, [pc, #80]	; (8003720 <HAL_TIM_PWM_Start+0x13c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIM_PWM_Start+0xfa>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <HAL_TIM_PWM_Start+0x140>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b06      	cmp	r3, #6
 80036ee:	d010      	beq.n	8003712 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	e007      	b.n	8003712 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40012c00 	.word	0x40012c00
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800

08003728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d122      	bne.n	8003784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d11b      	bne.n	8003784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0202 	mvn.w	r2, #2
 8003754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa76 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa69 	bl	8003c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa78 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b04      	cmp	r3, #4
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0204 	mvn.w	r2, #4
 80037a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa4c 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa3f 	bl	8003c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fa4e 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0208 	mvn.w	r2, #8
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2204      	movs	r2, #4
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fa22 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fa15 	bl	8003c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fa24 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b10      	cmp	r3, #16
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0210 	mvn.w	r2, #16
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2208      	movs	r2, #8
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9f8 	bl	8003c5c <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9eb 	bl	8003c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9fa 	bl	8003c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0201 	mvn.w	r2, #1
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fcf0 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fce9 	bl	80042aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9be 	bl	8003c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b20      	cmp	r3, #32
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0220 	mvn.w	r2, #32
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fcb4 	bl	8004298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003952:	2302      	movs	r3, #2
 8003954:	e0ae      	b.n	8003ab4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b0c      	cmp	r3, #12
 8003962:	f200 809f 	bhi.w	8003aa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003966:	a201      	add	r2, pc, #4	; (adr r2, 800396c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	080039a1 	.word	0x080039a1
 8003970:	08003aa5 	.word	0x08003aa5
 8003974:	08003aa5 	.word	0x08003aa5
 8003978:	08003aa5 	.word	0x08003aa5
 800397c:	080039e1 	.word	0x080039e1
 8003980:	08003aa5 	.word	0x08003aa5
 8003984:	08003aa5 	.word	0x08003aa5
 8003988:	08003aa5 	.word	0x08003aa5
 800398c:	08003a23 	.word	0x08003a23
 8003990:	08003aa5 	.word	0x08003aa5
 8003994:	08003aa5 	.word	0x08003aa5
 8003998:	08003aa5 	.word	0x08003aa5
 800399c:	08003a63 	.word	0x08003a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f9d6 	bl	8003d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0204 	bic.w	r2, r2, #4
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	619a      	str	r2, [r3, #24]
      break;
 80039de:	e064      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fa1c 	bl	8003e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6999      	ldr	r1, [r3, #24]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	021a      	lsls	r2, r3, #8
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	619a      	str	r2, [r3, #24]
      break;
 8003a20:	e043      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fa65 	bl	8003ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0208 	orr.w	r2, r2, #8
 8003a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0204 	bic.w	r2, r2, #4
 8003a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	61da      	str	r2, [r3, #28]
      break;
 8003a60:	e023      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 faaf 	bl	8003fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69da      	ldr	r2, [r3, #28]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69d9      	ldr	r1, [r3, #28]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	021a      	lsls	r2, r3, #8
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	61da      	str	r2, [r3, #28]
      break;
 8003aa2:	e002      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e0b4      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x186>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b10:	d03e      	beq.n	8003b90 <HAL_TIM_ConfigClockSource+0xd4>
 8003b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b16:	f200 8087 	bhi.w	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	f000 8086 	beq.w	8003c2e <HAL_TIM_ConfigClockSource+0x172>
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b26:	d87f      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b70      	cmp	r3, #112	; 0x70
 8003b2a:	d01a      	beq.n	8003b62 <HAL_TIM_ConfigClockSource+0xa6>
 8003b2c:	2b70      	cmp	r3, #112	; 0x70
 8003b2e:	d87b      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b60      	cmp	r3, #96	; 0x60
 8003b32:	d050      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b34:	2b60      	cmp	r3, #96	; 0x60
 8003b36:	d877      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b50      	cmp	r3, #80	; 0x50
 8003b3a:	d03c      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003b3c:	2b50      	cmp	r3, #80	; 0x50
 8003b3e:	d873      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d058      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b44:	2b40      	cmp	r3, #64	; 0x40
 8003b46:	d86f      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b30      	cmp	r3, #48	; 0x30
 8003b4a:	d064      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x15a>
 8003b4c:	2b30      	cmp	r3, #48	; 0x30
 8003b4e:	d86b      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d060      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x15a>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d867      	bhi.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d05c      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x15a>
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d05a      	beq.n	8003c16 <HAL_TIM_ConfigClockSource+0x15a>
 8003b60:	e062      	b.n	8003c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6899      	ldr	r1, [r3, #8]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f000 faf0 	bl	8004156 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	609a      	str	r2, [r3, #8]
      break;
 8003b8e:	e04f      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6899      	ldr	r1, [r3, #8]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f000 fad9 	bl	8004156 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bb2:	609a      	str	r2, [r3, #8]
      break;
 8003bb4:	e03c      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f000 fa50 	bl	8004068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2150      	movs	r1, #80	; 0x50
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 faa7 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003bd4:	e02c      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 fa6e 	bl	80040c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2160      	movs	r1, #96	; 0x60
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fa97 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e01c      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f000 fa30 	bl	8004068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2140      	movs	r1, #64	; 0x40
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fa87 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003c14:	e00c      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f000 fa7e 	bl	8004122 <TIM_ITRx_SetConfig>
      break;
 8003c26:	e003      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2c:	e000      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
	...

08003c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d007      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <TIM_Base_SetConfig+0xbc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a25      	ldr	r2, [pc, #148]	; (8003d54 <TIM_Base_SetConfig+0xc0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d108      	bne.n	8003cd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d007      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <TIM_Base_SetConfig+0xbc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <TIM_Base_SetConfig+0xc0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800

08003d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0201 	bic.w	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f023 0302 	bic.w	r3, r3, #2
 8003da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <TIM_OC1_SetConfig+0xc8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10c      	bne.n	8003dce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f023 0308 	bic.w	r3, r3, #8
 8003dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f023 0304 	bic.w	r3, r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <TIM_OC1_SetConfig+0xc8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d111      	bne.n	8003dfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	621a      	str	r2, [r3, #32]
}
 8003e14:	bf00      	nop
 8003e16:	371c      	adds	r7, #28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00

08003e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0210 	bic.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <TIM_OC2_SetConfig+0xd0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10d      	bne.n	8003ea0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <TIM_OC2_SetConfig+0xd0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d113      	bne.n	8003ed0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00

08003ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <TIM_OC3_SetConfig+0xd0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d10d      	bne.n	8003f72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <TIM_OC3_SetConfig+0xd0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d113      	bne.n	8003fa2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40012c00 	.word	0x40012c00

08003fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <TIM_OC4_SetConfig+0x98>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d109      	bne.n	8004040 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004032:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	019b      	lsls	r3, r3, #6
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	40012c00 	.word	0x40012c00

08004068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0201 	bic.w	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 030a 	bic.w	r3, r3, #10
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	031b      	lsls	r3, r3, #12
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004100:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	f043 0307 	orr.w	r3, r3, #7
 8004144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	607a      	str	r2, [r7, #4]
 8004162:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004170:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	431a      	orrs	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4313      	orrs	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	609a      	str	r2, [r3, #8]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 031f 	and.w	r3, r3, #31
 80041a6:	2201      	movs	r2, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	bf00      	nop
 80041d4:	371c      	adds	r7, #28
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e046      	b.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a16      	ldr	r2, [pc, #88]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004240:	d009      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a10      	ldr	r2, [pc, #64]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10c      	bne.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800425c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	4313      	orrs	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800

08004298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e042      	b.n	8004354 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd fd8a 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fd67 	bl	8004dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b20      	cmp	r3, #32
 800437a:	d16d      	bne.n	8004458 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_UART_Transmit+0x2c>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e066      	b.n	800445a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2221      	movs	r2, #33	; 0x21
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800439a:	f7fe f869 	bl	8002470 <HAL_GetTick>
 800439e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d108      	bne.n	80043c8 <HAL_UART_Transmit+0x6c>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d104      	bne.n	80043c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e003      	b.n	80043d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043d0:	e02a      	b.n	8004428 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	2180      	movs	r1, #128	; 0x80
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 faf0 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e036      	b.n	800445a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	3302      	adds	r3, #2
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	e007      	b.n	800441a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	3301      	adds	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1cf      	bne.n	80043d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2200      	movs	r2, #0
 800443a:	2140      	movs	r1, #64	; 0x40
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fac0 	bl	80049c2 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e006      	b.n	800445a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b0ba      	sub	sp, #232	; 0xe8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80044a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_UART_IRQHandler+0x66>
 80044b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fbc8 	bl	8004c58 <UART_Receive_IT>
      return;
 80044c8:	e25b      	b.n	8004982 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80de 	beq.w	8004690 <HAL_UART_IRQHandler+0x22c>
 80044d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d106      	bne.n	80044ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80d1 	beq.w	8004690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_UART_IRQHandler+0xae>
 80044fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	f043 0201 	orr.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xd2>
 800451e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <HAL_UART_IRQHandler+0xf6>
 8004542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d011      	beq.n	800458a <HAL_UART_IRQHandler+0x126>
 8004566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	f043 0208 	orr.w	r2, r3, #8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 81f2 	beq.w	8004978 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_UART_IRQHandler+0x14e>
 80045a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fb53 	bl	8004c58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <HAL_UART_IRQHandler+0x17a>
 80045d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d04f      	beq.n	800467e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fa5d 	bl	8004a9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d041      	beq.n	8004676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3314      	adds	r3, #20
 80045f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800460c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3314      	adds	r3, #20
 800461a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800461e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800462a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1d9      	bne.n	80045f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d013      	beq.n	800466e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	4a7e      	ldr	r2, [pc, #504]	; (8004844 <HAL_UART_IRQHandler+0x3e0>)
 800464c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe f85e 	bl	8002714 <HAL_DMA_Abort_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004668:	4610      	mov	r0, r2
 800466a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e00e      	b.n	800468c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f993 	bl	800499a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e00a      	b.n	800468c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f98f 	bl	800499a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467c:	e006      	b.n	800468c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f98b 	bl	800499a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800468a:	e175      	b.n	8004978 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468c:	bf00      	nop
    return;
 800468e:	e173      	b.n	8004978 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	2b01      	cmp	r3, #1
 8004696:	f040 814f 	bne.w	8004938 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8148 	beq.w	8004938 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80046a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8141 	beq.w	8004938 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80b6 	beq.w	8004848 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8145 	beq.w	800497c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046fa:	429a      	cmp	r2, r3
 80046fc:	f080 813e 	bcs.w	800497c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004706:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b20      	cmp	r3, #32
 8004710:	f000 8088 	beq.w	8004824 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004722:	e853 3f00 	ldrex	r3, [r3]
 8004726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800472a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800472e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004740:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800474c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1d9      	bne.n	8004714 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3314      	adds	r3, #20
 8004766:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004784:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004788:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800478c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e1      	bne.n	8004760 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e3      	bne.n	800479c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	330c      	adds	r3, #12
 80047e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f4:	f023 0310 	bic.w	r3, r3, #16
 80047f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004806:	65ba      	str	r2, [r7, #88]	; 0x58
 8004808:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800480c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1e3      	bne.n	80047e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd ff3d 	bl	800269e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004832:	b29b      	uxth	r3, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	b29b      	uxth	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8b6 	bl	80049ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004840:	e09c      	b.n	800497c <HAL_UART_IRQHandler+0x518>
 8004842:	bf00      	nop
 8004844:	08004b63 	.word	0x08004b63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004850:	b29b      	uxth	r3, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 808e 	beq.w	8004980 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8089 	beq.w	8004980 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004884:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004892:	647a      	str	r2, [r7, #68]	; 0x44
 8004894:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e3      	bne.n	800486e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	623b      	str	r3, [r7, #32]
   return(result);
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048ca:	633a      	str	r2, [r7, #48]	; 0x30
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e3      	bne.n	80048a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	330c      	adds	r3, #12
 80048f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0310 	bic.w	r3, r3, #16
 8004902:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	330c      	adds	r3, #12
 800490c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004910:	61fa      	str	r2, [r7, #28]
 8004912:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	617b      	str	r3, [r7, #20]
   return(result);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e3      	bne.n	80048ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800492a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f83b 	bl	80049ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004936:	e023      	b.n	8004980 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004940:	2b00      	cmp	r3, #0
 8004942:	d009      	beq.n	8004958 <HAL_UART_IRQHandler+0x4f4>
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f91a 	bl	8004b8a <UART_Transmit_IT>
    return;
 8004956:	e014      	b.n	8004982 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00e      	beq.n	8004982 <HAL_UART_IRQHandler+0x51e>
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f959 	bl	8004c28 <UART_EndTransmit_IT>
    return;
 8004976:	e004      	b.n	8004982 <HAL_UART_IRQHandler+0x51e>
    return;
 8004978:	bf00      	nop
 800497a:	e002      	b.n	8004982 <HAL_UART_IRQHandler+0x51e>
      return;
 800497c:	bf00      	nop
 800497e:	e000      	b.n	8004982 <HAL_UART_IRQHandler+0x51e>
      return;
 8004980:	bf00      	nop
  }
}
 8004982:	37e8      	adds	r7, #232	; 0xe8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr

080049c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b090      	sub	sp, #64	; 0x40
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d2:	e050      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049da:	d04c      	beq.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d007      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e2:	f7fd fd45 	bl	8002470 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d241      	bcs.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a12:	637a      	str	r2, [r7, #52]	; 0x34
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e5      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3314      	adds	r3, #20
 8004a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	613b      	str	r3, [r7, #16]
   return(result);
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a46:	623a      	str	r2, [r7, #32]
 8004a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	69f9      	ldr	r1, [r7, #28]
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e5      	bne.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e00f      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d09f      	beq.n	80049d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3740      	adds	r7, #64	; 0x40
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b095      	sub	sp, #84	; 0x54
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004abc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ac6:	643a      	str	r2, [r7, #64]	; 0x40
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e5      	bne.n	8004aa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3314      	adds	r3, #20
 8004ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e5      	bne.n	8004ada <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d119      	bne.n	8004b4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f023 0310 	bic.w	r3, r3, #16
 8004b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b36:	61ba      	str	r2, [r7, #24]
 8004b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6979      	ldr	r1, [r7, #20]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	613b      	str	r3, [r7, #16]
   return(result);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b58:	bf00      	nop
 8004b5a:	3754      	adds	r7, #84	; 0x54
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7ff ff0c 	bl	800499a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b085      	sub	sp, #20
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b21      	cmp	r3, #33	; 0x21
 8004b9c:	d13e      	bne.n	8004c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba6:	d114      	bne.n	8004bd2 <UART_Transmit_IT+0x48>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d110      	bne.n	8004bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	621a      	str	r2, [r3, #32]
 8004bd0:	e008      	b.n	8004be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	1c59      	adds	r1, r3, #1
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6211      	str	r1, [r2, #32]
 8004bdc:	781a      	ldrb	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	e000      	b.n	8004c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c1c:	2302      	movs	r3, #2
  }
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff fe9d 	bl	8004988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	; 0x30
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b22      	cmp	r3, #34	; 0x22
 8004c6a:	f040 80ae 	bne.w	8004dca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	d117      	bne.n	8004ca8 <UART_Receive_IT+0x50>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d113      	bne.n	8004ca8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	1c9a      	adds	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca6:	e026      	b.n	8004cf6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cba:	d007      	beq.n	8004ccc <UART_Receive_IT+0x74>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <UART_Receive_IT+0x82>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e008      	b.n	8004cec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	4619      	mov	r1, r3
 8004d04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d15d      	bne.n	8004dc6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0220 	bic.w	r2, r2, #32
 8004d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d135      	bne.n	8004dbc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	613b      	str	r3, [r7, #16]
   return(result);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f023 0310 	bic.w	r3, r3, #16
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	623a      	str	r2, [r7, #32]
 8004d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7a:	69f9      	ldr	r1, [r7, #28]
 8004d7c:	6a3a      	ldr	r2, [r7, #32]
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1e5      	bne.n	8004d56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d10a      	bne.n	8004dae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fdf9 	bl	80049ac <HAL_UARTEx_RxEventCallback>
 8004dba:	e002      	b.n	8004dc2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fc fa6f 	bl	80012a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e002      	b.n	8004dcc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3730      	adds	r7, #48	; 0x30
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e0e:	f023 030c 	bic.w	r3, r3, #12
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <UART_SetConfig+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d103      	bne.n	8004e44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e3c:	f7fe faa6 	bl	800338c <HAL_RCC_GetPCLK2Freq>
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	e002      	b.n	8004e4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7fe fa8e 	bl	8003364 <HAL_RCC_GetPCLK1Freq>
 8004e48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009a      	lsls	r2, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	4a22      	ldr	r2, [pc, #136]	; (8004eec <UART_SetConfig+0x118>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	0119      	lsls	r1, r3, #4
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e80:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <UART_SetConfig+0x118>)
 8004e82:	fba3 0302 	umull	r0, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2064      	movs	r0, #100	; 0x64
 8004e8a:	fb00 f303 	mul.w	r3, r0, r3
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	3332      	adds	r3, #50	; 0x32
 8004e94:	4a15      	ldr	r2, [pc, #84]	; (8004eec <UART_SetConfig+0x118>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea0:	4419      	add	r1, r3
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <UART_SetConfig+0x118>)
 8004eba:	fba3 0302 	umull	r0, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	2064      	movs	r0, #100	; 0x64
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	3332      	adds	r3, #50	; 0x32
 8004ecc:	4a07      	ldr	r2, [pc, #28]	; (8004eec <UART_SetConfig+0x118>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	f003 020f 	and.w	r2, r3, #15
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	440a      	add	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40013800 	.word	0x40013800
 8004eec:	51eb851f 	.word	0x51eb851f

08004ef0 <__errno>:
 8004ef0:	4b01      	ldr	r3, [pc, #4]	; (8004ef8 <__errno+0x8>)
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	2000008c 	.word	0x2000008c

08004efc <__libc_init_array>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	2600      	movs	r6, #0
 8004f00:	4d0c      	ldr	r5, [pc, #48]	; (8004f34 <__libc_init_array+0x38>)
 8004f02:	4c0d      	ldr	r4, [pc, #52]	; (8004f38 <__libc_init_array+0x3c>)
 8004f04:	1b64      	subs	r4, r4, r5
 8004f06:	10a4      	asrs	r4, r4, #2
 8004f08:	42a6      	cmp	r6, r4
 8004f0a:	d109      	bne.n	8004f20 <__libc_init_array+0x24>
 8004f0c:	f000 fc5c 	bl	80057c8 <_init>
 8004f10:	2600      	movs	r6, #0
 8004f12:	4d0a      	ldr	r5, [pc, #40]	; (8004f3c <__libc_init_array+0x40>)
 8004f14:	4c0a      	ldr	r4, [pc, #40]	; (8004f40 <__libc_init_array+0x44>)
 8004f16:	1b64      	subs	r4, r4, r5
 8004f18:	10a4      	asrs	r4, r4, #2
 8004f1a:	42a6      	cmp	r6, r4
 8004f1c:	d105      	bne.n	8004f2a <__libc_init_array+0x2e>
 8004f1e:	bd70      	pop	{r4, r5, r6, pc}
 8004f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f24:	4798      	blx	r3
 8004f26:	3601      	adds	r6, #1
 8004f28:	e7ee      	b.n	8004f08 <__libc_init_array+0xc>
 8004f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2e:	4798      	blx	r3
 8004f30:	3601      	adds	r6, #1
 8004f32:	e7f2      	b.n	8004f1a <__libc_init_array+0x1e>
 8004f34:	0800593c 	.word	0x0800593c
 8004f38:	0800593c 	.word	0x0800593c
 8004f3c:	0800593c 	.word	0x0800593c
 8004f40:	08005940 	.word	0x08005940

08004f44 <memset>:
 8004f44:	4603      	mov	r3, r0
 8004f46:	4402      	add	r2, r0
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d100      	bne.n	8004f4e <memset+0xa>
 8004f4c:	4770      	bx	lr
 8004f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f52:	e7f9      	b.n	8004f48 <memset+0x4>

08004f54 <siprintf>:
 8004f54:	b40e      	push	{r1, r2, r3}
 8004f56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f5a:	b500      	push	{lr}
 8004f5c:	b09c      	sub	sp, #112	; 0x70
 8004f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f60:	9002      	str	r0, [sp, #8]
 8004f62:	9006      	str	r0, [sp, #24]
 8004f64:	9107      	str	r1, [sp, #28]
 8004f66:	9104      	str	r1, [sp, #16]
 8004f68:	4808      	ldr	r0, [pc, #32]	; (8004f8c <siprintf+0x38>)
 8004f6a:	4909      	ldr	r1, [pc, #36]	; (8004f90 <siprintf+0x3c>)
 8004f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f70:	9105      	str	r1, [sp, #20]
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	a902      	add	r1, sp, #8
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	f000 f868 	bl	800504c <_svfiprintf_r>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	9b02      	ldr	r3, [sp, #8]
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	b01c      	add	sp, #112	; 0x70
 8004f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f88:	b003      	add	sp, #12
 8004f8a:	4770      	bx	lr
 8004f8c:	2000008c 	.word	0x2000008c
 8004f90:	ffff0208 	.word	0xffff0208

08004f94 <__ssputs_r>:
 8004f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	688e      	ldr	r6, [r1, #8]
 8004f9a:	4682      	mov	sl, r0
 8004f9c:	429e      	cmp	r6, r3
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	4690      	mov	r8, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	d838      	bhi.n	8005018 <__ssputs_r+0x84>
 8004fa6:	898a      	ldrh	r2, [r1, #12]
 8004fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fac:	d032      	beq.n	8005014 <__ssputs_r+0x80>
 8004fae:	6825      	ldr	r5, [r4, #0]
 8004fb0:	6909      	ldr	r1, [r1, #16]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	eba5 0901 	sub.w	r9, r5, r1
 8004fb8:	6965      	ldr	r5, [r4, #20]
 8004fba:	444b      	add	r3, r9
 8004fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fc4:	106d      	asrs	r5, r5, #1
 8004fc6:	429d      	cmp	r5, r3
 8004fc8:	bf38      	it	cc
 8004fca:	461d      	movcc	r5, r3
 8004fcc:	0553      	lsls	r3, r2, #21
 8004fce:	d531      	bpl.n	8005034 <__ssputs_r+0xa0>
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f000 fb53 	bl	800567c <_malloc_r>
 8004fd6:	4606      	mov	r6, r0
 8004fd8:	b950      	cbnz	r0, 8004ff0 <__ssputs_r+0x5c>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe0:	f8ca 3000 	str.w	r3, [sl]
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fea:	81a3      	strh	r3, [r4, #12]
 8004fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff0:	464a      	mov	r2, r9
 8004ff2:	6921      	ldr	r1, [r4, #16]
 8004ff4:	f000 face 	bl	8005594 <memcpy>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	6126      	str	r6, [r4, #16]
 8005006:	444e      	add	r6, r9
 8005008:	6026      	str	r6, [r4, #0]
 800500a:	463e      	mov	r6, r7
 800500c:	6165      	str	r5, [r4, #20]
 800500e:	eba5 0509 	sub.w	r5, r5, r9
 8005012:	60a5      	str	r5, [r4, #8]
 8005014:	42be      	cmp	r6, r7
 8005016:	d900      	bls.n	800501a <__ssputs_r+0x86>
 8005018:	463e      	mov	r6, r7
 800501a:	4632      	mov	r2, r6
 800501c:	4641      	mov	r1, r8
 800501e:	6820      	ldr	r0, [r4, #0]
 8005020:	f000 fac6 	bl	80055b0 <memmove>
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	1b9b      	subs	r3, r3, r6
 800502a:	4432      	add	r2, r6
 800502c:	2000      	movs	r0, #0
 800502e:	60a3      	str	r3, [r4, #8]
 8005030:	6022      	str	r2, [r4, #0]
 8005032:	e7db      	b.n	8004fec <__ssputs_r+0x58>
 8005034:	462a      	mov	r2, r5
 8005036:	f000 fb7b 	bl	8005730 <_realloc_r>
 800503a:	4606      	mov	r6, r0
 800503c:	2800      	cmp	r0, #0
 800503e:	d1e1      	bne.n	8005004 <__ssputs_r+0x70>
 8005040:	4650      	mov	r0, sl
 8005042:	6921      	ldr	r1, [r4, #16]
 8005044:	f000 face 	bl	80055e4 <_free_r>
 8005048:	e7c7      	b.n	8004fda <__ssputs_r+0x46>
	...

0800504c <_svfiprintf_r>:
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	4698      	mov	r8, r3
 8005052:	898b      	ldrh	r3, [r1, #12]
 8005054:	4607      	mov	r7, r0
 8005056:	061b      	lsls	r3, r3, #24
 8005058:	460d      	mov	r5, r1
 800505a:	4614      	mov	r4, r2
 800505c:	b09d      	sub	sp, #116	; 0x74
 800505e:	d50e      	bpl.n	800507e <_svfiprintf_r+0x32>
 8005060:	690b      	ldr	r3, [r1, #16]
 8005062:	b963      	cbnz	r3, 800507e <_svfiprintf_r+0x32>
 8005064:	2140      	movs	r1, #64	; 0x40
 8005066:	f000 fb09 	bl	800567c <_malloc_r>
 800506a:	6028      	str	r0, [r5, #0]
 800506c:	6128      	str	r0, [r5, #16]
 800506e:	b920      	cbnz	r0, 800507a <_svfiprintf_r+0x2e>
 8005070:	230c      	movs	r3, #12
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	e0d1      	b.n	800521e <_svfiprintf_r+0x1d2>
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	616b      	str	r3, [r5, #20]
 800507e:	2300      	movs	r3, #0
 8005080:	9309      	str	r3, [sp, #36]	; 0x24
 8005082:	2320      	movs	r3, #32
 8005084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005088:	2330      	movs	r3, #48	; 0x30
 800508a:	f04f 0901 	mov.w	r9, #1
 800508e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005092:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005238 <_svfiprintf_r+0x1ec>
 8005096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800509a:	4623      	mov	r3, r4
 800509c:	469a      	mov	sl, r3
 800509e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050a2:	b10a      	cbz	r2, 80050a8 <_svfiprintf_r+0x5c>
 80050a4:	2a25      	cmp	r2, #37	; 0x25
 80050a6:	d1f9      	bne.n	800509c <_svfiprintf_r+0x50>
 80050a8:	ebba 0b04 	subs.w	fp, sl, r4
 80050ac:	d00b      	beq.n	80050c6 <_svfiprintf_r+0x7a>
 80050ae:	465b      	mov	r3, fp
 80050b0:	4622      	mov	r2, r4
 80050b2:	4629      	mov	r1, r5
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff ff6d 	bl	8004f94 <__ssputs_r>
 80050ba:	3001      	adds	r0, #1
 80050bc:	f000 80aa 	beq.w	8005214 <_svfiprintf_r+0x1c8>
 80050c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c2:	445a      	add	r2, fp
 80050c4:	9209      	str	r2, [sp, #36]	; 0x24
 80050c6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80a2 	beq.w	8005214 <_svfiprintf_r+0x1c8>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050da:	f10a 0a01 	add.w	sl, sl, #1
 80050de:	9304      	str	r3, [sp, #16]
 80050e0:	9307      	str	r3, [sp, #28]
 80050e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e6:	931a      	str	r3, [sp, #104]	; 0x68
 80050e8:	4654      	mov	r4, sl
 80050ea:	2205      	movs	r2, #5
 80050ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f0:	4851      	ldr	r0, [pc, #324]	; (8005238 <_svfiprintf_r+0x1ec>)
 80050f2:	f000 fa41 	bl	8005578 <memchr>
 80050f6:	9a04      	ldr	r2, [sp, #16]
 80050f8:	b9d8      	cbnz	r0, 8005132 <_svfiprintf_r+0xe6>
 80050fa:	06d0      	lsls	r0, r2, #27
 80050fc:	bf44      	itt	mi
 80050fe:	2320      	movmi	r3, #32
 8005100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005104:	0711      	lsls	r1, r2, #28
 8005106:	bf44      	itt	mi
 8005108:	232b      	movmi	r3, #43	; 0x2b
 800510a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800510e:	f89a 3000 	ldrb.w	r3, [sl]
 8005112:	2b2a      	cmp	r3, #42	; 0x2a
 8005114:	d015      	beq.n	8005142 <_svfiprintf_r+0xf6>
 8005116:	4654      	mov	r4, sl
 8005118:	2000      	movs	r0, #0
 800511a:	f04f 0c0a 	mov.w	ip, #10
 800511e:	9a07      	ldr	r2, [sp, #28]
 8005120:	4621      	mov	r1, r4
 8005122:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005126:	3b30      	subs	r3, #48	; 0x30
 8005128:	2b09      	cmp	r3, #9
 800512a:	d94e      	bls.n	80051ca <_svfiprintf_r+0x17e>
 800512c:	b1b0      	cbz	r0, 800515c <_svfiprintf_r+0x110>
 800512e:	9207      	str	r2, [sp, #28]
 8005130:	e014      	b.n	800515c <_svfiprintf_r+0x110>
 8005132:	eba0 0308 	sub.w	r3, r0, r8
 8005136:	fa09 f303 	lsl.w	r3, r9, r3
 800513a:	4313      	orrs	r3, r2
 800513c:	46a2      	mov	sl, r4
 800513e:	9304      	str	r3, [sp, #16]
 8005140:	e7d2      	b.n	80050e8 <_svfiprintf_r+0x9c>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	1d19      	adds	r1, r3, #4
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	9103      	str	r1, [sp, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	bfbb      	ittet	lt
 800514e:	425b      	neglt	r3, r3
 8005150:	f042 0202 	orrlt.w	r2, r2, #2
 8005154:	9307      	strge	r3, [sp, #28]
 8005156:	9307      	strlt	r3, [sp, #28]
 8005158:	bfb8      	it	lt
 800515a:	9204      	strlt	r2, [sp, #16]
 800515c:	7823      	ldrb	r3, [r4, #0]
 800515e:	2b2e      	cmp	r3, #46	; 0x2e
 8005160:	d10c      	bne.n	800517c <_svfiprintf_r+0x130>
 8005162:	7863      	ldrb	r3, [r4, #1]
 8005164:	2b2a      	cmp	r3, #42	; 0x2a
 8005166:	d135      	bne.n	80051d4 <_svfiprintf_r+0x188>
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	3402      	adds	r4, #2
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	9203      	str	r2, [sp, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	bfb8      	it	lt
 8005176:	f04f 33ff 	movlt.w	r3, #4294967295
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005248 <_svfiprintf_r+0x1fc>
 8005180:	2203      	movs	r2, #3
 8005182:	4650      	mov	r0, sl
 8005184:	7821      	ldrb	r1, [r4, #0]
 8005186:	f000 f9f7 	bl	8005578 <memchr>
 800518a:	b140      	cbz	r0, 800519e <_svfiprintf_r+0x152>
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	eba0 000a 	sub.w	r0, r0, sl
 8005192:	fa03 f000 	lsl.w	r0, r3, r0
 8005196:	9b04      	ldr	r3, [sp, #16]
 8005198:	3401      	adds	r4, #1
 800519a:	4303      	orrs	r3, r0
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a2:	2206      	movs	r2, #6
 80051a4:	4825      	ldr	r0, [pc, #148]	; (800523c <_svfiprintf_r+0x1f0>)
 80051a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051aa:	f000 f9e5 	bl	8005578 <memchr>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d038      	beq.n	8005224 <_svfiprintf_r+0x1d8>
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <_svfiprintf_r+0x1f4>)
 80051b4:	bb1b      	cbnz	r3, 80051fe <_svfiprintf_r+0x1b2>
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	3307      	adds	r3, #7
 80051ba:	f023 0307 	bic.w	r3, r3, #7
 80051be:	3308      	adds	r3, #8
 80051c0:	9303      	str	r3, [sp, #12]
 80051c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c4:	4433      	add	r3, r6
 80051c6:	9309      	str	r3, [sp, #36]	; 0x24
 80051c8:	e767      	b.n	800509a <_svfiprintf_r+0x4e>
 80051ca:	460c      	mov	r4, r1
 80051cc:	2001      	movs	r0, #1
 80051ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80051d2:	e7a5      	b.n	8005120 <_svfiprintf_r+0xd4>
 80051d4:	2300      	movs	r3, #0
 80051d6:	f04f 0c0a 	mov.w	ip, #10
 80051da:	4619      	mov	r1, r3
 80051dc:	3401      	adds	r4, #1
 80051de:	9305      	str	r3, [sp, #20]
 80051e0:	4620      	mov	r0, r4
 80051e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051e6:	3a30      	subs	r2, #48	; 0x30
 80051e8:	2a09      	cmp	r2, #9
 80051ea:	d903      	bls.n	80051f4 <_svfiprintf_r+0x1a8>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0c5      	beq.n	800517c <_svfiprintf_r+0x130>
 80051f0:	9105      	str	r1, [sp, #20]
 80051f2:	e7c3      	b.n	800517c <_svfiprintf_r+0x130>
 80051f4:	4604      	mov	r4, r0
 80051f6:	2301      	movs	r3, #1
 80051f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80051fc:	e7f0      	b.n	80051e0 <_svfiprintf_r+0x194>
 80051fe:	ab03      	add	r3, sp, #12
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	462a      	mov	r2, r5
 8005204:	4638      	mov	r0, r7
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <_svfiprintf_r+0x1f8>)
 8005208:	a904      	add	r1, sp, #16
 800520a:	f3af 8000 	nop.w
 800520e:	1c42      	adds	r2, r0, #1
 8005210:	4606      	mov	r6, r0
 8005212:	d1d6      	bne.n	80051c2 <_svfiprintf_r+0x176>
 8005214:	89ab      	ldrh	r3, [r5, #12]
 8005216:	065b      	lsls	r3, r3, #25
 8005218:	f53f af2c 	bmi.w	8005074 <_svfiprintf_r+0x28>
 800521c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800521e:	b01d      	add	sp, #116	; 0x74
 8005220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005224:	ab03      	add	r3, sp, #12
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	462a      	mov	r2, r5
 800522a:	4638      	mov	r0, r7
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <_svfiprintf_r+0x1f8>)
 800522e:	a904      	add	r1, sp, #16
 8005230:	f000 f87c 	bl	800532c <_printf_i>
 8005234:	e7eb      	b.n	800520e <_svfiprintf_r+0x1c2>
 8005236:	bf00      	nop
 8005238:	08005906 	.word	0x08005906
 800523c:	08005910 	.word	0x08005910
 8005240:	00000000 	.word	0x00000000
 8005244:	08004f95 	.word	0x08004f95
 8005248:	0800590c 	.word	0x0800590c

0800524c <_printf_common>:
 800524c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	4616      	mov	r6, r2
 8005252:	4699      	mov	r9, r3
 8005254:	688a      	ldr	r2, [r1, #8]
 8005256:	690b      	ldr	r3, [r1, #16]
 8005258:	4607      	mov	r7, r0
 800525a:	4293      	cmp	r3, r2
 800525c:	bfb8      	it	lt
 800525e:	4613      	movlt	r3, r2
 8005260:	6033      	str	r3, [r6, #0]
 8005262:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005266:	460c      	mov	r4, r1
 8005268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800526c:	b10a      	cbz	r2, 8005272 <_printf_common+0x26>
 800526e:	3301      	adds	r3, #1
 8005270:	6033      	str	r3, [r6, #0]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	0699      	lsls	r1, r3, #26
 8005276:	bf42      	ittt	mi
 8005278:	6833      	ldrmi	r3, [r6, #0]
 800527a:	3302      	addmi	r3, #2
 800527c:	6033      	strmi	r3, [r6, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	f015 0506 	ands.w	r5, r5, #6
 8005284:	d106      	bne.n	8005294 <_printf_common+0x48>
 8005286:	f104 0a19 	add.w	sl, r4, #25
 800528a:	68e3      	ldr	r3, [r4, #12]
 800528c:	6832      	ldr	r2, [r6, #0]
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	42ab      	cmp	r3, r5
 8005292:	dc28      	bgt.n	80052e6 <_printf_common+0x9a>
 8005294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005298:	1e13      	subs	r3, r2, #0
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	bf18      	it	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	0692      	lsls	r2, r2, #26
 80052a2:	d42d      	bmi.n	8005300 <_printf_common+0xb4>
 80052a4:	4649      	mov	r1, r9
 80052a6:	4638      	mov	r0, r7
 80052a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ac:	47c0      	blx	r8
 80052ae:	3001      	adds	r0, #1
 80052b0:	d020      	beq.n	80052f4 <_printf_common+0xa8>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	68e5      	ldr	r5, [r4, #12]
 80052b6:	f003 0306 	and.w	r3, r3, #6
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	bf18      	it	ne
 80052be:	2500      	movne	r5, #0
 80052c0:	6832      	ldr	r2, [r6, #0]
 80052c2:	f04f 0600 	mov.w	r6, #0
 80052c6:	68a3      	ldr	r3, [r4, #8]
 80052c8:	bf08      	it	eq
 80052ca:	1aad      	subeq	r5, r5, r2
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	bf08      	it	eq
 80052d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bfc4      	itt	gt
 80052d8:	1a9b      	subgt	r3, r3, r2
 80052da:	18ed      	addgt	r5, r5, r3
 80052dc:	341a      	adds	r4, #26
 80052de:	42b5      	cmp	r5, r6
 80052e0:	d11a      	bne.n	8005318 <_printf_common+0xcc>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e008      	b.n	80052f8 <_printf_common+0xac>
 80052e6:	2301      	movs	r3, #1
 80052e8:	4652      	mov	r2, sl
 80052ea:	4649      	mov	r1, r9
 80052ec:	4638      	mov	r0, r7
 80052ee:	47c0      	blx	r8
 80052f0:	3001      	adds	r0, #1
 80052f2:	d103      	bne.n	80052fc <_printf_common+0xb0>
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7c4      	b.n	800528a <_printf_common+0x3e>
 8005300:	2030      	movs	r0, #48	; 0x30
 8005302:	18e1      	adds	r1, r4, r3
 8005304:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800530e:	4422      	add	r2, r4
 8005310:	3302      	adds	r3, #2
 8005312:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005316:	e7c5      	b.n	80052a4 <_printf_common+0x58>
 8005318:	2301      	movs	r3, #1
 800531a:	4622      	mov	r2, r4
 800531c:	4649      	mov	r1, r9
 800531e:	4638      	mov	r0, r7
 8005320:	47c0      	blx	r8
 8005322:	3001      	adds	r0, #1
 8005324:	d0e6      	beq.n	80052f4 <_printf_common+0xa8>
 8005326:	3601      	adds	r6, #1
 8005328:	e7d9      	b.n	80052de <_printf_common+0x92>
	...

0800532c <_printf_i>:
 800532c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	460c      	mov	r4, r1
 8005332:	7e27      	ldrb	r7, [r4, #24]
 8005334:	4691      	mov	r9, r2
 8005336:	2f78      	cmp	r7, #120	; 0x78
 8005338:	4680      	mov	r8, r0
 800533a:	469a      	mov	sl, r3
 800533c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800533e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005342:	d807      	bhi.n	8005354 <_printf_i+0x28>
 8005344:	2f62      	cmp	r7, #98	; 0x62
 8005346:	d80a      	bhi.n	800535e <_printf_i+0x32>
 8005348:	2f00      	cmp	r7, #0
 800534a:	f000 80d9 	beq.w	8005500 <_printf_i+0x1d4>
 800534e:	2f58      	cmp	r7, #88	; 0x58
 8005350:	f000 80a4 	beq.w	800549c <_printf_i+0x170>
 8005354:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800535c:	e03a      	b.n	80053d4 <_printf_i+0xa8>
 800535e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005362:	2b15      	cmp	r3, #21
 8005364:	d8f6      	bhi.n	8005354 <_printf_i+0x28>
 8005366:	a001      	add	r0, pc, #4	; (adr r0, 800536c <_printf_i+0x40>)
 8005368:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053d9 	.word	0x080053d9
 8005374:	08005355 	.word	0x08005355
 8005378:	08005355 	.word	0x08005355
 800537c:	08005355 	.word	0x08005355
 8005380:	08005355 	.word	0x08005355
 8005384:	080053d9 	.word	0x080053d9
 8005388:	08005355 	.word	0x08005355
 800538c:	08005355 	.word	0x08005355
 8005390:	08005355 	.word	0x08005355
 8005394:	08005355 	.word	0x08005355
 8005398:	080054e7 	.word	0x080054e7
 800539c:	08005409 	.word	0x08005409
 80053a0:	080054c9 	.word	0x080054c9
 80053a4:	08005355 	.word	0x08005355
 80053a8:	08005355 	.word	0x08005355
 80053ac:	08005509 	.word	0x08005509
 80053b0:	08005355 	.word	0x08005355
 80053b4:	08005409 	.word	0x08005409
 80053b8:	08005355 	.word	0x08005355
 80053bc:	08005355 	.word	0x08005355
 80053c0:	080054d1 	.word	0x080054d1
 80053c4:	680b      	ldr	r3, [r1, #0]
 80053c6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053ca:	1d1a      	adds	r2, r3, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	600a      	str	r2, [r1, #0]
 80053d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d4:	2301      	movs	r3, #1
 80053d6:	e0a4      	b.n	8005522 <_printf_i+0x1f6>
 80053d8:	6825      	ldr	r5, [r4, #0]
 80053da:	6808      	ldr	r0, [r1, #0]
 80053dc:	062e      	lsls	r6, r5, #24
 80053de:	f100 0304 	add.w	r3, r0, #4
 80053e2:	d50a      	bpl.n	80053fa <_printf_i+0xce>
 80053e4:	6805      	ldr	r5, [r0, #0]
 80053e6:	600b      	str	r3, [r1, #0]
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	da03      	bge.n	80053f4 <_printf_i+0xc8>
 80053ec:	232d      	movs	r3, #45	; 0x2d
 80053ee:	426d      	negs	r5, r5
 80053f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f4:	230a      	movs	r3, #10
 80053f6:	485e      	ldr	r0, [pc, #376]	; (8005570 <_printf_i+0x244>)
 80053f8:	e019      	b.n	800542e <_printf_i+0x102>
 80053fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053fe:	6805      	ldr	r5, [r0, #0]
 8005400:	600b      	str	r3, [r1, #0]
 8005402:	bf18      	it	ne
 8005404:	b22d      	sxthne	r5, r5
 8005406:	e7ef      	b.n	80053e8 <_printf_i+0xbc>
 8005408:	680b      	ldr	r3, [r1, #0]
 800540a:	6825      	ldr	r5, [r4, #0]
 800540c:	1d18      	adds	r0, r3, #4
 800540e:	6008      	str	r0, [r1, #0]
 8005410:	0628      	lsls	r0, r5, #24
 8005412:	d501      	bpl.n	8005418 <_printf_i+0xec>
 8005414:	681d      	ldr	r5, [r3, #0]
 8005416:	e002      	b.n	800541e <_printf_i+0xf2>
 8005418:	0669      	lsls	r1, r5, #25
 800541a:	d5fb      	bpl.n	8005414 <_printf_i+0xe8>
 800541c:	881d      	ldrh	r5, [r3, #0]
 800541e:	2f6f      	cmp	r7, #111	; 0x6f
 8005420:	bf0c      	ite	eq
 8005422:	2308      	moveq	r3, #8
 8005424:	230a      	movne	r3, #10
 8005426:	4852      	ldr	r0, [pc, #328]	; (8005570 <_printf_i+0x244>)
 8005428:	2100      	movs	r1, #0
 800542a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800542e:	6866      	ldr	r6, [r4, #4]
 8005430:	2e00      	cmp	r6, #0
 8005432:	bfa8      	it	ge
 8005434:	6821      	ldrge	r1, [r4, #0]
 8005436:	60a6      	str	r6, [r4, #8]
 8005438:	bfa4      	itt	ge
 800543a:	f021 0104 	bicge.w	r1, r1, #4
 800543e:	6021      	strge	r1, [r4, #0]
 8005440:	b90d      	cbnz	r5, 8005446 <_printf_i+0x11a>
 8005442:	2e00      	cmp	r6, #0
 8005444:	d04d      	beq.n	80054e2 <_printf_i+0x1b6>
 8005446:	4616      	mov	r6, r2
 8005448:	fbb5 f1f3 	udiv	r1, r5, r3
 800544c:	fb03 5711 	mls	r7, r3, r1, r5
 8005450:	5dc7      	ldrb	r7, [r0, r7]
 8005452:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005456:	462f      	mov	r7, r5
 8005458:	42bb      	cmp	r3, r7
 800545a:	460d      	mov	r5, r1
 800545c:	d9f4      	bls.n	8005448 <_printf_i+0x11c>
 800545e:	2b08      	cmp	r3, #8
 8005460:	d10b      	bne.n	800547a <_printf_i+0x14e>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	07df      	lsls	r7, r3, #31
 8005466:	d508      	bpl.n	800547a <_printf_i+0x14e>
 8005468:	6923      	ldr	r3, [r4, #16]
 800546a:	6861      	ldr	r1, [r4, #4]
 800546c:	4299      	cmp	r1, r3
 800546e:	bfde      	ittt	le
 8005470:	2330      	movle	r3, #48	; 0x30
 8005472:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005476:	f106 36ff 	addle.w	r6, r6, #4294967295
 800547a:	1b92      	subs	r2, r2, r6
 800547c:	6122      	str	r2, [r4, #16]
 800547e:	464b      	mov	r3, r9
 8005480:	4621      	mov	r1, r4
 8005482:	4640      	mov	r0, r8
 8005484:	f8cd a000 	str.w	sl, [sp]
 8005488:	aa03      	add	r2, sp, #12
 800548a:	f7ff fedf 	bl	800524c <_printf_common>
 800548e:	3001      	adds	r0, #1
 8005490:	d14c      	bne.n	800552c <_printf_i+0x200>
 8005492:	f04f 30ff 	mov.w	r0, #4294967295
 8005496:	b004      	add	sp, #16
 8005498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549c:	4834      	ldr	r0, [pc, #208]	; (8005570 <_printf_i+0x244>)
 800549e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054a2:	680e      	ldr	r6, [r1, #0]
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80054aa:	061f      	lsls	r7, r3, #24
 80054ac:	600e      	str	r6, [r1, #0]
 80054ae:	d514      	bpl.n	80054da <_printf_i+0x1ae>
 80054b0:	07d9      	lsls	r1, r3, #31
 80054b2:	bf44      	itt	mi
 80054b4:	f043 0320 	orrmi.w	r3, r3, #32
 80054b8:	6023      	strmi	r3, [r4, #0]
 80054ba:	b91d      	cbnz	r5, 80054c4 <_printf_i+0x198>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	f023 0320 	bic.w	r3, r3, #32
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	2310      	movs	r3, #16
 80054c6:	e7af      	b.n	8005428 <_printf_i+0xfc>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	f043 0320 	orr.w	r3, r3, #32
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	2378      	movs	r3, #120	; 0x78
 80054d2:	4828      	ldr	r0, [pc, #160]	; (8005574 <_printf_i+0x248>)
 80054d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054d8:	e7e3      	b.n	80054a2 <_printf_i+0x176>
 80054da:	065e      	lsls	r6, r3, #25
 80054dc:	bf48      	it	mi
 80054de:	b2ad      	uxthmi	r5, r5
 80054e0:	e7e6      	b.n	80054b0 <_printf_i+0x184>
 80054e2:	4616      	mov	r6, r2
 80054e4:	e7bb      	b.n	800545e <_printf_i+0x132>
 80054e6:	680b      	ldr	r3, [r1, #0]
 80054e8:	6826      	ldr	r6, [r4, #0]
 80054ea:	1d1d      	adds	r5, r3, #4
 80054ec:	6960      	ldr	r0, [r4, #20]
 80054ee:	600d      	str	r5, [r1, #0]
 80054f0:	0635      	lsls	r5, r6, #24
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	d501      	bpl.n	80054fa <_printf_i+0x1ce>
 80054f6:	6018      	str	r0, [r3, #0]
 80054f8:	e002      	b.n	8005500 <_printf_i+0x1d4>
 80054fa:	0671      	lsls	r1, r6, #25
 80054fc:	d5fb      	bpl.n	80054f6 <_printf_i+0x1ca>
 80054fe:	8018      	strh	r0, [r3, #0]
 8005500:	2300      	movs	r3, #0
 8005502:	4616      	mov	r6, r2
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	e7ba      	b.n	800547e <_printf_i+0x152>
 8005508:	680b      	ldr	r3, [r1, #0]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	600a      	str	r2, [r1, #0]
 800550e:	681e      	ldr	r6, [r3, #0]
 8005510:	2100      	movs	r1, #0
 8005512:	4630      	mov	r0, r6
 8005514:	6862      	ldr	r2, [r4, #4]
 8005516:	f000 f82f 	bl	8005578 <memchr>
 800551a:	b108      	cbz	r0, 8005520 <_printf_i+0x1f4>
 800551c:	1b80      	subs	r0, r0, r6
 800551e:	6060      	str	r0, [r4, #4]
 8005520:	6863      	ldr	r3, [r4, #4]
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	2300      	movs	r3, #0
 8005526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552a:	e7a8      	b.n	800547e <_printf_i+0x152>
 800552c:	4632      	mov	r2, r6
 800552e:	4649      	mov	r1, r9
 8005530:	4640      	mov	r0, r8
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	47d0      	blx	sl
 8005536:	3001      	adds	r0, #1
 8005538:	d0ab      	beq.n	8005492 <_printf_i+0x166>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	079b      	lsls	r3, r3, #30
 800553e:	d413      	bmi.n	8005568 <_printf_i+0x23c>
 8005540:	68e0      	ldr	r0, [r4, #12]
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	4298      	cmp	r0, r3
 8005546:	bfb8      	it	lt
 8005548:	4618      	movlt	r0, r3
 800554a:	e7a4      	b.n	8005496 <_printf_i+0x16a>
 800554c:	2301      	movs	r3, #1
 800554e:	4632      	mov	r2, r6
 8005550:	4649      	mov	r1, r9
 8005552:	4640      	mov	r0, r8
 8005554:	47d0      	blx	sl
 8005556:	3001      	adds	r0, #1
 8005558:	d09b      	beq.n	8005492 <_printf_i+0x166>
 800555a:	3501      	adds	r5, #1
 800555c:	68e3      	ldr	r3, [r4, #12]
 800555e:	9903      	ldr	r1, [sp, #12]
 8005560:	1a5b      	subs	r3, r3, r1
 8005562:	42ab      	cmp	r3, r5
 8005564:	dcf2      	bgt.n	800554c <_printf_i+0x220>
 8005566:	e7eb      	b.n	8005540 <_printf_i+0x214>
 8005568:	2500      	movs	r5, #0
 800556a:	f104 0619 	add.w	r6, r4, #25
 800556e:	e7f5      	b.n	800555c <_printf_i+0x230>
 8005570:	08005917 	.word	0x08005917
 8005574:	08005928 	.word	0x08005928

08005578 <memchr>:
 8005578:	4603      	mov	r3, r0
 800557a:	b510      	push	{r4, lr}
 800557c:	b2c9      	uxtb	r1, r1
 800557e:	4402      	add	r2, r0
 8005580:	4293      	cmp	r3, r2
 8005582:	4618      	mov	r0, r3
 8005584:	d101      	bne.n	800558a <memchr+0x12>
 8005586:	2000      	movs	r0, #0
 8005588:	e003      	b.n	8005592 <memchr+0x1a>
 800558a:	7804      	ldrb	r4, [r0, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	428c      	cmp	r4, r1
 8005590:	d1f6      	bne.n	8005580 <memchr+0x8>
 8005592:	bd10      	pop	{r4, pc}

08005594 <memcpy>:
 8005594:	440a      	add	r2, r1
 8005596:	4291      	cmp	r1, r2
 8005598:	f100 33ff 	add.w	r3, r0, #4294967295
 800559c:	d100      	bne.n	80055a0 <memcpy+0xc>
 800559e:	4770      	bx	lr
 80055a0:	b510      	push	{r4, lr}
 80055a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ac:	d1f9      	bne.n	80055a2 <memcpy+0xe>
 80055ae:	bd10      	pop	{r4, pc}

080055b0 <memmove>:
 80055b0:	4288      	cmp	r0, r1
 80055b2:	b510      	push	{r4, lr}
 80055b4:	eb01 0402 	add.w	r4, r1, r2
 80055b8:	d902      	bls.n	80055c0 <memmove+0x10>
 80055ba:	4284      	cmp	r4, r0
 80055bc:	4623      	mov	r3, r4
 80055be:	d807      	bhi.n	80055d0 <memmove+0x20>
 80055c0:	1e43      	subs	r3, r0, #1
 80055c2:	42a1      	cmp	r1, r4
 80055c4:	d008      	beq.n	80055d8 <memmove+0x28>
 80055c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ce:	e7f8      	b.n	80055c2 <memmove+0x12>
 80055d0:	4601      	mov	r1, r0
 80055d2:	4402      	add	r2, r0
 80055d4:	428a      	cmp	r2, r1
 80055d6:	d100      	bne.n	80055da <memmove+0x2a>
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055e2:	e7f7      	b.n	80055d4 <memmove+0x24>

080055e4 <_free_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4605      	mov	r5, r0
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d043      	beq.n	8005674 <_free_r+0x90>
 80055ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f0:	1f0c      	subs	r4, r1, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bfb8      	it	lt
 80055f6:	18e4      	addlt	r4, r4, r3
 80055f8:	f000 f8d0 	bl	800579c <__malloc_lock>
 80055fc:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <_free_r+0x94>)
 80055fe:	6813      	ldr	r3, [r2, #0]
 8005600:	4610      	mov	r0, r2
 8005602:	b933      	cbnz	r3, 8005612 <_free_r+0x2e>
 8005604:	6063      	str	r3, [r4, #4]
 8005606:	6014      	str	r4, [r2, #0]
 8005608:	4628      	mov	r0, r5
 800560a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800560e:	f000 b8cb 	b.w	80057a8 <__malloc_unlock>
 8005612:	42a3      	cmp	r3, r4
 8005614:	d90a      	bls.n	800562c <_free_r+0x48>
 8005616:	6821      	ldr	r1, [r4, #0]
 8005618:	1862      	adds	r2, r4, r1
 800561a:	4293      	cmp	r3, r2
 800561c:	bf01      	itttt	eq
 800561e:	681a      	ldreq	r2, [r3, #0]
 8005620:	685b      	ldreq	r3, [r3, #4]
 8005622:	1852      	addeq	r2, r2, r1
 8005624:	6022      	streq	r2, [r4, #0]
 8005626:	6063      	str	r3, [r4, #4]
 8005628:	6004      	str	r4, [r0, #0]
 800562a:	e7ed      	b.n	8005608 <_free_r+0x24>
 800562c:	461a      	mov	r2, r3
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	b10b      	cbz	r3, 8005636 <_free_r+0x52>
 8005632:	42a3      	cmp	r3, r4
 8005634:	d9fa      	bls.n	800562c <_free_r+0x48>
 8005636:	6811      	ldr	r1, [r2, #0]
 8005638:	1850      	adds	r0, r2, r1
 800563a:	42a0      	cmp	r0, r4
 800563c:	d10b      	bne.n	8005656 <_free_r+0x72>
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	4401      	add	r1, r0
 8005642:	1850      	adds	r0, r2, r1
 8005644:	4283      	cmp	r3, r0
 8005646:	6011      	str	r1, [r2, #0]
 8005648:	d1de      	bne.n	8005608 <_free_r+0x24>
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4401      	add	r1, r0
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	6053      	str	r3, [r2, #4]
 8005654:	e7d8      	b.n	8005608 <_free_r+0x24>
 8005656:	d902      	bls.n	800565e <_free_r+0x7a>
 8005658:	230c      	movs	r3, #12
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	e7d4      	b.n	8005608 <_free_r+0x24>
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	1821      	adds	r1, r4, r0
 8005662:	428b      	cmp	r3, r1
 8005664:	bf01      	itttt	eq
 8005666:	6819      	ldreq	r1, [r3, #0]
 8005668:	685b      	ldreq	r3, [r3, #4]
 800566a:	1809      	addeq	r1, r1, r0
 800566c:	6021      	streq	r1, [r4, #0]
 800566e:	6063      	str	r3, [r4, #4]
 8005670:	6054      	str	r4, [r2, #4]
 8005672:	e7c9      	b.n	8005608 <_free_r+0x24>
 8005674:	bd38      	pop	{r3, r4, r5, pc}
 8005676:	bf00      	nop
 8005678:	20000244 	.word	0x20000244

0800567c <_malloc_r>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	1ccd      	adds	r5, r1, #3
 8005680:	f025 0503 	bic.w	r5, r5, #3
 8005684:	3508      	adds	r5, #8
 8005686:	2d0c      	cmp	r5, #12
 8005688:	bf38      	it	cc
 800568a:	250c      	movcc	r5, #12
 800568c:	2d00      	cmp	r5, #0
 800568e:	4606      	mov	r6, r0
 8005690:	db01      	blt.n	8005696 <_malloc_r+0x1a>
 8005692:	42a9      	cmp	r1, r5
 8005694:	d903      	bls.n	800569e <_malloc_r+0x22>
 8005696:	230c      	movs	r3, #12
 8005698:	6033      	str	r3, [r6, #0]
 800569a:	2000      	movs	r0, #0
 800569c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800569e:	f000 f87d 	bl	800579c <__malloc_lock>
 80056a2:	4921      	ldr	r1, [pc, #132]	; (8005728 <_malloc_r+0xac>)
 80056a4:	680a      	ldr	r2, [r1, #0]
 80056a6:	4614      	mov	r4, r2
 80056a8:	b99c      	cbnz	r4, 80056d2 <_malloc_r+0x56>
 80056aa:	4f20      	ldr	r7, [pc, #128]	; (800572c <_malloc_r+0xb0>)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	b923      	cbnz	r3, 80056ba <_malloc_r+0x3e>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4630      	mov	r0, r6
 80056b4:	f000 f862 	bl	800577c <_sbrk_r>
 80056b8:	6038      	str	r0, [r7, #0]
 80056ba:	4629      	mov	r1, r5
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 f85d 	bl	800577c <_sbrk_r>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	d123      	bne.n	800570e <_malloc_r+0x92>
 80056c6:	230c      	movs	r3, #12
 80056c8:	4630      	mov	r0, r6
 80056ca:	6033      	str	r3, [r6, #0]
 80056cc:	f000 f86c 	bl	80057a8 <__malloc_unlock>
 80056d0:	e7e3      	b.n	800569a <_malloc_r+0x1e>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	1b5b      	subs	r3, r3, r5
 80056d6:	d417      	bmi.n	8005708 <_malloc_r+0x8c>
 80056d8:	2b0b      	cmp	r3, #11
 80056da:	d903      	bls.n	80056e4 <_malloc_r+0x68>
 80056dc:	6023      	str	r3, [r4, #0]
 80056de:	441c      	add	r4, r3
 80056e0:	6025      	str	r5, [r4, #0]
 80056e2:	e004      	b.n	80056ee <_malloc_r+0x72>
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	42a2      	cmp	r2, r4
 80056e8:	bf0c      	ite	eq
 80056ea:	600b      	streq	r3, [r1, #0]
 80056ec:	6053      	strne	r3, [r2, #4]
 80056ee:	4630      	mov	r0, r6
 80056f0:	f000 f85a 	bl	80057a8 <__malloc_unlock>
 80056f4:	f104 000b 	add.w	r0, r4, #11
 80056f8:	1d23      	adds	r3, r4, #4
 80056fa:	f020 0007 	bic.w	r0, r0, #7
 80056fe:	1ac2      	subs	r2, r0, r3
 8005700:	d0cc      	beq.n	800569c <_malloc_r+0x20>
 8005702:	1a1b      	subs	r3, r3, r0
 8005704:	50a3      	str	r3, [r4, r2]
 8005706:	e7c9      	b.n	800569c <_malloc_r+0x20>
 8005708:	4622      	mov	r2, r4
 800570a:	6864      	ldr	r4, [r4, #4]
 800570c:	e7cc      	b.n	80056a8 <_malloc_r+0x2c>
 800570e:	1cc4      	adds	r4, r0, #3
 8005710:	f024 0403 	bic.w	r4, r4, #3
 8005714:	42a0      	cmp	r0, r4
 8005716:	d0e3      	beq.n	80056e0 <_malloc_r+0x64>
 8005718:	1a21      	subs	r1, r4, r0
 800571a:	4630      	mov	r0, r6
 800571c:	f000 f82e 	bl	800577c <_sbrk_r>
 8005720:	3001      	adds	r0, #1
 8005722:	d1dd      	bne.n	80056e0 <_malloc_r+0x64>
 8005724:	e7cf      	b.n	80056c6 <_malloc_r+0x4a>
 8005726:	bf00      	nop
 8005728:	20000244 	.word	0x20000244
 800572c:	20000248 	.word	0x20000248

08005730 <_realloc_r>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	4607      	mov	r7, r0
 8005734:	4614      	mov	r4, r2
 8005736:	460e      	mov	r6, r1
 8005738:	b921      	cbnz	r1, 8005744 <_realloc_r+0x14>
 800573a:	4611      	mov	r1, r2
 800573c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005740:	f7ff bf9c 	b.w	800567c <_malloc_r>
 8005744:	b922      	cbnz	r2, 8005750 <_realloc_r+0x20>
 8005746:	f7ff ff4d 	bl	80055e4 <_free_r>
 800574a:	4625      	mov	r5, r4
 800574c:	4628      	mov	r0, r5
 800574e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005750:	f000 f830 	bl	80057b4 <_malloc_usable_size_r>
 8005754:	42a0      	cmp	r0, r4
 8005756:	d20f      	bcs.n	8005778 <_realloc_r+0x48>
 8005758:	4621      	mov	r1, r4
 800575a:	4638      	mov	r0, r7
 800575c:	f7ff ff8e 	bl	800567c <_malloc_r>
 8005760:	4605      	mov	r5, r0
 8005762:	2800      	cmp	r0, #0
 8005764:	d0f2      	beq.n	800574c <_realloc_r+0x1c>
 8005766:	4631      	mov	r1, r6
 8005768:	4622      	mov	r2, r4
 800576a:	f7ff ff13 	bl	8005594 <memcpy>
 800576e:	4631      	mov	r1, r6
 8005770:	4638      	mov	r0, r7
 8005772:	f7ff ff37 	bl	80055e4 <_free_r>
 8005776:	e7e9      	b.n	800574c <_realloc_r+0x1c>
 8005778:	4635      	mov	r5, r6
 800577a:	e7e7      	b.n	800574c <_realloc_r+0x1c>

0800577c <_sbrk_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	2300      	movs	r3, #0
 8005780:	4d05      	ldr	r5, [pc, #20]	; (8005798 <_sbrk_r+0x1c>)
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fc fbd0 	bl	8001f2c <_sbrk>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_sbrk_r+0x1a>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_sbrk_r+0x1a>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	20000370 	.word	0x20000370

0800579c <__malloc_lock>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__malloc_lock+0x8>)
 800579e:	f000 b811 	b.w	80057c4 <__retarget_lock_acquire_recursive>
 80057a2:	bf00      	nop
 80057a4:	20000378 	.word	0x20000378

080057a8 <__malloc_unlock>:
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <__malloc_unlock+0x8>)
 80057aa:	f000 b80c 	b.w	80057c6 <__retarget_lock_release_recursive>
 80057ae:	bf00      	nop
 80057b0:	20000378 	.word	0x20000378

080057b4 <_malloc_usable_size_r>:
 80057b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057b8:	1f18      	subs	r0, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bfbc      	itt	lt
 80057be:	580b      	ldrlt	r3, [r1, r0]
 80057c0:	18c0      	addlt	r0, r0, r3
 80057c2:	4770      	bx	lr

080057c4 <__retarget_lock_acquire_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <__retarget_lock_release_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <_init>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr

080057d4 <_fini>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr
