
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000399c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad4  08003ad4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003ad4  08003ad4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ad4  08003ad4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad8  08003ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000060  08003b3c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003b3c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001064a  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bd  00000000  00000000  000306d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00033a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e59  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102a4  00000000  00000000  0004c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d94  00000000  00000000  0005c765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e34f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000e354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a90 	.word	0x08003a90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003a90 	.word	0x08003a90

0800014c <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000007c 	.word	0x2000007c

08000180 <subKeyProcess>:

void subKeyProcess(int i){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000007c 	.word	0x2000007c

080001a0 <ReadPin>:

GPIO_PinState ReadPin(int index){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d105      	bne.n	80001ba <ReadPin+0x1a>
 80001ae:	2102      	movs	r1, #2
 80001b0:	4812      	ldr	r0, [pc, #72]	; (80001fc <ReadPin+0x5c>)
 80001b2:	f001 fb53 	bl	800185c <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	e01b      	b.n	80001f2 <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d105      	bne.n	80001cc <ReadPin+0x2c>
 80001c0:	2110      	movs	r1, #16
 80001c2:	480e      	ldr	r0, [pc, #56]	; (80001fc <ReadPin+0x5c>)
 80001c4:	f001 fb4a 	bl	800185c <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	e012      	b.n	80001f2 <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d105      	bne.n	80001de <ReadPin+0x3e>
 80001d2:	2101      	movs	r1, #1
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <ReadPin+0x60>)
 80001d6:	f001 fb41 	bl	800185c <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	e009      	b.n	80001f2 <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b03      	cmp	r3, #3
 80001e2:	d105      	bne.n	80001f0 <ReadPin+0x50>
 80001e4:	2101      	movs	r1, #1
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <ReadPin+0x5c>)
 80001e8:	f001 fb38 	bl	800185c <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	e000      	b.n	80001f2 <ReadPin+0x52>
	else return 0;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <getKeyinput>:

void getKeyinput(){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e05c      	b.n	80002ca <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 8000210:	4a32      	ldr	r2, [pc, #200]	; (80002dc <getKeyinput+0xd8>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4931      	ldr	r1, [pc, #196]	; (80002e0 <getKeyinput+0xdc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000220:	4a30      	ldr	r2, [pc, #192]	; (80002e4 <getKeyinput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	492c      	ldr	r1, [pc, #176]	; (80002dc <getKeyinput+0xd8>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffb5 	bl	80001a0 <ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	4619      	mov	r1, r3
 800023a:	4a2a      	ldr	r2, [pc, #168]	; (80002e4 <getKeyinput+0xe0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <getKeyinput+0xdc>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4924      	ldr	r1, [pc, #144]	; (80002dc <getKeyinput+0xd8>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d136      	bne.n	80002c4 <getKeyinput+0xc0>
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <getKeyinput+0xd8>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4921      	ldr	r1, [pc, #132]	; (80002e4 <getKeyinput+0xe0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d12c      	bne.n	80002c4 <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 800026a:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <getKeyinput+0xe4>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	491c      	ldr	r1, [pc, #112]	; (80002e4 <getKeyinput+0xe0>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027a:	429a      	cmp	r2, r3
 800027c:	d014      	beq.n	80002a8 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <getKeyinput+0xe0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4918      	ldr	r1, [pc, #96]	; (80002e8 <getKeyinput+0xe4>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 800028e:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <getKeyinput+0xe4>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d114      	bne.n	80002c4 <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <getKeyinput+0xe8>)
 800029c:	22c8      	movs	r2, #200	; 0xc8
 800029e:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff6d 	bl	8000180 <subKeyProcess>
 80002a6:	e00d      	b.n	80002c4 <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <getKeyinput+0xe8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <getKeyinput+0xe8>)
 80002b0:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <getKeyinput+0xe8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d104      	bne.n	80002c4 <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <getKeyinput+0xe4>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2101      	movs	r1, #1
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	dd9f      	ble.n	8000210 <getKeyinput+0xc>
				}
			}
		}
	}

}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000010 	.word	0x20000010
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000020 	.word	0x20000020
 80002e8:	20000030 	.word	0x20000030
 80002ec:	20000040 	.word	0x20000040

080002f0 <buzzer>:
 */

#include "buzzer.h"

int buzzer_counter;
void buzzer(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	// the frequence is 1khz
	// input is the current counter value

	if (timer_flag[4] == 1){
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <buzzer+0x70>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d11a      	bne.n	8000332 <buzzer+0x42>
		setTimer(4,100);
 80002fc:	2164      	movs	r1, #100	; 0x64
 80002fe:	2004      	movs	r0, #4
 8000300:	f000 fd56 	bl	8000db0 <setTimer>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000304:	2140      	movs	r1, #64	; 0x40
 8000306:	4817      	ldr	r0, [pc, #92]	; (8000364 <buzzer+0x74>)
 8000308:	f001 fad7 	bl	80018ba <HAL_GPIO_TogglePin>
		buzzer_counter--;
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <buzzer+0x78>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3b01      	subs	r3, #1
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <buzzer+0x78>)
 8000314:	6013      	str	r3, [r2, #0]
		if (buzzer_counter<0){// reset the counter of buzzer
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <buzzer+0x78>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	da09      	bge.n	8000332 <buzzer+0x42>
			buzzer_counter = red_time/100;
 800031e:	4b13      	ldr	r3, [pc, #76]	; (800036c <buzzer+0x7c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a13      	ldr	r2, [pc, #76]	; (8000370 <buzzer+0x80>)
 8000324:	fb82 1203 	smull	r1, r2, r2, r3
 8000328:	1152      	asrs	r2, r2, #5
 800032a:	17db      	asrs	r3, r3, #31
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <buzzer+0x78>)
 8000330:	6013      	str	r3, [r2, #0]
		}
	}
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,100-(100/(red_time/100))*buzzer_counter);
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <buzzer+0x7c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <buzzer+0x80>)
 8000338:	fb82 1203 	smull	r1, r2, r2, r3
 800033c:	1152      	asrs	r2, r2, #5
 800033e:	17db      	asrs	r3, r3, #31
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	2264      	movs	r2, #100	; 0x64
 8000344:	fb92 f3f3 	sdiv	r3, r2, r3
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <buzzer+0x78>)
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	fb02 f303 	mul.w	r3, r2, r3
 8000350:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <buzzer+0x84>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200000c4 	.word	0x200000c4
 8000364:	40010800 	.word	0x40010800
 8000368:	200000ec 	.word	0x200000ec
 800036c:	20000048 	.word	0x20000048
 8000370:	51eb851f 	.word	0x51eb851f
 8000374:	200000f0 	.word	0x200000f0

08000378 <fsm_auto>:
int green_time = 3;
int red_time_tmp = 0 ; // temp variable for red time length
int yellow_time_tmp = 0 ;
int green_time_tmp = 0 ;

void fsm_auto(){
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	switch (status){
 800037c:	4b57      	ldr	r3, [pc, #348]	; (80004dc <fsm_auto+0x164>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	3b5a      	subs	r3, #90	; 0x5a
 8000382:	2b04      	cmp	r3, #4
 8000384:	f200 809e 	bhi.w	80004c4 <fsm_auto+0x14c>
 8000388:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <fsm_auto+0x18>)
 800038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038e:	bf00      	nop
 8000390:	080003a5 	.word	0x080003a5
 8000394:	080003c5 	.word	0x080003c5
 8000398:	08000401 	.word	0x08000401
 800039c:	08000445 	.word	0x08000445
 80003a0:	08000481 	.word	0x08000481
	case INIT:
		red_time_tmp = red_time; // time length = 5s, start at 4 and end at 0
 80003a4:	4b4e      	ldr	r3, [pc, #312]	; (80004e0 <fsm_auto+0x168>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a4e      	ldr	r2, [pc, #312]	; (80004e4 <fsm_auto+0x16c>)
 80003aa:	6013      	str	r3, [r2, #0]
		green_time_tmp = green_time;
 80003ac:	4b4e      	ldr	r3, [pc, #312]	; (80004e8 <fsm_auto+0x170>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a4e      	ldr	r2, [pc, #312]	; (80004ec <fsm_auto+0x174>)
 80003b2:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 fcfa 	bl	8000db0 <setTimer>
		status = AUTO_RED_GREEN;
 80003bc:	4b47      	ldr	r3, [pc, #284]	; (80004dc <fsm_auto+0x164>)
 80003be:	225b      	movs	r2, #91	; 0x5b
 80003c0:	601a      	str	r2, [r3, #0]
		break;
 80003c2:	e088      	b.n	80004d6 <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 80003c4:	4b4a      	ldr	r3, [pc, #296]	; (80004f0 <fsm_auto+0x178>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d17d      	bne.n	80004c8 <fsm_auto+0x150>
			red_time_tmp --;
 80003cc:	4b45      	ldr	r3, [pc, #276]	; (80004e4 <fsm_auto+0x16c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	4a44      	ldr	r2, [pc, #272]	; (80004e4 <fsm_auto+0x16c>)
 80003d4:	6013      	str	r3, [r2, #0]
			green_time_tmp --;
 80003d6:	4b45      	ldr	r3, [pc, #276]	; (80004ec <fsm_auto+0x174>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a43      	ldr	r2, [pc, #268]	; (80004ec <fsm_auto+0x174>)
 80003de:	6013      	str	r3, [r2, #0]
			if (green_time_tmp == 0){
 80003e0:	4b42      	ldr	r3, [pc, #264]	; (80004ec <fsm_auto+0x174>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d106      	bne.n	80003f6 <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 80003e8:	4b3c      	ldr	r3, [pc, #240]	; (80004dc <fsm_auto+0x164>)
 80003ea:	225c      	movs	r2, #92	; 0x5c
 80003ec:	601a      	str	r2, [r3, #0]
				yellow_time_tmp = yellow_time;
 80003ee:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <fsm_auto+0x17c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a41      	ldr	r2, [pc, #260]	; (80004f8 <fsm_auto+0x180>)
 80003f4:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80003f6:	2100      	movs	r1, #0
 80003f8:	2064      	movs	r0, #100	; 0x64
 80003fa:	f000 fcd9 	bl	8000db0 <setTimer>
		}
		break;
 80003fe:	e063      	b.n	80004c8 <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 8000400:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <fsm_auto+0x178>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d161      	bne.n	80004cc <fsm_auto+0x154>
			red_time_tmp --;
 8000408:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <fsm_auto+0x16c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	4a35      	ldr	r2, [pc, #212]	; (80004e4 <fsm_auto+0x16c>)
 8000410:	6013      	str	r3, [r2, #0]
			yellow_time_tmp --;
 8000412:	4b39      	ldr	r3, [pc, #228]	; (80004f8 <fsm_auto+0x180>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	3b01      	subs	r3, #1
 8000418:	4a37      	ldr	r2, [pc, #220]	; (80004f8 <fsm_auto+0x180>)
 800041a:	6013      	str	r3, [r2, #0]
			if (yellow_time_tmp == 0){
 800041c:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <fsm_auto+0x180>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10a      	bne.n	800043a <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 8000424:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <fsm_auto+0x164>)
 8000426:	225d      	movs	r2, #93	; 0x5d
 8000428:	601a      	str	r2, [r3, #0]
				red_time_tmp = red_time;
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <fsm_auto+0x168>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a2d      	ldr	r2, [pc, #180]	; (80004e4 <fsm_auto+0x16c>)
 8000430:	6013      	str	r3, [r2, #0]
				green_time_tmp = green_time;
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <fsm_auto+0x170>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <fsm_auto+0x174>)
 8000438:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 800043a:	2100      	movs	r1, #0
 800043c:	2064      	movs	r0, #100	; 0x64
 800043e:	f000 fcb7 	bl	8000db0 <setTimer>
		}
		break;
 8000442:	e043      	b.n	80004cc <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000444:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <fsm_auto+0x178>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d141      	bne.n	80004d0 <fsm_auto+0x158>
			red_time_tmp --;
 800044c:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <fsm_auto+0x16c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a24      	ldr	r2, [pc, #144]	; (80004e4 <fsm_auto+0x16c>)
 8000454:	6013      	str	r3, [r2, #0]
			green_time_tmp --;
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <fsm_auto+0x174>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a23      	ldr	r2, [pc, #140]	; (80004ec <fsm_auto+0x174>)
 800045e:	6013      	str	r3, [r2, #0]
			if (green_time_tmp == 0){
 8000460:	4b22      	ldr	r3, [pc, #136]	; (80004ec <fsm_auto+0x174>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d106      	bne.n	8000476 <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 8000468:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <fsm_auto+0x164>)
 800046a:	225e      	movs	r2, #94	; 0x5e
 800046c:	601a      	str	r2, [r3, #0]
				yellow_time_tmp = yellow_time;
 800046e:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <fsm_auto+0x17c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a21      	ldr	r2, [pc, #132]	; (80004f8 <fsm_auto+0x180>)
 8000474:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000476:	2100      	movs	r1, #0
 8000478:	2064      	movs	r0, #100	; 0x64
 800047a:	f000 fc99 	bl	8000db0 <setTimer>
		}
		break;
 800047e:	e027      	b.n	80004d0 <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <fsm_auto+0x178>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d125      	bne.n	80004d4 <fsm_auto+0x15c>
			red_time_tmp --;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <fsm_auto+0x16c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3b01      	subs	r3, #1
 800048e:	4a15      	ldr	r2, [pc, #84]	; (80004e4 <fsm_auto+0x16c>)
 8000490:	6013      	str	r3, [r2, #0]
			yellow_time_tmp --;
 8000492:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <fsm_auto+0x180>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3b01      	subs	r3, #1
 8000498:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <fsm_auto+0x180>)
 800049a:	6013      	str	r3, [r2, #0]
			if (yellow_time_tmp == 0){
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <fsm_auto+0x180>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10a      	bne.n	80004ba <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <fsm_auto+0x164>)
 80004a6:	225b      	movs	r2, #91	; 0x5b
 80004a8:	601a      	str	r2, [r3, #0]
				red_time_tmp  = red_time;
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <fsm_auto+0x168>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <fsm_auto+0x16c>)
 80004b0:	6013      	str	r3, [r2, #0]
				green_time_tmp = green_time;
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <fsm_auto+0x170>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <fsm_auto+0x174>)
 80004b8:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80004ba:	2100      	movs	r1, #0
 80004bc:	2064      	movs	r0, #100	; 0x64
 80004be:	f000 fc77 	bl	8000db0 <setTimer>
		}
		break;
 80004c2:	e007      	b.n	80004d4 <fsm_auto+0x15c>
	default: break;
 80004c4:	bf00      	nop
 80004c6:	e006      	b.n	80004d6 <fsm_auto+0x15e>
		break;
 80004c8:	bf00      	nop
 80004ca:	e004      	b.n	80004d6 <fsm_auto+0x15e>
		break;
 80004cc:	bf00      	nop
 80004ce:	e002      	b.n	80004d6 <fsm_auto+0x15e>
		break;
 80004d0:	bf00      	nop
 80004d2:	e000      	b.n	80004d6 <fsm_auto+0x15e>
		break;
 80004d4:	bf00      	nop
	}
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000044 	.word	0x20000044
 80004e0:	20000048 	.word	0x20000048
 80004e4:	2000008c 	.word	0x2000008c
 80004e8:	20000050 	.word	0x20000050
 80004ec:	20000094 	.word	0x20000094
 80004f0:	200000c4 	.word	0x200000c4
 80004f4:	2000004c 	.word	0x2000004c
 80004f8:	20000090 	.word	0x20000090

080004fc <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp, yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <turnbackINIT+0x50>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	dd07      	ble.n	8000518 <turnbackINIT+0x1c>
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <turnbackINIT+0x54>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	dd03      	ble.n	8000518 <turnbackINIT+0x1c>
			green_time < 1){
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <turnbackINIT+0x58>)
 8000512:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 8000514:	2b00      	cmp	r3, #0
 8000516:	dc08      	bgt.n	800052a <turnbackINIT+0x2e>
		red_time = 5;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <turnbackINIT+0x50>)
 800051a:	2205      	movs	r2, #5
 800051c:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <turnbackINIT+0x54>)
 8000520:	2202      	movs	r2, #2
 8000522:	601a      	str	r2, [r3, #0]
		green_time = 3;
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <turnbackINIT+0x58>)
 8000526:	2203      	movs	r2, #3
 8000528:	601a      	str	r2, [r3, #0]
	}
	setTimer(0, 3); // turn off timer_flag for scan led
 800052a:	2103      	movs	r1, #3
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fc3f 	bl	8000db0 <setTimer>
	red_time = green_time + yellow_time;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <turnbackINIT+0x58>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <turnbackINIT+0x54>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <turnbackINIT+0x50>)
 800053e:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <turnbackINIT+0x5c>)
 8000542:	225a      	movs	r2, #90	; 0x5a
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000048 	.word	0x20000048
 8000550:	2000004c 	.word	0x2000004c
 8000554:	20000050 	.word	0x20000050
 8000558:	20000044 	.word	0x20000044

0800055c <checkButton1>:
void checkButton1(){
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff fdf3 	bl	800014c <isButtonPressed>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d11e      	bne.n	80005aa <checkButton1+0x4e>
		//reset set timer

		if (status == MANUAL_RED) {
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <checkButton1+0x54>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b14      	cmp	r3, #20
 8000572:	d103      	bne.n	800057c <checkButton1+0x20>
			status = MANUAL_YELLOW;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <checkButton1+0x54>)
 8000576:	2215      	movs	r2, #21
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e011      	b.n	80005a0 <checkButton1+0x44>
		}
		else if (status == MANUAL_YELLOW) {
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <checkButton1+0x54>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b15      	cmp	r3, #21
 8000582:	d103      	bne.n	800058c <checkButton1+0x30>
			status = MANUAL_GREEN;
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <checkButton1+0x54>)
 8000586:	2216      	movs	r2, #22
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	e009      	b.n	80005a0 <checkButton1+0x44>
		}
		else if (status == MANUAL_GREEN) {
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <checkButton1+0x54>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b16      	cmp	r3, #22
 8000592:	d102      	bne.n	800059a <checkButton1+0x3e>
			turnbackINIT();
 8000594:	f7ff ffb2 	bl	80004fc <turnbackINIT>
 8000598:	e002      	b.n	80005a0 <checkButton1+0x44>
		}
		else {
			status = MANUAL_INIT; //auto state -> manual state
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <checkButton1+0x54>)
 800059c:	2217      	movs	r2, #23
 800059e:	601a      	str	r2, [r3, #0]
		}
		setTimer(1000, 2);// after 10 sec don't press button1 -> turn back to auto mode
 80005a0:	2102      	movs	r1, #2
 80005a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a6:	f000 fc03 	bl	8000db0 <setTimer>
	}
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000044 	.word	0x20000044

080005b4 <checkButton2>:

void checkButton2(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 80005b8:	2001      	movs	r0, #1
 80005ba:	f7ff fdc7 	bl	800014c <isButtonPressed>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d126      	bne.n	8000612 <checkButton2+0x5e>
		if (status == MANUAL_RED){
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <checkButton2+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b14      	cmp	r3, #20
 80005ca:	d108      	bne.n	80005de <checkButton2+0x2a>
			if (red_time_tmp < 99) red_time_tmp++;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <checkButton2+0x68>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b62      	cmp	r3, #98	; 0x62
 80005d2:	dc04      	bgt.n	80005de <checkButton2+0x2a>
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <checkButton2+0x68>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <checkButton2+0x68>)
 80005dc:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_YELLOW){
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <checkButton2+0x64>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b15      	cmp	r3, #21
 80005e4:	d108      	bne.n	80005f8 <checkButton2+0x44>
			if (yellow_time_tmp < 99) yellow_time_tmp++;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <checkButton2+0x6c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b62      	cmp	r3, #98	; 0x62
 80005ec:	dc04      	bgt.n	80005f8 <checkButton2+0x44>
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <checkButton2+0x6c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <checkButton2+0x6c>)
 80005f6:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_GREEN){
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <checkButton2+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b16      	cmp	r3, #22
 80005fe:	d108      	bne.n	8000612 <checkButton2+0x5e>
			if (green_time_tmp < 99) green_time_tmp++;
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <checkButton2+0x70>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b62      	cmp	r3, #98	; 0x62
 8000606:	dc04      	bgt.n	8000612 <checkButton2+0x5e>
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <checkButton2+0x70>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3301      	adds	r3, #1
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <checkButton2+0x70>)
 8000610:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000044 	.word	0x20000044
 800061c:	2000008c 	.word	0x2000008c
 8000620:	20000090 	.word	0x20000090
 8000624:	20000094 	.word	0x20000094

08000628 <checkButton3>:
void checkButton3(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 800062c:	2002      	movs	r0, #2
 800062e:	f7ff fd8d 	bl	800014c <isButtonPressed>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d119      	bne.n	800066c <checkButton3+0x44>
		if (status == MANUAL_RED){
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <checkButton3+0x48>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b14      	cmp	r3, #20
 800063e:	d104      	bne.n	800064a <checkButton3+0x22>
			red_time = red_time_tmp;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <checkButton3+0x4c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <checkButton3+0x50>)
 8000646:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 8000648:	e010      	b.n	800066c <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <checkButton3+0x48>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b15      	cmp	r3, #21
 8000650:	d104      	bne.n	800065c <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <checkButton3+0x54>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <checkButton3+0x58>)
 8000658:	6013      	str	r3, [r2, #0]
}
 800065a:	e007      	b.n	800066c <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <checkButton3+0x48>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b16      	cmp	r3, #22
 8000662:	d103      	bne.n	800066c <checkButton3+0x44>
			green_time = green_time_tmp;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <checkButton3+0x5c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <checkButton3+0x60>)
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000044 	.word	0x20000044
 8000674:	2000008c 	.word	0x2000008c
 8000678:	20000048 	.word	0x20000048
 800067c:	20000090 	.word	0x20000090
 8000680:	2000004c 	.word	0x2000004c
 8000684:	20000094 	.word	0x20000094
 8000688:	20000050 	.word	0x20000050

0800068c <fsm_manual>:


void fsm_manual(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	checkButton1();
 8000690:	f7ff ff64 	bl	800055c <checkButton1>
	switch (status){
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <fsm_manual+0x94>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3b14      	subs	r3, #20
 800069a:	2b03      	cmp	r3, #3
 800069c:	d83c      	bhi.n	8000718 <fsm_manual+0x8c>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <fsm_manual+0x18>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080006d7 	.word	0x080006d7
 80006a8:	080006ed 	.word	0x080006ed
 80006ac:	08000703 	.word	0x08000703
 80006b0:	080006b5 	.word	0x080006b5
	case MANUAL_INIT:
		red_time_tmp = 0;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <fsm_manual+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		yellow_time_tmp = 0;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <fsm_manual+0x9c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <fsm_manual+0xa0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <fsm_manual+0x94>)
 80006c8:	2214      	movs	r2, #20
 80006ca:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 80006cc:	2103      	movs	r1, #3
 80006ce:	2032      	movs	r0, #50	; 0x32
 80006d0:	f000 fb6e 	bl	8000db0 <setTimer>
		break;
 80006d4:	e021      	b.n	800071a <fsm_manual+0x8e>
	case MANUAL_RED:
		if (timer_flag [2] == 1) {
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <fsm_manual+0xa4>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d101      	bne.n	80006e2 <fsm_manual+0x56>
			turnbackINIT();
 80006de:	f7ff ff0d 	bl	80004fc <turnbackINIT>
		}
		checkButton2();
 80006e2:	f7ff ff67 	bl	80005b4 <checkButton2>
		checkButton3();
 80006e6:	f7ff ff9f 	bl	8000628 <checkButton3>
		break;
 80006ea:	e016      	b.n	800071a <fsm_manual+0x8e>
	case MANUAL_YELLOW:
		if (timer_flag [2] == 1){
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <fsm_manual+0xa4>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d101      	bne.n	80006f8 <fsm_manual+0x6c>
			turnbackINIT();
 80006f4:	f7ff ff02 	bl	80004fc <turnbackINIT>
		}
		checkButton2();
 80006f8:	f7ff ff5c 	bl	80005b4 <checkButton2>
		checkButton3();
 80006fc:	f7ff ff94 	bl	8000628 <checkButton3>
		break;
 8000700:	e00b      	b.n	800071a <fsm_manual+0x8e>
	case MANUAL_GREEN:
		if (timer_flag [2] == 1){
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <fsm_manual+0xa4>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d101      	bne.n	800070e <fsm_manual+0x82>
			turnbackINIT();
 800070a:	f7ff fef7 	bl	80004fc <turnbackINIT>
		}
		checkButton2();
 800070e:	f7ff ff51 	bl	80005b4 <checkButton2>
		checkButton3();
 8000712:	f7ff ff89 	bl	8000628 <checkButton3>
		break;
 8000716:	e000      	b.n	800071a <fsm_manual+0x8e>
	default: break;
 8000718:	bf00      	nop
	}




}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000044 	.word	0x20000044
 8000724:	2000008c 	.word	0x2000008c
 8000728:	20000090 	.word	0x20000090
 800072c:	20000094 	.word	0x20000094
 8000730:	200000c4 	.word	0x200000c4

08000734 <fsm_pedestrian_light>:
 *      Author: Admin
 */

#include "fsm_pedestrian_light.h"

void fsm_pedestrian_light(){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	if(isButtonPressed(4)){
 8000738:	2004      	movs	r0, #4
 800073a:	f7ff fd07 	bl	800014c <isButtonPressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d004      	beq.n	800074e <fsm_pedestrian_light+0x1a>
		setTimer(1000,4);
 8000744:	2104      	movs	r1, #4
 8000746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074a:	f000 fb31 	bl	8000db0 <setTimer>
	}
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fcda 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f81c 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f000 f942 	bl	80009e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000764:	f000 f854 	bl	8000810 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000768:	f000 f914 	bl	8000994 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800076c:	f000 f89c 	bl	80008a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <main+0x3c>)
 8000772:	f001 fd19 	bl	80021a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000776:	2100      	movs	r1, #0
 8000778:	4806      	ldr	r0, [pc, #24]	; (8000794 <main+0x40>)
 800077a:	f001 fdbf 	bl	80022fc <HAL_TIM_PWM_Start>

  while (1)
    {
      /* USER CODE END WHILE */
  	  //test_IO();
  	  	  fsm_auto();
 800077e:	f7ff fdfb 	bl	8000378 <fsm_auto>
  	  	  fsm_manual();
 8000782:	f7ff ff83 	bl	800068c <fsm_manual>
  	  	  fsm_pedestrian_light();
 8000786:	f7ff ffd5 	bl	8000734 <fsm_pedestrian_light>
  	  	  buzzer();
 800078a:	f7ff fdb1 	bl	80002f0 <buzzer>
  	  	  fsm_auto();
 800078e:	e7f6      	b.n	800077e <main+0x2a>
 8000790:	20000138 	.word	0x20000138
 8000794:	200000f0 	.word	0x200000f0

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	; 0x40
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2228      	movs	r2, #40	; 0x28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 f96a 	bl	8003a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007be:	2301      	movs	r3, #1
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c2:	2310      	movs	r3, #16
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 f88c 	bl	80018ec <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007da:	f000 f983 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 faf8 	bl	8001dec <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000802:	f000 f96f 	bl	8000ae4 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3740      	adds	r7, #64	; 0x40
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	463b      	mov	r3, r7
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_TIM2_Init+0x94>)
 800082e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000836:	f242 720f 	movw	r2, #9999	; 0x270f
 800083a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM2_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000844:	2207      	movs	r2, #7
 8000846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_TIM2_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000856:	f001 fc57 	bl	8002108 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000860:	f000 f940 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_TIM2_Init+0x94>)
 8000872:	f001 ffaf 	bl	80027d4 <HAL_TIM_ConfigClockSource>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800087c:	f000 f932 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_TIM2_Init+0x94>)
 800088e:	f002 fb31 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000898:	f000 f924 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000138 	.word	0x20000138

080008a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	f107 0320 	add.w	r3, r7, #32
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <MX_TIM3_Init+0xe4>)
 80008da:	4a2d      	ldr	r2, [pc, #180]	; (8000990 <MX_TIM3_Init+0xe8>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_TIM3_Init+0xe4>)
 80008e0:	224f      	movs	r2, #79	; 0x4f
 80008e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_TIM3_Init+0xe4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_TIM3_Init+0xe4>)
 80008ec:	2263      	movs	r2, #99	; 0x63
 80008ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_TIM3_Init+0xe4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <MX_TIM3_Init+0xe4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fc:	4823      	ldr	r0, [pc, #140]	; (800098c <MX_TIM3_Init+0xe4>)
 80008fe:	f001 fc03 	bl	8002108 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000908:	f000 f8ec 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000916:	4619      	mov	r1, r3
 8000918:	481c      	ldr	r0, [pc, #112]	; (800098c <MX_TIM3_Init+0xe4>)
 800091a:	f001 ff5b 	bl	80027d4 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000924:	f000 f8de 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000928:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_TIM3_Init+0xe4>)
 800092a:	f001 fc8f 	bl	800224c <HAL_TIM_PWM_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000934:	f000 f8d6 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4619      	mov	r1, r3
 8000946:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_TIM3_Init+0xe4>)
 8000948:	f002 fad4 	bl	8002ef4 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000952:	f000 f8c7 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000956:	2360      	movs	r3, #96	; 0x60
 8000958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	4807      	ldr	r0, [pc, #28]	; (800098c <MX_TIM3_Init+0xe4>)
 800096e:	f001 fe6f 	bl	8002650 <HAL_TIM_PWM_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000978:	f000 f8b4 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <MX_TIM3_Init+0xe4>)
 800097e:	f000 fad1 	bl	8000f24 <HAL_TIM_MspPostInit>

}
 8000982:	bf00      	nop
 8000984:	3738      	adds	r7, #56	; 0x38
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000f0 	.word	0x200000f0
 8000990:	40000400 	.word	0x40000400

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f002 fb02 	bl	8002fd4 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f885 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000180 	.word	0x20000180
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a2d      	ldr	r2, [pc, #180]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	4b28      	ldr	r3, [pc, #160]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a1a:	f043 0308 	orr.w	r3, r3, #8
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0308 	and.w	r3, r3, #8
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a32:	4822      	ldr	r0, [pc, #136]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a34:	f000 ff29 	bl	800188a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000a3e:	4820      	ldr	r0, [pc, #128]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a40:	f000 ff23 	bl	800188a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8000a44:	2313      	movs	r3, #19
 8000a46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a58:	f000 fd7c 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a70:	f000 fd70 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 8000a74:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2302      	movs	r3, #2
 8000a84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a8e:	f000 fd61 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 8000a92:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000aac:	f000 fd52 	bl	8001554 <HAL_GPIO_Init>

}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	40010800 	.word	0x40010800

08000ac4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
 8000acc:	f000 f8ea 	bl	8000ca4 <scanLed>
	buzzer(); // buzzer
 8000ad0:	f7ff fc0e 	bl	80002f0 <buzzer>
	timerRun(); // software timer
 8000ad4:	f000 f984 	bl	8000de0 <timerRun>
	getKeyinput(); // button
 8000ad8:	f7ff fb94 	bl	8000204 <getKeyinput>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <turnoffAll>:

#include "scanLed.h"

int enable_change = 0;
//lenh bat tat den cho nhanh
void turnoffAll(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	4810      	ldr	r0, [pc, #64]	; (8000b3c <turnoffAll+0x4c>)
 8000afc:	f000 fec5 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2108      	movs	r1, #8
 8000b04:	480e      	ldr	r0, [pc, #56]	; (8000b40 <turnoffAll+0x50>)
 8000b06:	f000 fec0 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <turnoffAll+0x50>)
 8000b10:	f000 febb 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2110      	movs	r1, #16
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <turnoffAll+0x50>)
 8000b1a:	f000 feb6 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <turnoffAll+0x50>)
 8000b26:	f000 feb0 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <turnoffAll+0x4c>)
 8000b32:	f000 feaa 	bl	800188a <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40010800 	.word	0x40010800
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <onRed_1>:
void onRed_1(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <onRed_1+0x20>)
 8000b50:	f000 fe9b 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2108      	movs	r1, #8
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <onRed_1+0x24>)
 8000b5a:	f000 fe96 	bl	800188a <HAL_GPIO_WritePin>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010800 	.word	0x40010800
 8000b68:	40010c00 	.word	0x40010c00

08000b6c <onYellow_1>:
void onYellow_1(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <onYellow_1+0x20>)
 8000b78:	f000 fe87 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <onYellow_1+0x24>)
 8000b82:	f000 fe82 	bl	800188a <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <onGreen_1>:
void onGreen_1(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <onGreen_1+0x20>)
 8000ba0:	f000 fe73 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <onGreen_1+0x24>)
 8000baa:	f000 fe6e 	bl	800188a <HAL_GPIO_WritePin>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <onRed_2>:
void onRed_2(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <onRed_2+0x1c>)
 8000bc6:	f000 fe60 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2110      	movs	r1, #16
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <onRed_2+0x1c>)
 8000bd0:	f000 fe5b 	bl	800188a <HAL_GPIO_WritePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <onYellow_2>:
void onYellow_2(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2120      	movs	r1, #32
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <onYellow_2+0x1c>)
 8000be6:	f000 fe50 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2110      	movs	r1, #16
 8000bee:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <onYellow_2+0x1c>)
 8000bf0:	f000 fe4b 	bl	800188a <HAL_GPIO_WritePin>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <onGreen_2>:
void onGreen_2(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2120      	movs	r1, #32
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <onGreen_2+0x1c>)
 8000c06:	f000 fe40 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <onGreen_2+0x1c>)
 8000c10:	f000 fe3b 	bl	800188a <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010c00 	.word	0x40010c00

08000c1c <onGreenPed>:

void onGreenPed(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <onGreenPed+0x20>)
 8000c28:	f000 fe2f 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <onGreenPed+0x24>)
 8000c34:	f000 fe29 	bl	800188a <HAL_GPIO_WritePin>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40010800 	.word	0x40010800

08000c44 <onRedPed>:
void onRedPed(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <onRedPed+0x20>)
 8000c50:	f000 fe1b 	bl	800188a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <onRedPed+0x24>)
 8000c5c:	f000 fe15 	bl	800188a <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40010800 	.word	0x40010800

08000c6c <onRed_Toggle>:
void onRed_Toggle(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d107      	bne.n	8000c88 <onRed_Toggle+0x1c>
		onRed_1();
 8000c78:	f7ff ff64 	bl	8000b44 <onRed_1>
		onRed_2();
 8000c7c:	f7ff ff9e 	bl	8000bbc <onRed_2>
		enable_change = 1;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 8000c86:	e008      	b.n	8000c9a <onRed_Toggle+0x2e>
	else if (enable_change == 1){
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d104      	bne.n	8000c9a <onRed_Toggle+0x2e>
		turnoffAll();
 8000c90:	f7ff ff2e 	bl	8000af0 <turnoffAll>
		enable_change = 0;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000098 	.word	0x20000098

08000ca4 <scanLed>:
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
void scanLed(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	switch (status){
 8000ca8:	4b3f      	ldr	r3, [pc, #252]	; (8000da8 <scanLed+0x104>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b5e      	cmp	r3, #94	; 0x5e
 8000cae:	dc6a      	bgt.n	8000d86 <scanLed+0xe2>
 8000cb0:	2b5b      	cmp	r3, #91	; 0x5b
 8000cb2:	da08      	bge.n	8000cc6 <scanLed+0x22>
 8000cb4:	2b16      	cmp	r3, #22
 8000cb6:	d059      	beq.n	8000d6c <scanLed+0xc8>
 8000cb8:	2b16      	cmp	r3, #22
 8000cba:	dc64      	bgt.n	8000d86 <scanLed+0xe2>
 8000cbc:	2b14      	cmp	r3, #20
 8000cbe:	d03d      	beq.n	8000d3c <scanLed+0x98>
 8000cc0:	2b15      	cmp	r3, #21
 8000cc2:	d046      	beq.n	8000d52 <scanLed+0xae>
			onGreen_1();
			onGreen_2();
			setTimer(50,3);
		}
		break;
	default: break;
 8000cc4:	e05f      	b.n	8000d86 <scanLed+0xe2>
 8000cc6:	3b5b      	subs	r3, #91	; 0x5b
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d85c      	bhi.n	8000d86 <scanLed+0xe2>
 8000ccc:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <scanLed+0x30>)
 8000cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd2:	bf00      	nop
 8000cd4:	08000ce5 	.word	0x08000ce5
 8000cd8:	08000cfb 	.word	0x08000cfb
 8000cdc:	08000d11 	.word	0x08000d11
 8000ce0:	08000d27 	.word	0x08000d27
		onRed_1();
 8000ce4:	f7ff ff2e 	bl	8000b44 <onRed_1>
		onGreen_2();
 8000ce8:	f7ff ff88 	bl	8000bfc <onGreen_2>
		if(timer_flag[4] == 0){
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <scanLed+0x108>)
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14a      	bne.n	8000d8a <scanLed+0xe6>
			onGreenPed();
 8000cf4:	f7ff ff92 	bl	8000c1c <onGreenPed>
		break;
 8000cf8:	e047      	b.n	8000d8a <scanLed+0xe6>
		onRed_1();
 8000cfa:	f7ff ff23 	bl	8000b44 <onRed_1>
		onYellow_2();
 8000cfe:	f7ff ff6d 	bl	8000bdc <onYellow_2>
		if(timer_flag[4] == 0){
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <scanLed+0x108>)
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d141      	bne.n	8000d8e <scanLed+0xea>
			onGreenPed();
 8000d0a:	f7ff ff87 	bl	8000c1c <onGreenPed>
		break;
 8000d0e:	e03e      	b.n	8000d8e <scanLed+0xea>
		onGreen_1();
 8000d10:	f7ff ff40 	bl	8000b94 <onGreen_1>
		onRed_2();
 8000d14:	f7ff ff52 	bl	8000bbc <onRed_2>
		if(timer_flag[4] == 0){
 8000d18:	4b24      	ldr	r3, [pc, #144]	; (8000dac <scanLed+0x108>)
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d138      	bne.n	8000d92 <scanLed+0xee>
			onRedPed();
 8000d20:	f7ff ff90 	bl	8000c44 <onRedPed>
		break;
 8000d24:	e035      	b.n	8000d92 <scanLed+0xee>
		onYellow_1();
 8000d26:	f7ff ff21 	bl	8000b6c <onYellow_1>
		onRed_2();
 8000d2a:	f7ff ff47 	bl	8000bbc <onRed_2>
		if(timer_flag[4] == 0){
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <scanLed+0x108>)
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d12f      	bne.n	8000d96 <scanLed+0xf2>
			onRedPed();
 8000d36:	f7ff ff85 	bl	8000c44 <onRedPed>
		break;
 8000d3a:	e02c      	b.n	8000d96 <scanLed+0xf2>
		if (timer_flag[3] == 1){
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <scanLed+0x108>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d12a      	bne.n	8000d9a <scanLed+0xf6>
			onRed_Toggle();
 8000d44:	f7ff ff92 	bl	8000c6c <onRed_Toggle>
			setTimer(50,3);
 8000d48:	2103      	movs	r1, #3
 8000d4a:	2032      	movs	r0, #50	; 0x32
 8000d4c:	f000 f830 	bl	8000db0 <setTimer>
		break;
 8000d50:	e023      	b.n	8000d9a <scanLed+0xf6>
		if (timer_flag[3] == 1){
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <scanLed+0x108>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d121      	bne.n	8000d9e <scanLed+0xfa>
			onYellow_1();
 8000d5a:	f7ff ff07 	bl	8000b6c <onYellow_1>
			onYellow_2();
 8000d5e:	f7ff ff3d 	bl	8000bdc <onYellow_2>
			setTimer(50,3);
 8000d62:	2103      	movs	r1, #3
 8000d64:	2032      	movs	r0, #50	; 0x32
 8000d66:	f000 f823 	bl	8000db0 <setTimer>
		break;
 8000d6a:	e018      	b.n	8000d9e <scanLed+0xfa>
		if (timer_flag[3] == 1){
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <scanLed+0x108>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d116      	bne.n	8000da2 <scanLed+0xfe>
			onGreen_1();
 8000d74:	f7ff ff0e 	bl	8000b94 <onGreen_1>
			onGreen_2();
 8000d78:	f7ff ff40 	bl	8000bfc <onGreen_2>
			setTimer(50,3);
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	2032      	movs	r0, #50	; 0x32
 8000d80:	f000 f816 	bl	8000db0 <setTimer>
		break;
 8000d84:	e00d      	b.n	8000da2 <scanLed+0xfe>
	default: break;
 8000d86:	bf00      	nop
 8000d88:	e00c      	b.n	8000da4 <scanLed+0x100>
		break;
 8000d8a:	bf00      	nop
 8000d8c:	e00a      	b.n	8000da4 <scanLed+0x100>
		break;
 8000d8e:	bf00      	nop
 8000d90:	e008      	b.n	8000da4 <scanLed+0x100>
		break;
 8000d92:	bf00      	nop
 8000d94:	e006      	b.n	8000da4 <scanLed+0x100>
		break;
 8000d96:	bf00      	nop
 8000d98:	e004      	b.n	8000da4 <scanLed+0x100>
		break;
 8000d9a:	bf00      	nop
 8000d9c:	e002      	b.n	8000da4 <scanLed+0x100>
		break;
 8000d9e:	bf00      	nop
 8000da0:	e000      	b.n	8000da4 <scanLed+0x100>
		break;
 8000da2:	bf00      	nop
	}
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000044 	.word	0x20000044
 8000dac:	200000c4 	.word	0x200000c4

08000db0 <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8000dba:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <setTimer+0x28>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 8000dc4:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <setTimer+0x2c>)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	2000009c 	.word	0x2000009c
 8000ddc:	200000c4 	.word	0x200000c4

08000de0 <timerRun>:

void timerRun(){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	e01c      	b.n	8000e26 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <timerRun+0x58>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd13      	ble.n	8000e20 <timerRun+0x40>
			timer_counter[i]--;
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <timerRun+0x58>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	1e5a      	subs	r2, r3, #1
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <timerRun+0x58>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <timerRun+0x58>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d104      	bne.n	8000e20 <timerRun+0x40>
				timer_flag [i] = 1;
 8000e16:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <timerRun+0x5c>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3301      	adds	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	dddf      	ble.n	8000dec <timerRun+0xc>
			}
		}
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	2000009c 	.word	0x2000009c
 8000e3c:	200000c4 	.word	0x200000c4

08000e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6193      	str	r3, [r2, #24]
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_MspInit+0x60>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_MspInit+0x60>)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d114      	bne.n	8000ee0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_TIM_Base_MspInit+0x78>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <HAL_TIM_Base_MspInit+0x78>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	61d3      	str	r3, [r2, #28]
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_TIM_Base_MspInit+0x78>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	201c      	movs	r0, #28
 8000ed4:	f000 fa55 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed8:	201c      	movs	r0, #28
 8000eda:	f000 fa6e 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ede:	e018      	b.n	8000f12 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_TIM_Base_MspInit+0x7c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d113      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_TIM_Base_MspInit+0x78>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_TIM_Base_MspInit+0x78>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_TIM_Base_MspInit+0x78>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201d      	movs	r0, #29
 8000f08:	f000 fa3b 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f0c:	201d      	movs	r0, #29
 8000f0e:	f000 fa54 	bl	80013ba <HAL_NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40000400 	.word	0x40000400

08000f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_TIM_MspPostInit+0x58>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d117      	bne.n	8000f74 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_TIM_MspPostInit+0x5c>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_TIM_MspPostInit+0x5c>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_TIM_MspPostInit+0x5c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000f5c:	2340      	movs	r3, #64	; 0x40
 8000f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_TIM_MspPostInit+0x60>)
 8000f70:	f000 faf0 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010800 	.word	0x40010800

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d137      	bne.n	8001018 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	61d3      	str	r3, [r2, #28]
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480f      	ldr	r0, [pc, #60]	; (8001028 <HAL_UART_MspInit+0xa0>)
 8000fec:	f000 fab2 	bl	8001554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_UART_MspInit+0xa0>)
 8001004:	f000 faa6 	bl	8001554 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2026      	movs	r0, #38	; 0x26
 800100e:	f000 f9b8 	bl	8001382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001012:	2026      	movs	r0, #38	; 0x26
 8001014:	f000 f9d1 	bl	80013ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40004400 	.word	0x40004400
 8001024:	40021000 	.word	0x40021000
 8001028:	40010800 	.word	0x40010800

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001072:	f000 f893 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM2_IRQHandler+0x10>)
 8001082:	f001 f9dd 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000138 	.word	0x20000138

08001090 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM3_IRQHandler+0x10>)
 8001096:	f001 f9d3 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000f0 	.word	0x200000f0

080010a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <USART2_IRQHandler+0x10>)
 80010aa:	f001 ffe3 	bl	8003074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000180 	.word	0x20000180

080010b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c4:	f7ff fff8 	bl	80010b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480b      	ldr	r0, [pc, #44]	; (80010f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ca:	490c      	ldr	r1, [pc, #48]	; (80010fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a09      	ldr	r2, [pc, #36]	; (8001104 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010e0:	4c09      	ldr	r4, [pc, #36]	; (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f002 fca3 	bl	8003a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff fb2f 	bl	8000754 <main>
  bx lr
 80010f6:	4770      	bx	lr
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001100:	08003adc 	.word	0x08003adc
  ldr r2, =_sbss
 8001104:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001108:	200001cc 	.word	0x200001cc

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x28>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x28>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f923 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fe88 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f93b 	bl	80013d6 <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f903 	bl	8001382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000054 	.word	0x20000054
 8001194:	2000005c 	.word	0x2000005c
 8001198:	20000058 	.word	0x20000058

0800119c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <HAL_IncTick+0x1c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x20>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a03      	ldr	r2, [pc, #12]	; (80011bc <HAL_IncTick+0x20>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	2000005c 	.word	0x2000005c
 80011bc:	200001c8 	.word	0x200001c8

080011c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <HAL_GetTick+0x10>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200001c8 	.word	0x200001c8

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4906      	ldr	r1, [pc, #24]	; (800126c <__NVIC_EnableIRQ+0x34>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100

08001270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	2b00      	cmp	r3, #0
 8001282:	db0a      	blt.n	800129a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	b2da      	uxtb	r2, r3
 8001288:	490c      	ldr	r1, [pc, #48]	; (80012bc <__NVIC_SetPriority+0x4c>)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	0112      	lsls	r2, r2, #4
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	440b      	add	r3, r1
 8001294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001298:	e00a      	b.n	80012b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <__NVIC_SetPriority+0x50>)
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	3b04      	subs	r3, #4
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	761a      	strb	r2, [r3, #24]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f1c3 0307 	rsb	r3, r3, #7
 80012de:	2b04      	cmp	r3, #4
 80012e0:	bf28      	it	cs
 80012e2:	2304      	movcs	r3, #4
 80012e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3304      	adds	r3, #4
 80012ea:	2b06      	cmp	r3, #6
 80012ec:	d902      	bls.n	80012f4 <NVIC_EncodePriority+0x30>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3b03      	subs	r3, #3
 80012f2:	e000      	b.n	80012f6 <NVIC_EncodePriority+0x32>
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800130c:	f04f 31ff 	mov.w	r1, #4294967295
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	43d9      	mvns	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	4313      	orrs	r3, r2
         );
}
 800131e:	4618      	mov	r0, r3
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff90 	bl	8001270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff2d 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff42 	bl	800121c <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff90 	bl	80012c4 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5f 	bl	8001270 <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff35 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d008      	beq.n	8001418 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2204      	movs	r2, #4
 800140a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e020      	b.n	800145a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 020e 	bic.w	r2, r2, #14
 8001426:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d005      	beq.n	8001488 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2204      	movs	r2, #4
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e051      	b.n	800152c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 020e 	bic.w	r2, r2, #14
 8001496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_DMA_Abort_IT+0xd4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d029      	beq.n	8001506 <HAL_DMA_Abort_IT+0xa2>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a21      	ldr	r2, [pc, #132]	; (800153c <HAL_DMA_Abort_IT+0xd8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d022      	beq.n	8001502 <HAL_DMA_Abort_IT+0x9e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_DMA_Abort_IT+0xdc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01a      	beq.n	80014fc <HAL_DMA_Abort_IT+0x98>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_DMA_Abort_IT+0xe0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d012      	beq.n	80014f6 <HAL_DMA_Abort_IT+0x92>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_DMA_Abort_IT+0xe4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00a      	beq.n	80014f0 <HAL_DMA_Abort_IT+0x8c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a1b      	ldr	r2, [pc, #108]	; (800154c <HAL_DMA_Abort_IT+0xe8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d102      	bne.n	80014ea <HAL_DMA_Abort_IT+0x86>
 80014e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014e8:	e00e      	b.n	8001508 <HAL_DMA_Abort_IT+0xa4>
 80014ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014ee:	e00b      	b.n	8001508 <HAL_DMA_Abort_IT+0xa4>
 80014f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f4:	e008      	b.n	8001508 <HAL_DMA_Abort_IT+0xa4>
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	e005      	b.n	8001508 <HAL_DMA_Abort_IT+0xa4>
 80014fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001500:	e002      	b.n	8001508 <HAL_DMA_Abort_IT+0xa4>
 8001502:	2310      	movs	r3, #16
 8001504:	e000      	b.n	8001508 <HAL_DMA_Abort_IT+0xa4>
 8001506:	2301      	movs	r3, #1
 8001508:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_DMA_Abort_IT+0xec>)
 800150a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
    } 
  }
  return status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020008 	.word	0x40020008
 800153c:	4002001c 	.word	0x4002001c
 8001540:	40020030 	.word	0x40020030
 8001544:	40020044 	.word	0x40020044
 8001548:	40020058 	.word	0x40020058
 800154c:	4002006c 	.word	0x4002006c
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b08b      	sub	sp, #44	; 0x2c
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e169      	b.n	800183c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001568:	2201      	movs	r2, #1
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8158 	bne.w	8001836 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a9a      	ldr	r2, [pc, #616]	; (80017f4 <HAL_GPIO_Init+0x2a0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d05e      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 8001590:	4a98      	ldr	r2, [pc, #608]	; (80017f4 <HAL_GPIO_Init+0x2a0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d875      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 8001596:	4a98      	ldr	r2, [pc, #608]	; (80017f8 <HAL_GPIO_Init+0x2a4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d058      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 800159c:	4a96      	ldr	r2, [pc, #600]	; (80017f8 <HAL_GPIO_Init+0x2a4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d86f      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015a2:	4a96      	ldr	r2, [pc, #600]	; (80017fc <HAL_GPIO_Init+0x2a8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d052      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015a8:	4a94      	ldr	r2, [pc, #592]	; (80017fc <HAL_GPIO_Init+0x2a8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d869      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ae:	4a94      	ldr	r2, [pc, #592]	; (8001800 <HAL_GPIO_Init+0x2ac>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d04c      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015b4:	4a92      	ldr	r2, [pc, #584]	; (8001800 <HAL_GPIO_Init+0x2ac>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d863      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ba:	4a92      	ldr	r2, [pc, #584]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d046      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015c0:	4a90      	ldr	r2, [pc, #576]	; (8001804 <HAL_GPIO_Init+0x2b0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d85d      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d82a      	bhi.n	8001620 <HAL_GPIO_Init+0xcc>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d859      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <HAL_GPIO_Init+0x80>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	08001629 	.word	0x08001629
 80015dc:	0800163b 	.word	0x0800163b
 80015e0:	0800167d 	.word	0x0800167d
 80015e4:	08001683 	.word	0x08001683
 80015e8:	08001683 	.word	0x08001683
 80015ec:	08001683 	.word	0x08001683
 80015f0:	08001683 	.word	0x08001683
 80015f4:	08001683 	.word	0x08001683
 80015f8:	08001683 	.word	0x08001683
 80015fc:	08001683 	.word	0x08001683
 8001600:	08001683 	.word	0x08001683
 8001604:	08001683 	.word	0x08001683
 8001608:	08001683 	.word	0x08001683
 800160c:	08001683 	.word	0x08001683
 8001610:	08001683 	.word	0x08001683
 8001614:	08001683 	.word	0x08001683
 8001618:	08001631 	.word	0x08001631
 800161c:	08001645 	.word	0x08001645
 8001620:	4a79      	ldr	r2, [pc, #484]	; (8001808 <HAL_GPIO_Init+0x2b4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001626:	e02c      	b.n	8001682 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e029      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	3304      	adds	r3, #4
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e024      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	3308      	adds	r3, #8
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e01f      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	330c      	adds	r3, #12
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e01a      	b.n	8001684 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001656:	2304      	movs	r3, #4
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e013      	b.n	8001684 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001664:	2308      	movs	r3, #8
 8001666:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	611a      	str	r2, [r3, #16]
          break;
 800166e:	e009      	b.n	8001684 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001670:	2308      	movs	r3, #8
 8001672:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	615a      	str	r2, [r3, #20]
          break;
 800167a:	e003      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
          break;
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x130>
          break;
 8001682:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2bff      	cmp	r3, #255	; 0xff
 8001688:	d801      	bhi.n	800168e <HAL_GPIO_Init+0x13a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	e001      	b.n	8001692 <HAL_GPIO_Init+0x13e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3304      	adds	r3, #4
 8001692:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2bff      	cmp	r3, #255	; 0xff
 8001698:	d802      	bhi.n	80016a0 <HAL_GPIO_Init+0x14c>
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x152>
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	3b08      	subs	r3, #8
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	210f      	movs	r1, #15
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401a      	ands	r2, r3
 80016b8:	6a39      	ldr	r1, [r7, #32]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80b1 	beq.w	8001836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d4:	4b4d      	ldr	r3, [pc, #308]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b4a      	ldr	r3, [pc, #296]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ec:	4a48      	ldr	r2, [pc, #288]	; (8001810 <HAL_GPIO_Init+0x2bc>)
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a40      	ldr	r2, [pc, #256]	; (8001814 <HAL_GPIO_Init+0x2c0>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d013      	beq.n	8001740 <HAL_GPIO_Init+0x1ec>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3f      	ldr	r2, [pc, #252]	; (8001818 <HAL_GPIO_Init+0x2c4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00d      	beq.n	800173c <HAL_GPIO_Init+0x1e8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <HAL_GPIO_Init+0x2c8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d007      	beq.n	8001738 <HAL_GPIO_Init+0x1e4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3d      	ldr	r2, [pc, #244]	; (8001820 <HAL_GPIO_Init+0x2cc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_GPIO_Init+0x1e0>
 8001730:	2303      	movs	r3, #3
 8001732:	e006      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 8001734:	2304      	movs	r3, #4
 8001736:	e004      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 8001738:	2302      	movs	r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_GPIO_Init+0x1ee>
 8001740:	2300      	movs	r3, #0
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	f002 0203 	and.w	r2, r2, #3
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	4093      	lsls	r3, r2
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001752:	492f      	ldr	r1, [pc, #188]	; (8001810 <HAL_GPIO_Init+0x2bc>)
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	492c      	ldr	r1, [pc, #176]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	43db      	mvns	r3, r3
 8001782:	4928      	ldr	r1, [pc, #160]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 8001784:	4013      	ands	r3, r2
 8001786:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	491e      	ldr	r1, [pc, #120]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4918      	ldr	r1, [pc, #96]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d021      	beq.n	8001828 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e021      	b.n	8001836 <HAL_GPIO_Init+0x2e2>
 80017f2:	bf00      	nop
 80017f4:	10320000 	.word	0x10320000
 80017f8:	10310000 	.word	0x10310000
 80017fc:	10220000 	.word	0x10220000
 8001800:	10210000 	.word	0x10210000
 8001804:	10120000 	.word	0x10120000
 8001808:	10110000 	.word	0x10110000
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000
 8001814:	40010800 	.word	0x40010800
 8001818:	40010c00 	.word	0x40010c00
 800181c:	40011000 	.word	0x40011000
 8001820:	40011400 	.word	0x40011400
 8001824:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_GPIO_Init+0x304>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	43db      	mvns	r3, r3
 8001830:	4909      	ldr	r1, [pc, #36]	; (8001858 <HAL_GPIO_Init+0x304>)
 8001832:	4013      	ands	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	3301      	adds	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f ae8e 	bne.w	8001568 <HAL_GPIO_Init+0x14>
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	372c      	adds	r7, #44	; 0x2c
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e001      	b.n	800187e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800189a:	787b      	ldrb	r3, [r7, #1]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a0:	887a      	ldrh	r2, [r7, #2]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018a6:	e003      	b.n	80018b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a8:	887b      	ldrh	r3, [r7, #2]
 80018aa:	041a      	lsls	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	611a      	str	r2, [r3, #16]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018cc:	887a      	ldrh	r2, [r7, #2]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4013      	ands	r3, r2
 80018d2:	041a      	lsls	r2, r3, #16
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	400b      	ands	r3, r1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	611a      	str	r2, [r3, #16]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e26c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8087 	beq.w	8001a1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800190c:	4b92      	ldr	r3, [pc, #584]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b04      	cmp	r3, #4
 8001916:	d00c      	beq.n	8001932 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001918:	4b8f      	ldr	r3, [pc, #572]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d112      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
 8001924:	4b8c      	ldr	r3, [pc, #560]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d10b      	bne.n	800194a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x12c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d168      	bne.n	8001a18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e246      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x76>
 8001954:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7f      	ldr	r2, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e02e      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800196a:	4b7b      	ldr	r3, [pc, #492]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b78      	ldr	r3, [pc, #480]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a77      	ldr	r2, [pc, #476]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0xbc>
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a71      	ldr	r2, [pc, #452]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xd4>
 80019a8:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6a      	ldr	r2, [pc, #424]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fbfa 	bl	80011c0 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fbf6 	bl	80011c0 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e1fa      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xe4>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fbe6 	bl	80011c0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fbe2 	bl	80011c0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1e6      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x10c>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d063      	beq.n	8001aee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a26:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
 8001a3e:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e1ba      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4939      	ldr	r1, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb9b 	bl	80011c0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fb97 	bl	80011c0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e19b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4927      	ldr	r1, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <HAL_RCC_OscConfig+0x270>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb7a 	bl	80011c0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fb76 	bl	80011c0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e17a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d03a      	beq.n	8001b70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d019      	beq.n	8001b36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff fb5a 	bl	80011c0 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fb56 	bl	80011c0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e15a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 facc 	bl	80020cc <RCC_Delay>
 8001b34:	e01c      	b.n	8001b70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_OscConfig+0x274>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fb40 	bl	80011c0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b42:	e00f      	b.n	8001b64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff fb3c 	bl	80011c0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d908      	bls.n	8001b64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e140      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	42420000 	.word	0x42420000
 8001b60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e9      	bne.n	8001b44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a6 	beq.w	8001cca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b97      	ldr	r3, [pc, #604]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10d      	bne.n	8001baa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a93      	ldr	r2, [pc, #588]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]
 8001b9a:	4b91      	ldr	r3, [pc, #580]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001baa:	4b8e      	ldr	r3, [pc, #568]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb6:	4b8b      	ldr	r3, [pc, #556]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a8a      	ldr	r2, [pc, #552]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fafd 	bl	80011c0 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff faf9 	bl	80011c0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0fd      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <HAL_RCC_OscConfig+0x4f8>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x312>
 8001bf0:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a7a      	ldr	r2, [pc, #488]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	e02d      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x334>
 8001c06:	4b76      	ldr	r3, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a75      	ldr	r2, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a72      	ldr	r2, [pc, #456]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
 8001c1e:	e01c      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d10c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x356>
 8001c28:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4a6c      	ldr	r2, [pc, #432]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	f043 0304 	orr.w	r3, r3, #4
 8001c32:	6213      	str	r3, [r2, #32]
 8001c34:	4b6a      	ldr	r3, [pc, #424]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e00b      	b.n	8001c5a <HAL_RCC_OscConfig+0x36e>
 8001c42:	4b67      	ldr	r3, [pc, #412]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a66      	ldr	r2, [pc, #408]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a63      	ldr	r2, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d015      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff faad 	bl	80011c0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff faa9 	bl	80011c0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e0ab      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4b57      	ldr	r3, [pc, #348]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ee      	beq.n	8001c6a <HAL_RCC_OscConfig+0x37e>
 8001c8c:	e014      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fa97 	bl	80011c0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	e00a      	b.n	8001cac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c96:	f7ff fa93 	bl	80011c0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e095      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b48      	ldr	r3, [pc, #288]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a47      	ldr	r2, [pc, #284]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 8081 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd4:	4b42      	ldr	r3, [pc, #264]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d061      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d146      	bne.n	8001d76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <HAL_RCC_OscConfig+0x4fc>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff fa67 	bl	80011c0 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fa63 	bl	80011c0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e067      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d108      	bne.n	8001d30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	492d      	ldr	r1, [pc, #180]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a19      	ldr	r1, [r3, #32]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	430b      	orrs	r3, r1
 8001d42:	4927      	ldr	r1, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCC_OscConfig+0x4fc>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fa37 	bl	80011c0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7ff fa33 	bl	80011c0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e037      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46a>
 8001d74:	e02f      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_RCC_OscConfig+0x4fc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fa20 	bl	80011c0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fa1c 	bl	80011c0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e020      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x498>
 8001da2:	e018      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e013      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
 8001de8:	42420060 	.word	0x42420060

08001dec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0d0      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4965      	ldr	r1, [pc, #404]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0b8      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d020      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a58      	ldr	r2, [pc, #352]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b50      	ldr	r3, [pc, #320]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	494d      	ldr	r1, [pc, #308]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d040      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d115      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e07f      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e073      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06b      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f023 0203 	bic.w	r2, r3, #3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4936      	ldr	r1, [pc, #216]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001edc:	f7ff f970 	bl	80011c0 <HAL_GetTick>
 8001ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee4:	f7ff f96c 	bl	80011c0 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e053      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 020c 	and.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d1eb      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d210      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4922      	ldr	r1, [pc, #136]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e032      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4916      	ldr	r1, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	490e      	ldr	r1, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7a:	f000 f821 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	490a      	ldr	r1, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	5ccb      	ldrb	r3, [r1, r3]
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1d0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f8ce 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08003aa8 	.word	0x08003aa8
 8001fb8:	20000054 	.word	0x20000054
 8001fbc:	20000058 	.word	0x20000058

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fee:	e027      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff2:	613b      	str	r3, [r7, #16]
      break;
 8001ff4:	e027      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	4a17      	ldr	r2, [pc, #92]	; (800205c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_GetSysClockFreq+0x94>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	0c5b      	lsrs	r3, r3, #17
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_RCC_GetSysClockFreq+0xa0>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <HAL_RCC_GetSysClockFreq+0x98>)
 8002022:	fb02 f203 	mul.w	r2, r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e004      	b.n	800203a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	613b      	str	r3, [r7, #16]
      break;
 800203e:	e002      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetSysClockFreq+0x98>)
 8002042:	613b      	str	r3, [r7, #16]
      break;
 8002044:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002046:	693b      	ldr	r3, [r7, #16]
}
 8002048:	4618      	mov	r0, r3
 800204a:	371c      	adds	r7, #28
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	007a1200 	.word	0x007a1200
 800205c:	08003ac0 	.word	0x08003ac0
 8002060:	08003ad0 	.word	0x08003ad0
 8002064:	003d0900 	.word	0x003d0900

08002068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800206c:	4b02      	ldr	r3, [pc, #8]	; (8002078 <HAL_RCC_GetHCLKFreq+0x10>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000054 	.word	0x20000054

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002080:	f7ff fff2 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003ab8 	.word	0x08003ab8

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020a8:	f7ff ffde 	bl	8002068 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0adb      	lsrs	r3, r3, #11
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4903      	ldr	r1, [pc, #12]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08003ab8 	.word	0x08003ab8

080020cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <RCC_Delay+0x34>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <RCC_Delay+0x38>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0a5b      	lsrs	r3, r3, #9
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020e8:	bf00      	nop
  }
  while (Delay --);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	60fa      	str	r2, [r7, #12]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f9      	bne.n	80020e8 <RCC_Delay+0x1c>
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000054 	.word	0x20000054
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe feb8 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 fc30 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e03a      	b.n	8002236 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <HAL_TIM_Base_Start_IT+0x98>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00e      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ea:	d009      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <HAL_TIM_Base_Start_IT+0x9c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x58>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <HAL_TIM_Base_Start_IT+0xa0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b06      	cmp	r3, #6
 8002210:	d010      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002222:	e007      	b.n	8002234 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40000400 	.word	0x40000400
 8002248:	40000800 	.word	0x40000800

0800224c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e041      	b.n	80022e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f839 	bl	80022ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3304      	adds	r3, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f000 fb8e 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr

080022fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_TIM_PWM_Start+0x24>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e022      	b.n	8002366 <HAL_TIM_PWM_Start+0x6a>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b04      	cmp	r3, #4
 8002324:	d109      	bne.n	800233a <HAL_TIM_PWM_Start+0x3e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b01      	cmp	r3, #1
 8002330:	bf14      	ite	ne
 8002332:	2301      	movne	r3, #1
 8002334:	2300      	moveq	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	e015      	b.n	8002366 <HAL_TIM_PWM_Start+0x6a>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b08      	cmp	r3, #8
 800233e:	d109      	bne.n	8002354 <HAL_TIM_PWM_Start+0x58>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	e008      	b.n	8002366 <HAL_TIM_PWM_Start+0x6a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	bf14      	ite	ne
 8002360:	2301      	movne	r3, #1
 8002362:	2300      	moveq	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e05e      	b.n	800242c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <HAL_TIM_PWM_Start+0x82>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800237c:	e013      	b.n	80023a6 <HAL_TIM_PWM_Start+0xaa>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d104      	bne.n	800238e <HAL_TIM_PWM_Start+0x92>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800238c:	e00b      	b.n	80023a6 <HAL_TIM_PWM_Start+0xaa>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d104      	bne.n	800239e <HAL_TIM_PWM_Start+0xa2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	e003      	b.n	80023a6 <HAL_TIM_PWM_Start+0xaa>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fd7c 	bl	8002eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_TIM_PWM_Start+0x138>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d107      	bne.n	80023ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_PWM_Start+0x138>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00e      	beq.n	80023f6 <HAL_TIM_PWM_Start+0xfa>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d009      	beq.n	80023f6 <HAL_TIM_PWM_Start+0xfa>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_TIM_PWM_Start+0x13c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <HAL_TIM_PWM_Start+0xfa>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_TIM_PWM_Start+0x140>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d111      	bne.n	800241a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b06      	cmp	r3, #6
 8002406:	d010      	beq.n	800242a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002418:	e007      	b.n	800242a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800

08002440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0202 	mvn.w	r2, #2
 800246c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa76 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa69 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa78 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0204 	mvn.w	r2, #4
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa4c 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa3f 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fa4e 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0208 	mvn.w	r2, #8
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa22 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa15 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fa24 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0210 	mvn.w	r2, #16
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2208      	movs	r2, #8
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9f8 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f9eb 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f9fa 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0201 	mvn.w	r2, #1
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fa80 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fce9 	bl	8002fc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f9be 	bl	8002998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0220 	mvn.w	r2, #32
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fcb4 	bl	8002fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ae      	b.n	80027cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	f200 809f 	bhi.w	80027bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026b9 	.word	0x080026b9
 8002688:	080027bd 	.word	0x080027bd
 800268c:	080027bd 	.word	0x080027bd
 8002690:	080027bd 	.word	0x080027bd
 8002694:	080026f9 	.word	0x080026f9
 8002698:	080027bd 	.word	0x080027bd
 800269c:	080027bd 	.word	0x080027bd
 80026a0:	080027bd 	.word	0x080027bd
 80026a4:	0800273b 	.word	0x0800273b
 80026a8:	080027bd 	.word	0x080027bd
 80026ac:	080027bd 	.word	0x080027bd
 80026b0:	080027bd 	.word	0x080027bd
 80026b4:	0800277b 	.word	0x0800277b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f9d6 	bl	8002a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6999      	ldr	r1, [r3, #24]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
      break;
 80026f6:	e064      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fa1c 	bl	8002b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
      break;
 8002738:	e043      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fa65 	bl	8002c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0208 	orr.w	r2, r2, #8
 8002754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69d9      	ldr	r1, [r3, #28]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
      break;
 8002778:	e023      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 faaf 	bl	8002ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	61da      	str	r2, [r3, #28]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
      break;
 80027c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_ConfigClockSource+0x1c>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0b4      	b.n	800295a <HAL_TIM_ConfigClockSource+0x186>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	d03e      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xd4>
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	f200 8087 	bhi.w	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	f000 8086 	beq.w	8002946 <HAL_TIM_ConfigClockSource+0x172>
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d87f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d01a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0xa6>
 8002844:	2b70      	cmp	r3, #112	; 0x70
 8002846:	d87b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d050      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x11a>
 800284c:	2b60      	cmp	r3, #96	; 0x60
 800284e:	d877      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d03c      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xfa>
 8002854:	2b50      	cmp	r3, #80	; 0x50
 8002856:	d873      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d058      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x13a>
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d86f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d064      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b30      	cmp	r3, #48	; 0x30
 8002866:	d86b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d060      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	2b20      	cmp	r3, #32
 800286e:	d867      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	2b10      	cmp	r3, #16
 8002876:	d05a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002878:	e062      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f000 faf0 	bl	8002e6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800289c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
      break;
 80028a6:	e04f      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f000 fad9 	bl	8002e6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e03c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 fa50 	bl	8002d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 faa7 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 80028ec:	e02c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 fa6e 	bl	8002ddc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fa97 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800290c:	e01c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 fa30 	bl	8002d80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fa87 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800292c:	e00c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 fa7e 	bl	8002e3a <TIM_ITRx_SetConfig>
      break;
 800293e:	e003      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e000      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00b      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d007      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_Base_SetConfig+0x30>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <TIM_Base_SetConfig+0xbc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x62>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <TIM_Base_SetConfig+0xb8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 0201 	bic.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f023 0302 	bic.w	r3, r3, #2
 8002ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a1c      	ldr	r2, [pc, #112]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10c      	bne.n	8002ae6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0308 	bic.w	r3, r3, #8
 8002ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <TIM_OC1_SetConfig+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d111      	bne.n	8002b12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	621a      	str	r2, [r3, #32]
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40012c00 	.word	0x40012c00

08002b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 0210 	bic.w	r2, r3, #16
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f023 0320 	bic.w	r3, r3, #32
 8002b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10d      	bne.n	8002bb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <TIM_OC2_SetConfig+0xd0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d113      	bne.n	8002be8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40012c00 	.word	0x40012c00

08002c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10d      	bne.n	8002c8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <TIM_OC3_SetConfig+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d113      	bne.n	8002cba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	621a      	str	r2, [r3, #32]
}
 8002cd4:	bf00      	nop
 8002cd6:	371c      	adds	r7, #28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40012c00 	.word	0x40012c00

08002ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	031b      	lsls	r3, r3, #12
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <TIM_OC4_SetConfig+0x98>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d109      	bne.n	8002d58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	019b      	lsls	r3, r3, #6
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	bf00      	nop
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	40012c00 	.word	0x40012c00

08002d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0201 	bic.w	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 030a 	bic.w	r3, r3, #10
 8002dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	621a      	str	r2, [r3, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0210 	bic.w	r2, r3, #16
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	031b      	lsls	r3, r3, #12
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	621a      	str	r2, [r3, #32]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f043 0307 	orr.w	r3, r3, #7
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	021a      	lsls	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	609a      	str	r2, [r3, #8]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	401a      	ands	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e046      	b.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a16      	ldr	r2, [pc, #88]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f58:	d009      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10c      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800

08002fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e042      	b.n	800306c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd ffc4 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fc7f 	bl	800391c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800302c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800303c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b0ba      	sub	sp, #232	; 0xe8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d009      	beq.n	80030da <HAL_UART_IRQHandler+0x66>
 80030c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fb63 	bl	800379e <UART_Receive_IT>
      return;
 80030d8:	e25b      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80de 	beq.w	80032a0 <HAL_UART_IRQHandler+0x22c>
 80030e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80d1 	beq.w	80032a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_UART_IRQHandler+0xae>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	f043 0201 	orr.w	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
 800312e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_UART_IRQHandler+0xf6>
 8003152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d011      	beq.n	800319a <HAL_UART_IRQHandler+0x126>
 8003176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f043 0208 	orr.w	r2, r3, #8
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 81f2 	beq.w	8003588 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_UART_IRQHandler+0x14e>
 80031b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 faee 	bl	800379e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_UART_IRQHandler+0x17a>
 80031e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d04f      	beq.n	800328e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f9f8 	bl	80035e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d041      	beq.n	8003286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800321c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3314      	adds	r3, #20
 800322a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800322e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800323a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800323e:	e841 2300 	strex	r3, r2, [r1]
 8003242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1d9      	bne.n	8003202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d013      	beq.n	800327e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	4a7e      	ldr	r2, [pc, #504]	; (8003454 <HAL_UART_IRQHandler+0x3e0>)
 800325c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe f8fe 	bl	8001464 <HAL_DMA_Abort_IT>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003278:	4610      	mov	r0, r2
 800327a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e00e      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f99c 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00a      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f998 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e006      	b.n	800329c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f994 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800329a:	e175      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	bf00      	nop
    return;
 800329e:	e173      	b.n	8003588 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	f040 814f 	bne.w	8003548 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8148 	beq.w	8003548 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8141 	beq.w	8003548 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80b6 	beq.w	8003458 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8145 	beq.w	800358c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800330a:	429a      	cmp	r2, r3
 800330c:	f080 813e 	bcs.w	800358c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003316:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b20      	cmp	r3, #32
 8003320:	f000 8088 	beq.w	8003434 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800333a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800333e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003342:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	330c      	adds	r3, #12
 800334c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003350:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800335c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1d9      	bne.n	8003324 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003382:	f023 0301 	bic.w	r3, r3, #1
 8003386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003394:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003398:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800339c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e1      	bne.n	8003370 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e3      	bne.n	80033ac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003404:	f023 0310 	bic.w	r3, r3, #16
 8003408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	330c      	adds	r3, #12
 8003412:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003416:	65ba      	str	r2, [r7, #88]	; 0x58
 8003418:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800341c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e3      	bne.n	80033f2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd ffdd 	bl	80013ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003442:	b29b      	uxth	r3, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	b29b      	uxth	r3, r3
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8bf 	bl	80035ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003450:	e09c      	b.n	800358c <HAL_UART_IRQHandler+0x518>
 8003452:	bf00      	nop
 8003454:	080036a9 	.word	0x080036a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003460:	b29b      	uxth	r3, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 808e 	beq.w	8003590 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8089 	beq.w	8003590 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034a2:	647a      	str	r2, [r7, #68]	; 0x44
 80034a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e3      	bne.n	800347e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3314      	adds	r3, #20
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	623b      	str	r3, [r7, #32]
   return(result);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3314      	adds	r3, #20
 80034d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034da:	633a      	str	r2, [r7, #48]	; 0x30
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e2:	e841 2300 	strex	r3, r2, [r1]
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1e3      	bne.n	80034b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	e853 3f00 	ldrex	r3, [r3]
 800350a:	60fb      	str	r3, [r7, #12]
   return(result);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0310 	bic.w	r3, r3, #16
 8003512:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003520:	61fa      	str	r2, [r7, #28]
 8003522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	69b9      	ldr	r1, [r7, #24]
 8003526:	69fa      	ldr	r2, [r7, #28]
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	617b      	str	r3, [r7, #20]
   return(result);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e3      	bne.n	80034fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800353a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f844 	bl	80035ce <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003546:	e023      	b.n	8003590 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	2b00      	cmp	r3, #0
 8003552:	d009      	beq.n	8003568 <HAL_UART_IRQHandler+0x4f4>
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f8b5 	bl	80036d0 <UART_Transmit_IT>
    return;
 8003566:	e014      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <HAL_UART_IRQHandler+0x51e>
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f8f4 	bl	800376e <UART_EndTransmit_IT>
    return;
 8003586:	e004      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
    return;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
      return;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_UART_IRQHandler+0x51e>
      return;
 8003590:	bf00      	nop
  }
}
 8003592:	37e8      	adds	r7, #232	; 0xe8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b095      	sub	sp, #84	; 0x54
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360c:	643a      	str	r2, [r7, #64]	; 0x40
 800360e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3314      	adds	r3, #20
 8003626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	64bb      	str	r3, [r7, #72]	; 0x48
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e5      	bne.n	8003620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	2b01      	cmp	r3, #1
 800365a:	d119      	bne.n	8003690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	60bb      	str	r3, [r7, #8]
   return(result);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 0310 	bic.w	r3, r3, #16
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800367c:	61ba      	str	r2, [r7, #24]
 800367e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6979      	ldr	r1, [r7, #20]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	613b      	str	r3, [r7, #16]
   return(result);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800369e:	bf00      	nop
 80036a0:	3754      	adds	r7, #84	; 0x54
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f7ff ff7a 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b21      	cmp	r3, #33	; 0x21
 80036e2:	d13e      	bne.n	8003762 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ec:	d114      	bne.n	8003718 <UART_Transmit_IT+0x48>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d110      	bne.n	8003718 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800370a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]
 8003716:	e008      	b.n	800372a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6211      	str	r1, [r2, #32]
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4619      	mov	r1, r3
 8003738:	84d1      	strh	r1, [r2, #38]	; 0x26
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800374c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003784:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ff02 	bl	8003598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b08c      	sub	sp, #48	; 0x30
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b22      	cmp	r3, #34	; 0x22
 80037b0:	f040 80ae 	bne.w	8003910 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037bc:	d117      	bne.n	80037ee <UART_Receive_IT+0x50>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d113      	bne.n	80037ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	1c9a      	adds	r2, r3, #2
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
 80037ec:	e026      	b.n	800383c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d007      	beq.n	8003812 <UART_Receive_IT+0x74>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <UART_Receive_IT+0x82>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e008      	b.n	8003832 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382c:	b2da      	uxtb	r2, r3
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4619      	mov	r1, r3
 800384a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800384c:	2b00      	cmp	r3, #0
 800384e:	d15d      	bne.n	800390c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0220 	bic.w	r2, r2, #32
 800385e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	2b01      	cmp	r3, #1
 8003894:	d135      	bne.n	8003902 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	613b      	str	r3, [r7, #16]
   return(result);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f023 0310 	bic.w	r3, r3, #16
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038bc:	623a      	str	r2, [r7, #32]
 80038be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	69f9      	ldr	r1, [r7, #28]
 80038c2:	6a3a      	ldr	r2, [r7, #32]
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d10a      	bne.n	80038f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038f8:	4619      	mov	r1, r3
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff fe67 	bl	80035ce <HAL_UARTEx_RxEventCallback>
 8003900:	e002      	b.n	8003908 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff fe51 	bl	80035aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e002      	b.n	8003912 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3730      	adds	r7, #48	; 0x30
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003956:	f023 030c 	bic.w	r3, r3, #12
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	430b      	orrs	r3, r1
 8003962:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <UART_SetConfig+0x114>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d103      	bne.n	800398c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003984:	f7fe fb8e 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	e002      	b.n	8003992 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800398c:	f7fe fb76 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8003990:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009a      	lsls	r2, r3, #2
 800399c:	441a      	add	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <UART_SetConfig+0x118>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	0119      	lsls	r1, r3, #4
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c8:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <UART_SetConfig+0x118>)
 80039ca:	fba3 0302 	umull	r0, r3, r3, r2
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2064      	movs	r0, #100	; 0x64
 80039d2:	fb00 f303 	mul.w	r3, r0, r3
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	3332      	adds	r3, #50	; 0x32
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <UART_SetConfig+0x118>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e8:	4419      	add	r1, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	009a      	lsls	r2, r3, #2
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <UART_SetConfig+0x118>)
 8003a02:	fba3 0302 	umull	r0, r3, r3, r2
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	2064      	movs	r0, #100	; 0x64
 8003a0a:	fb00 f303 	mul.w	r3, r0, r3
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	3332      	adds	r3, #50	; 0x32
 8003a14:	4a07      	ldr	r2, [pc, #28]	; (8003a34 <UART_SetConfig+0x118>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	440a      	add	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40013800 	.word	0x40013800
 8003a34:	51eb851f 	.word	0x51eb851f

08003a38 <__libc_init_array>:
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	2600      	movs	r6, #0
 8003a3c:	4d0c      	ldr	r5, [pc, #48]	; (8003a70 <__libc_init_array+0x38>)
 8003a3e:	4c0d      	ldr	r4, [pc, #52]	; (8003a74 <__libc_init_array+0x3c>)
 8003a40:	1b64      	subs	r4, r4, r5
 8003a42:	10a4      	asrs	r4, r4, #2
 8003a44:	42a6      	cmp	r6, r4
 8003a46:	d109      	bne.n	8003a5c <__libc_init_array+0x24>
 8003a48:	f000 f822 	bl	8003a90 <_init>
 8003a4c:	2600      	movs	r6, #0
 8003a4e:	4d0a      	ldr	r5, [pc, #40]	; (8003a78 <__libc_init_array+0x40>)
 8003a50:	4c0a      	ldr	r4, [pc, #40]	; (8003a7c <__libc_init_array+0x44>)
 8003a52:	1b64      	subs	r4, r4, r5
 8003a54:	10a4      	asrs	r4, r4, #2
 8003a56:	42a6      	cmp	r6, r4
 8003a58:	d105      	bne.n	8003a66 <__libc_init_array+0x2e>
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}
 8003a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a60:	4798      	blx	r3
 8003a62:	3601      	adds	r6, #1
 8003a64:	e7ee      	b.n	8003a44 <__libc_init_array+0xc>
 8003a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a6a:	4798      	blx	r3
 8003a6c:	3601      	adds	r6, #1
 8003a6e:	e7f2      	b.n	8003a56 <__libc_init_array+0x1e>
 8003a70:	08003ad4 	.word	0x08003ad4
 8003a74:	08003ad4 	.word	0x08003ad4
 8003a78:	08003ad4 	.word	0x08003ad4
 8003a7c:	08003ad8 	.word	0x08003ad8

08003a80 <memset>:
 8003a80:	4603      	mov	r3, r0
 8003a82:	4402      	add	r2, r0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d100      	bne.n	8003a8a <memset+0xa>
 8003a88:	4770      	bx	lr
 8003a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8e:	e7f9      	b.n	8003a84 <memset+0x4>

08003a90 <_init>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	bf00      	nop
 8003a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a96:	bc08      	pop	{r3}
 8003a98:	469e      	mov	lr, r3
 8003a9a:	4770      	bx	lr

08003a9c <_fini>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	bf00      	nop
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr
