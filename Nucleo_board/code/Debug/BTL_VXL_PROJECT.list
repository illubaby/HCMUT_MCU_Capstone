
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b18  08003b18  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003b18  08003b18  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b18  08003b18  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000064  08003b84  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003b84  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c02  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002945  00000000  00000000  00034c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000375d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00038350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019594  00000000  00000000  00038fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011347  00000000  00000000  00052554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae74  00000000  00000000  0006389b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee70f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035bc  00000000  00000000  000ee764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ad4 	.word	0x08003ad4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003ad4 	.word	0x08003ad4

0800014c <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000080 	.word	0x20000080

08000180 <subKeyProcess>:

void subKeyProcess(int i){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000080 	.word	0x20000080

080001a0 <ReadPin>:

GPIO_PinState ReadPin(int index){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d105      	bne.n	80001ba <ReadPin+0x1a>
 80001ae:	2102      	movs	r1, #2
 80001b0:	4812      	ldr	r0, [pc, #72]	; (80001fc <ReadPin+0x5c>)
 80001b2:	f001 fb8d 	bl	80018d0 <HAL_GPIO_ReadPin>
 80001b6:	4603      	mov	r3, r0
 80001b8:	e01b      	b.n	80001f2 <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d105      	bne.n	80001cc <ReadPin+0x2c>
 80001c0:	2110      	movs	r1, #16
 80001c2:	480e      	ldr	r0, [pc, #56]	; (80001fc <ReadPin+0x5c>)
 80001c4:	f001 fb84 	bl	80018d0 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	e012      	b.n	80001f2 <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d105      	bne.n	80001de <ReadPin+0x3e>
 80001d2:	2101      	movs	r1, #1
 80001d4:	480a      	ldr	r0, [pc, #40]	; (8000200 <ReadPin+0x60>)
 80001d6:	f001 fb7b 	bl	80018d0 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	e009      	b.n	80001f2 <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b03      	cmp	r3, #3
 80001e2:	d105      	bne.n	80001f0 <ReadPin+0x50>
 80001e4:	2101      	movs	r1, #1
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <ReadPin+0x5c>)
 80001e8:	f001 fb72 	bl	80018d0 <HAL_GPIO_ReadPin>
 80001ec:	4603      	mov	r3, r0
 80001ee:	e000      	b.n	80001f2 <ReadPin+0x52>
	else return 0;
 80001f0:	2300      	movs	r3, #0
}
 80001f2:	4618      	mov	r0, r3
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <getKeyinput>:

void getKeyinput(){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e05c      	b.n	80002ca <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 8000210:	4a32      	ldr	r2, [pc, #200]	; (80002dc <getKeyinput+0xd8>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4931      	ldr	r1, [pc, #196]	; (80002e0 <getKeyinput+0xdc>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000220:	4a30      	ldr	r2, [pc, #192]	; (80002e4 <getKeyinput+0xe0>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	492c      	ldr	r1, [pc, #176]	; (80002dc <getKeyinput+0xd8>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffb5 	bl	80001a0 <ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	4619      	mov	r1, r3
 800023a:	4a2a      	ldr	r2, [pc, #168]	; (80002e4 <getKeyinput+0xe0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <getKeyinput+0xdc>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4924      	ldr	r1, [pc, #144]	; (80002dc <getKeyinput+0xd8>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d136      	bne.n	80002c4 <getKeyinput+0xc0>
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <getKeyinput+0xd8>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4921      	ldr	r1, [pc, #132]	; (80002e4 <getKeyinput+0xe0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000266:	429a      	cmp	r2, r3
 8000268:	d12c      	bne.n	80002c4 <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 800026a:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <getKeyinput+0xe4>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000272:	491c      	ldr	r1, [pc, #112]	; (80002e4 <getKeyinput+0xe0>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027a:	429a      	cmp	r2, r3
 800027c:	d014      	beq.n	80002a8 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <getKeyinput+0xe0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000286:	4918      	ldr	r1, [pc, #96]	; (80002e8 <getKeyinput+0xe4>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 800028e:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <getKeyinput+0xe4>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d114      	bne.n	80002c4 <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <getKeyinput+0xe8>)
 800029c:	22c8      	movs	r2, #200	; 0xc8
 800029e:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff6d 	bl	8000180 <subKeyProcess>
 80002a6:	e00d      	b.n	80002c4 <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <getKeyinput+0xe8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a0f      	ldr	r2, [pc, #60]	; (80002ec <getKeyinput+0xe8>)
 80002b0:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <getKeyinput+0xe8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d104      	bne.n	80002c4 <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <getKeyinput+0xe4>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2101      	movs	r1, #1
 80002c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	dd9f      	ble.n	8000210 <getKeyinput+0xc>
				}
			}
		}
	}

}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	3708      	adds	r7, #8
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000010 	.word	0x20000010
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000020 	.word	0x20000020
 80002e8:	20000030 	.word	0x20000030
 80002ec:	20000040 	.word	0x20000040

080002f0 <buzzer>:
 */

#include "buzzer.h"

int buzzer_counter=5;
void buzzer(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	if (timer_flag[7]==1){
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <buzzer+0x3c>)
 80002f6:	69db      	ldr	r3, [r3, #28]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d114      	bne.n	8000326 <buzzer+0x36>
		buzzer_counter--;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <buzzer+0x40>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	3b01      	subs	r3, #1
 8000302:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <buzzer+0x40>)
 8000304:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,buzzer_counter/red_time*100);
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <buzzer+0x40>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <buzzer+0x44>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000312:	2264      	movs	r2, #100	; 0x64
 8000314:	fb02 f203 	mul.w	r2, r2, r3
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <buzzer+0x48>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	635a      	str	r2, [r3, #52]	; 0x34
	setTimer(100, 7);
 800031e:	2107      	movs	r1, #7
 8000320:	2064      	movs	r0, #100	; 0x64
 8000322:	f000 fd7f 	bl	8000e24 <setTimer>
	}
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	200000c8 	.word	0x200000c8
 8000330:	20000044 	.word	0x20000044
 8000334:	2000004c 	.word	0x2000004c
 8000338:	200000fc 	.word	0x200000fc

0800033c <fsm_auto>:
int green_time = 3;
int red_time_cd = 0 ; // temp variable for red time length
int yellow_time_cd= 0 ;
int green_time_cd = 0 ;

void fsm_auto(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch (status){
 8000340:	4b57      	ldr	r3, [pc, #348]	; (80004a0 <fsm_auto+0x164>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b5a      	subs	r3, #90	; 0x5a
 8000346:	2b04      	cmp	r3, #4
 8000348:	f200 809e 	bhi.w	8000488 <fsm_auto+0x14c>
 800034c:	a201      	add	r2, pc, #4	; (adr r2, 8000354 <fsm_auto+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000369 	.word	0x08000369
 8000358:	08000389 	.word	0x08000389
 800035c:	080003c5 	.word	0x080003c5
 8000360:	08000409 	.word	0x08000409
 8000364:	08000445 	.word	0x08000445
	case INIT:
		red_time_cd = red_time; // time length = 5s, start at 4 and end at 0
 8000368:	4b4e      	ldr	r3, [pc, #312]	; (80004a4 <fsm_auto+0x168>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a4e      	ldr	r2, [pc, #312]	; (80004a8 <fsm_auto+0x16c>)
 800036e:	6013      	str	r3, [r2, #0]
		green_time_cd = green_time;
 8000370:	4b4e      	ldr	r3, [pc, #312]	; (80004ac <fsm_auto+0x170>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a4e      	ldr	r2, [pc, #312]	; (80004b0 <fsm_auto+0x174>)
 8000376:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 8000378:	2100      	movs	r1, #0
 800037a:	2064      	movs	r0, #100	; 0x64
 800037c:	f000 fd52 	bl	8000e24 <setTimer>
		status = AUTO_RED_GREEN;
 8000380:	4b47      	ldr	r3, [pc, #284]	; (80004a0 <fsm_auto+0x164>)
 8000382:	225b      	movs	r2, #91	; 0x5b
 8000384:	601a      	str	r2, [r3, #0]
		break;
 8000386:	e088      	b.n	800049a <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 8000388:	4b4a      	ldr	r3, [pc, #296]	; (80004b4 <fsm_auto+0x178>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d17d      	bne.n	800048c <fsm_auto+0x150>
			red_time_cd --;
 8000390:	4b45      	ldr	r3, [pc, #276]	; (80004a8 <fsm_auto+0x16c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3b01      	subs	r3, #1
 8000396:	4a44      	ldr	r2, [pc, #272]	; (80004a8 <fsm_auto+0x16c>)
 8000398:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 800039a:	4b45      	ldr	r3, [pc, #276]	; (80004b0 <fsm_auto+0x174>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3b01      	subs	r3, #1
 80003a0:	4a43      	ldr	r2, [pc, #268]	; (80004b0 <fsm_auto+0x174>)
 80003a2:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 80003a4:	4b42      	ldr	r3, [pc, #264]	; (80004b0 <fsm_auto+0x174>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d106      	bne.n	80003ba <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 80003ac:	4b3c      	ldr	r3, [pc, #240]	; (80004a0 <fsm_auto+0x164>)
 80003ae:	225c      	movs	r2, #92	; 0x5c
 80003b0:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 80003b2:	4b41      	ldr	r3, [pc, #260]	; (80004b8 <fsm_auto+0x17c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a41      	ldr	r2, [pc, #260]	; (80004bc <fsm_auto+0x180>)
 80003b8:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 fd31 	bl	8000e24 <setTimer>
		}
		break;
 80003c2:	e063      	b.n	800048c <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 80003c4:	4b3b      	ldr	r3, [pc, #236]	; (80004b4 <fsm_auto+0x178>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d161      	bne.n	8000490 <fsm_auto+0x154>
			red_time_cd --;
 80003cc:	4b36      	ldr	r3, [pc, #216]	; (80004a8 <fsm_auto+0x16c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	4a35      	ldr	r2, [pc, #212]	; (80004a8 <fsm_auto+0x16c>)
 80003d4:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 80003d6:	4b39      	ldr	r3, [pc, #228]	; (80004bc <fsm_auto+0x180>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a37      	ldr	r2, [pc, #220]	; (80004bc <fsm_auto+0x180>)
 80003de:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 80003e0:	4b36      	ldr	r3, [pc, #216]	; (80004bc <fsm_auto+0x180>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d10a      	bne.n	80003fe <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 80003e8:	4b2d      	ldr	r3, [pc, #180]	; (80004a0 <fsm_auto+0x164>)
 80003ea:	225d      	movs	r2, #93	; 0x5d
 80003ec:	601a      	str	r2, [r3, #0]
				red_time_cd = red_time;
 80003ee:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <fsm_auto+0x168>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a2d      	ldr	r2, [pc, #180]	; (80004a8 <fsm_auto+0x16c>)
 80003f4:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 80003f6:	4b2d      	ldr	r3, [pc, #180]	; (80004ac <fsm_auto+0x170>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a2d      	ldr	r2, [pc, #180]	; (80004b0 <fsm_auto+0x174>)
 80003fc:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80003fe:	2100      	movs	r1, #0
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f000 fd0f 	bl	8000e24 <setTimer>
		}
		break;
 8000406:	e043      	b.n	8000490 <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <fsm_auto+0x178>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b01      	cmp	r3, #1
 800040e:	d141      	bne.n	8000494 <fsm_auto+0x158>
			red_time_cd --;
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <fsm_auto+0x16c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3b01      	subs	r3, #1
 8000416:	4a24      	ldr	r2, [pc, #144]	; (80004a8 <fsm_auto+0x16c>)
 8000418:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 800041a:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <fsm_auto+0x174>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3b01      	subs	r3, #1
 8000420:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <fsm_auto+0x174>)
 8000422:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <fsm_auto+0x174>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d106      	bne.n	800043a <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 800042c:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <fsm_auto+0x164>)
 800042e:	225e      	movs	r2, #94	; 0x5e
 8000430:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <fsm_auto+0x17c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <fsm_auto+0x180>)
 8000438:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 800043a:	2100      	movs	r1, #0
 800043c:	2064      	movs	r0, #100	; 0x64
 800043e:	f000 fcf1 	bl	8000e24 <setTimer>
		}
		break;
 8000442:	e027      	b.n	8000494 <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <fsm_auto+0x178>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d125      	bne.n	8000498 <fsm_auto+0x15c>
			red_time_cd --;
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <fsm_auto+0x16c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <fsm_auto+0x16c>)
 8000454:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <fsm_auto+0x180>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3b01      	subs	r3, #1
 800045c:	4a17      	ldr	r2, [pc, #92]	; (80004bc <fsm_auto+0x180>)
 800045e:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000460:	4b16      	ldr	r3, [pc, #88]	; (80004bc <fsm_auto+0x180>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d10a      	bne.n	800047e <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <fsm_auto+0x164>)
 800046a:	225b      	movs	r2, #91	; 0x5b
 800046c:	601a      	str	r2, [r3, #0]
				red_time_cd  = red_time;
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <fsm_auto+0x168>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <fsm_auto+0x16c>)
 8000474:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000476:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <fsm_auto+0x170>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <fsm_auto+0x174>)
 800047c:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	2064      	movs	r0, #100	; 0x64
 8000482:	f000 fccf 	bl	8000e24 <setTimer>
		}
		break;
 8000486:	e007      	b.n	8000498 <fsm_auto+0x15c>
	default: break;
 8000488:	bf00      	nop
 800048a:	e006      	b.n	800049a <fsm_auto+0x15e>
		break;
 800048c:	bf00      	nop
 800048e:	e004      	b.n	800049a <fsm_auto+0x15e>
		break;
 8000490:	bf00      	nop
 8000492:	e002      	b.n	800049a <fsm_auto+0x15e>
		break;
 8000494:	bf00      	nop
 8000496:	e000      	b.n	800049a <fsm_auto+0x15e>
		break;
 8000498:	bf00      	nop
	}
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000048 	.word	0x20000048
 80004a4:	2000004c 	.word	0x2000004c
 80004a8:	20000090 	.word	0x20000090
 80004ac:	20000054 	.word	0x20000054
 80004b0:	20000098 	.word	0x20000098
 80004b4:	200000c8 	.word	0x200000c8
 80004b8:	20000050 	.word	0x20000050
 80004bc:	20000094 	.word	0x20000094

080004c0 <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp, yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <turnbackINIT+0x50>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dd07      	ble.n	80004dc <turnbackINIT+0x1c>
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <turnbackINIT+0x54>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	dd03      	ble.n	80004dc <turnbackINIT+0x1c>
			green_time < 1){
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <turnbackINIT+0x58>)
 80004d6:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 80004d8:	2b00      	cmp	r3, #0
 80004da:	dc08      	bgt.n	80004ee <turnbackINIT+0x2e>
		red_time = 5;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <turnbackINIT+0x50>)
 80004de:	2205      	movs	r2, #5
 80004e0:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <turnbackINIT+0x54>)
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
		green_time = 3;
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <turnbackINIT+0x58>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	601a      	str	r2, [r3, #0]
	}
	setTimer(0, 3); // turn off timer_flag for scan led
 80004ee:	2103      	movs	r1, #3
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fc97 	bl	8000e24 <setTimer>
	red_time = green_time + yellow_time;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <turnbackINIT+0x58>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <turnbackINIT+0x54>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4413      	add	r3, r2
 8000500:	4a03      	ldr	r2, [pc, #12]	; (8000510 <turnbackINIT+0x50>)
 8000502:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <turnbackINIT+0x5c>)
 8000506:	225a      	movs	r2, #90	; 0x5a
 8000508:	601a      	str	r2, [r3, #0]
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000004c 	.word	0x2000004c
 8000514:	20000050 	.word	0x20000050
 8000518:	20000054 	.word	0x20000054
 800051c:	20000048 	.word	0x20000048

08000520 <checkButton1>:
void checkButton1(){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff fe11 	bl	800014c <isButtonPressed>
 800052a:	4603      	mov	r3, r0
 800052c:	2b01      	cmp	r3, #1
 800052e:	d11e      	bne.n	800056e <checkButton1+0x4e>
		//reset set timer

		if (status == MANUAL_RED) {
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <checkButton1+0x54>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b14      	cmp	r3, #20
 8000536:	d103      	bne.n	8000540 <checkButton1+0x20>
			status = MANUAL_YELLOW;
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <checkButton1+0x54>)
 800053a:	2215      	movs	r2, #21
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	e011      	b.n	8000564 <checkButton1+0x44>
		}
		else if (status == MANUAL_YELLOW) {
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <checkButton1+0x54>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b15      	cmp	r3, #21
 8000546:	d103      	bne.n	8000550 <checkButton1+0x30>
			status = MANUAL_GREEN;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <checkButton1+0x54>)
 800054a:	2216      	movs	r2, #22
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	e009      	b.n	8000564 <checkButton1+0x44>
		}
		else if (status == MANUAL_GREEN) {
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <checkButton1+0x54>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b16      	cmp	r3, #22
 8000556:	d102      	bne.n	800055e <checkButton1+0x3e>
			turnbackINIT();
 8000558:	f7ff ffb2 	bl	80004c0 <turnbackINIT>
 800055c:	e002      	b.n	8000564 <checkButton1+0x44>
		}
		else {
			status = MANUAL_INIT; //auto state -> manual state
 800055e:	4b05      	ldr	r3, [pc, #20]	; (8000574 <checkButton1+0x54>)
 8000560:	2217      	movs	r2, #23
 8000562:	601a      	str	r2, [r3, #0]
		}
		setTimer(10000, 2);// after 10 sec don't press button1 -> turn back to auto mode
 8000564:	2102      	movs	r1, #2
 8000566:	f242 7010 	movw	r0, #10000	; 0x2710
 800056a:	f000 fc5b 	bl	8000e24 <setTimer>
	}
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000048 	.word	0x20000048

08000578 <checkButton2>:

void checkButton2(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 800057c:	2001      	movs	r0, #1
 800057e:	f7ff fde5 	bl	800014c <isButtonPressed>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d126      	bne.n	80005d6 <checkButton2+0x5e>
		if (status == MANUAL_RED){
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <checkButton2+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b14      	cmp	r3, #20
 800058e:	d108      	bne.n	80005a2 <checkButton2+0x2a>
			if (red_time_tmp < 99) red_time_tmp++;
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <checkButton2+0x68>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b62      	cmp	r3, #98	; 0x62
 8000596:	dc04      	bgt.n	80005a2 <checkButton2+0x2a>
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <checkButton2+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <checkButton2+0x68>)
 80005a0:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_YELLOW){
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <checkButton2+0x64>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b15      	cmp	r3, #21
 80005a8:	d108      	bne.n	80005bc <checkButton2+0x44>
			if (yellow_time_tmp < 99) yellow_time_tmp++;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <checkButton2+0x6c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b62      	cmp	r3, #98	; 0x62
 80005b0:	dc04      	bgt.n	80005bc <checkButton2+0x44>
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <checkButton2+0x6c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3301      	adds	r3, #1
 80005b8:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <checkButton2+0x6c>)
 80005ba:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_GREEN){
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <checkButton2+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b16      	cmp	r3, #22
 80005c2:	d108      	bne.n	80005d6 <checkButton2+0x5e>
			if (green_time_tmp < 99) green_time_tmp++;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <checkButton2+0x70>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b62      	cmp	r3, #98	; 0x62
 80005ca:	dc04      	bgt.n	80005d6 <checkButton2+0x5e>
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <checkButton2+0x70>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <checkButton2+0x70>)
 80005d4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000048 	.word	0x20000048
 80005e0:	200000f8 	.word	0x200000f8
 80005e4:	200000f0 	.word	0x200000f0
 80005e8:	200000f4 	.word	0x200000f4

080005ec <checkButton3>:
void checkButton3(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 80005f0:	2002      	movs	r0, #2
 80005f2:	f7ff fdab 	bl	800014c <isButtonPressed>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d119      	bne.n	8000630 <checkButton3+0x44>
		if (status == MANUAL_RED){
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <checkButton3+0x48>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b14      	cmp	r3, #20
 8000602:	d104      	bne.n	800060e <checkButton3+0x22>
			red_time = red_time_tmp;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <checkButton3+0x4c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <checkButton3+0x50>)
 800060a:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 800060c:	e010      	b.n	8000630 <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <checkButton3+0x48>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b15      	cmp	r3, #21
 8000614:	d104      	bne.n	8000620 <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <checkButton3+0x54>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <checkButton3+0x58>)
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	e007      	b.n	8000630 <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <checkButton3+0x48>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b16      	cmp	r3, #22
 8000626:	d103      	bne.n	8000630 <checkButton3+0x44>
			green_time = green_time_tmp;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <checkButton3+0x5c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <checkButton3+0x60>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000048 	.word	0x20000048
 8000638:	200000f8 	.word	0x200000f8
 800063c:	2000004c 	.word	0x2000004c
 8000640:	200000f0 	.word	0x200000f0
 8000644:	20000050 	.word	0x20000050
 8000648:	200000f4 	.word	0x200000f4
 800064c:	20000054 	.word	0x20000054

08000650 <fsm_manual>:


void fsm_manual(){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	checkButton1();
 8000654:	f7ff ff64 	bl	8000520 <checkButton1>
	switch (status){
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <fsm_manual+0x94>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3b14      	subs	r3, #20
 800065e:	2b03      	cmp	r3, #3
 8000660:	d83c      	bhi.n	80006dc <fsm_manual+0x8c>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <fsm_manual+0x18>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	0800069b 	.word	0x0800069b
 800066c:	080006b1 	.word	0x080006b1
 8000670:	080006c7 	.word	0x080006c7
 8000674:	08000679 	.word	0x08000679
	case MANUAL_INIT:
		red_time_tmp = 0;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <fsm_manual+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
		yellow_time_tmp = 0;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <fsm_manual+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <fsm_manual+0xa0>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <fsm_manual+0x94>)
 800068c:	2214      	movs	r2, #20
 800068e:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 8000690:	2103      	movs	r1, #3
 8000692:	2032      	movs	r0, #50	; 0x32
 8000694:	f000 fbc6 	bl	8000e24 <setTimer>
		break;
 8000698:	e021      	b.n	80006de <fsm_manual+0x8e>
	case MANUAL_RED:
		if (timer_flag [2] == 1) {
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <fsm_manual+0xa4>)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d101      	bne.n	80006a6 <fsm_manual+0x56>
			turnbackINIT();
 80006a2:	f7ff ff0d 	bl	80004c0 <turnbackINIT>
		}
		checkButton2();
 80006a6:	f7ff ff67 	bl	8000578 <checkButton2>
		checkButton3();
 80006aa:	f7ff ff9f 	bl	80005ec <checkButton3>
		break;
 80006ae:	e016      	b.n	80006de <fsm_manual+0x8e>
	case MANUAL_YELLOW:
		if (timer_flag [2] == 1){
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <fsm_manual+0xa4>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d101      	bne.n	80006bc <fsm_manual+0x6c>
			turnbackINIT();
 80006b8:	f7ff ff02 	bl	80004c0 <turnbackINIT>
		}
		checkButton2();
 80006bc:	f7ff ff5c 	bl	8000578 <checkButton2>
		checkButton3();
 80006c0:	f7ff ff94 	bl	80005ec <checkButton3>
		break;
 80006c4:	e00b      	b.n	80006de <fsm_manual+0x8e>
	case MANUAL_GREEN:
		if (timer_flag [2] == 1){
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <fsm_manual+0xa4>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d101      	bne.n	80006d2 <fsm_manual+0x82>
			turnbackINIT();
 80006ce:	f7ff fef7 	bl	80004c0 <turnbackINIT>
		}
		checkButton2();
 80006d2:	f7ff ff51 	bl	8000578 <checkButton2>
		checkButton3();
 80006d6:	f7ff ff89 	bl	80005ec <checkButton3>
		break;
 80006da:	e000      	b.n	80006de <fsm_manual+0x8e>
	default: break;
 80006dc:	bf00      	nop
	}




}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000048 	.word	0x20000048
 80006e8:	200000f8 	.word	0x200000f8
 80006ec:	200000f0 	.word	0x200000f0
 80006f0:	200000f4 	.word	0x200000f4
 80006f4:	200000c8 	.word	0x200000c8

080006f8 <fsm_pedestrian_light>:
 *      Author: Admin
 */

#include "fsm_pedestrian_light.h"

void fsm_pedestrian_light(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	if(isButtonPressed(3)){
 80006fc:	2003      	movs	r0, #3
 80006fe:	f7ff fd25 	bl	800014c <isButtonPressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d004      	beq.n	8000712 <fsm_pedestrian_light+0x1a>
		setTimer(1500,4);
 8000708:	2104      	movs	r1, #4
 800070a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800070e:	f000 fb89 	bl	8000e24 <setTimer>
	}
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f000 fd32 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f826 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f94c 	bl	80009c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000728:	f000 f85e 	bl	80007e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800072c:	f000 f91e 	bl	800096c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000730:	f000 f8a6 	bl	8000880 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <main+0x48>)
 8000736:	f001 fd59 	bl	80021ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <main+0x4c>)
 800073e:	f001 fdff 	bl	8002340 <HAL_TIM_PWM_Start>
  setTimer(10, 7);
 8000742:	2107      	movs	r1, #7
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fb6d 	bl	8000e24 <setTimer>
  buzzer_counter = red_time;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <main+0x50>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a07      	ldr	r2, [pc, #28]	; (800076c <main+0x54>)
 8000750:	6013      	str	r3, [r2, #0]
  //  SCH_Add_Task(fsm_pedestrian_light, 0, 1);
  while (1)
    {
      /* USER CODE END WHILE */
  	  //test_IO();
  	  	  fsm_auto();
 8000752:	f7ff fdf3 	bl	800033c <fsm_auto>
  	  	  fsm_manual();
 8000756:	f7ff ff7b 	bl	8000650 <fsm_manual>
  	  	  fsm_pedestrian_light();
 800075a:	f7ff ffcd 	bl	80006f8 <fsm_pedestrian_light>
  	  	  fsm_auto();
 800075e:	e7f8      	b.n	8000752 <main+0x3a>
 8000760:	20000144 	.word	0x20000144
 8000764:	200000fc 	.word	0x200000fc
 8000768:	2000004c 	.word	0x2000004c
 800076c:	20000044 	.word	0x20000044

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b090      	sub	sp, #64	; 0x40
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	2228      	movs	r2, #40	; 0x28
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f003 f9a0 	bl	8003ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000792:	2302      	movs	r3, #2
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000796:	2301      	movs	r3, #1
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079a:	2310      	movs	r3, #16
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079e:	2300      	movs	r3, #0
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0318 	add.w	r3, r7, #24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f8c2 	bl	8001930 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007b2:	f000 f983 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fb2e 	bl	8001e30 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007da:	f000 f96f 	bl	8000abc <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3740      	adds	r7, #64	; 0x40
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM2_Init+0x94>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_TIM2_Init+0x94>)
 800080e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000812:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TIM2_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM2_Init+0x94>)
 800081c:	2207      	movs	r2, #7
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_TIM2_Init+0x94>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_TIM2_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082c:	4813      	ldr	r0, [pc, #76]	; (800087c <MX_TIM2_Init+0x94>)
 800082e:	f001 fc8d 	bl	800214c <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000838:	f000 f940 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM2_Init+0x94>)
 800084a:	f001 ffe5 	bl	8002818 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000854:	f000 f932 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM2_Init+0x94>)
 8000866:	f002 fb67 	bl	8002f38 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f924 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000144 	.word	0x20000144

08000880 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008b2:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <MX_TIM3_Init+0xe8>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008b8:	224f      	movs	r2, #79	; 0x4f
 80008ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80008c2:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008c4:	2263      	movs	r2, #99	; 0x63
 80008c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d4:	4823      	ldr	r0, [pc, #140]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008d6:	f001 fc39 	bl	800214c <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80008e0:	f000 f8ec 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_TIM3_Init+0xe4>)
 80008f2:	f001 ff91 	bl	8002818 <HAL_TIM_ConfigClockSource>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80008fc:	f000 f8de 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000900:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000902:	f001 fcc5 	bl	8002290 <HAL_TIM_PWM_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800090c:	f000 f8d6 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4619      	mov	r1, r3
 800091e:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000920:	f002 fb0a 	bl	8002f38 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800092a:	f000 f8c7 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092e:	2360      	movs	r3, #96	; 0x60
 8000930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000946:	f001 fea5 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000950:	f000 f8b4 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000954:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_TIM3_Init+0xe4>)
 8000956:	f000 fb1f 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 800095a:	bf00      	nop
 800095c:	3738      	adds	r7, #56	; 0x38
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000fc 	.word	0x200000fc
 8000968:	40000400 	.word	0x40000400

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f002 fb38 	bl	8003018 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ae:	f000 f885 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2000018c 	.word	0x2000018c
 80009bc:	40004400 	.word	0x40004400

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b2e      	ldr	r3, [pc, #184]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_GPIO_Init+0xd0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000a0a:	4822      	ldr	r0, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xd4>)
 8000a0c:	f000 ff77 	bl	80018fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <MX_GPIO_Init+0xd8>)
 8000a18:	f000 ff71 	bl	80018fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8000a1c:	2313      	movs	r3, #19
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <MX_GPIO_Init+0xd8>)
 8000a30:	f000 fdca 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	4619      	mov	r1, r3
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <MX_GPIO_Init+0xd4>)
 8000a48:	f000 fdbe 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 8000a4c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000a50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <MX_GPIO_Init+0xd4>)
 8000a66:	f000 fdaf 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 8000a6a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_GPIO_Init+0xd8>)
 8000a84:	f000 fda0 	bl	80015c8 <HAL_GPIO_Init>

}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	40010800 	.word	0x40010800

08000a9c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
 8000aa4:	f000 f936 	bl	8000d14 <scanLed>
	buzzer(); // buzzer
 8000aa8:	f7ff fc22 	bl	80002f0 <buzzer>
	timerRun(); // software timer
 8000aac:	f000 f9d2 	bl	8000e54 <timerRun>
	getKeyinput(); // button
 8000ab0:	f7ff fba8 	bl	8000204 <getKeyinput>

//	SCH_Update();
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <turnoffAll>:

#include "scanLed.h"

int enable_change = 0;
//lenh bat tat den cho nhanh
void turnoffAll(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <turnoffAll+0x4c>)
 8000ad4:	f000 ff13 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2108      	movs	r1, #8
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <turnoffAll+0x50>)
 8000ade:	f000 ff0e 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	480c      	ldr	r0, [pc, #48]	; (8000b18 <turnoffAll+0x50>)
 8000ae8:	f000 ff09 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2110      	movs	r1, #16
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <turnoffAll+0x50>)
 8000af2:	f000 ff04 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <turnoffAll+0x50>)
 8000afe:	f000 fefe 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <turnoffAll+0x4c>)
 8000b0a:	f000 fef8 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <onRed_1>:
void onRed_1(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <onRed_1+0x20>)
 8000b28:	f000 fee9 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <onRed_1+0x24>)
 8000b32:	f000 fee4 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40010800 	.word	0x40010800
 8000b40:	40010c00 	.word	0x40010c00

08000b44 <onYellow_1>:
void onYellow_1(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <onYellow_1+0x20>)
 8000b50:	f000 fed5 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <onYellow_1+0x24>)
 8000b5a:	f000 fed0 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010800 	.word	0x40010800
 8000b68:	40010c00 	.word	0x40010c00

08000b6c <onGreen_1>:
void onGreen_1(){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <onGreen_1+0x20>)
 8000b78:	f000 fec1 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <onGreen_1+0x24>)
 8000b82:	f000 febc 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00

08000b94 <onRed_2>:
void onRed_2(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2120      	movs	r1, #32
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <onRed_2+0x1c>)
 8000b9e:	f000 feae 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <onRed_2+0x1c>)
 8000ba8:	f000 fea9 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40010c00 	.word	0x40010c00

08000bb4 <onYellow_2>:
void onYellow_2(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <onYellow_2+0x1c>)
 8000bbe:	f000 fe9e 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <onYellow_2+0x1c>)
 8000bc8:	f000 fe99 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <onGreen_2>:
void onGreen_2(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2120      	movs	r1, #32
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <onGreen_2+0x1c>)
 8000bde:	f000 fe8e 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2110      	movs	r1, #16
 8000be6:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <onGreen_2+0x1c>)
 8000be8:	f000 fe89 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <offPed>:
void offPed(){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <offPed+0x20>)
 8000c00:	f000 fe7d 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <offPed+0x24>)
 8000c0c:	f000 fe77 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40010800 	.word	0x40010800

08000c1c <onGreenPed>:

void onGreenPed(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <onGreenPed+0x20>)
 8000c28:	f000 fe69 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <onGreenPed+0x24>)
 8000c34:	f000 fe63 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40010800 	.word	0x40010800

08000c44 <onRedPed>:
void onRedPed(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <onRedPed+0x20>)
 8000c50:	f000 fe55 	bl	80018fe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <onRedPed+0x24>)
 8000c5c:	f000 fe4f 	bl	80018fe <HAL_GPIO_WritePin>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40010800 	.word	0x40010800

08000c6c <onRed_Toggle>:
void onRed_Toggle(){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d107      	bne.n	8000c88 <onRed_Toggle+0x1c>
		onRed_1();
 8000c78:	f7ff ff50 	bl	8000b1c <onRed_1>
		onRed_2();
 8000c7c:	f7ff ff8a 	bl	8000b94 <onRed_2>
		enable_change = 1;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 8000c86:	e008      	b.n	8000c9a <onRed_Toggle+0x2e>
	else if (enable_change == 1){
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d104      	bne.n	8000c9a <onRed_Toggle+0x2e>
		turnoffAll();
 8000c90:	f7ff ff1a 	bl	8000ac8 <turnoffAll>
		enable_change = 0;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <onRed_Toggle+0x34>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000009c 	.word	0x2000009c

08000ca4 <onGreen_Toggle>:
void onGreen_Toggle(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <onGreen_Toggle+0x34>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d107      	bne.n	8000cc0 <onGreen_Toggle+0x1c>
		onGreen_1();
 8000cb0:	f7ff ff5c 	bl	8000b6c <onGreen_1>
		onGreen_2();
 8000cb4:	f7ff ff8e 	bl	8000bd4 <onGreen_2>
		enable_change = 1;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <onGreen_Toggle+0x34>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 8000cbe:	e008      	b.n	8000cd2 <onGreen_Toggle+0x2e>
	else if (enable_change == 1){
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <onGreen_Toggle+0x34>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <onGreen_Toggle+0x2e>
		turnoffAll();
 8000cc8:	f7ff fefe 	bl	8000ac8 <turnoffAll>
		enable_change = 0;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <onGreen_Toggle+0x34>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000009c 	.word	0x2000009c

08000cdc <onYellow_Toggle>:
void onYellow_Toggle(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <onYellow_Toggle+0x34>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d107      	bne.n	8000cf8 <onYellow_Toggle+0x1c>
		onYellow_1();
 8000ce8:	f7ff ff2c 	bl	8000b44 <onYellow_1>
		onYellow_2();
 8000cec:	f7ff ff62 	bl	8000bb4 <onYellow_2>
		enable_change = 1;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <onYellow_Toggle+0x34>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 8000cf6:	e008      	b.n	8000d0a <onYellow_Toggle+0x2e>
	else if (enable_change == 1){
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <onYellow_Toggle+0x34>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d104      	bne.n	8000d0a <onYellow_Toggle+0x2e>
		turnoffAll();
 8000d00:	f7ff fee2 	bl	8000ac8 <turnoffAll>
		enable_change = 0;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <onYellow_Toggle+0x34>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000009c 	.word	0x2000009c

08000d14 <scanLed>:
void scanLed(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	switch (status){
 8000d18:	4b40      	ldr	r3, [pc, #256]	; (8000e1c <scanLed+0x108>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b5e      	cmp	r3, #94	; 0x5e
 8000d1e:	dc6c      	bgt.n	8000dfa <scanLed+0xe6>
 8000d20:	2b5b      	cmp	r3, #91	; 0x5b
 8000d22:	da08      	bge.n	8000d36 <scanLed+0x22>
 8000d24:	2b16      	cmp	r3, #22
 8000d26:	d05b      	beq.n	8000de0 <scanLed+0xcc>
 8000d28:	2b16      	cmp	r3, #22
 8000d2a:	dc66      	bgt.n	8000dfa <scanLed+0xe6>
 8000d2c:	2b14      	cmp	r3, #20
 8000d2e:	d03d      	beq.n	8000dac <scanLed+0x98>
 8000d30:	2b15      	cmp	r3, #21
 8000d32:	d048      	beq.n	8000dc6 <scanLed+0xb2>
		if (timer_flag[3] == 1){
			onGreen_Toggle();
			setTimer(50,3);
		}
		break;
	default: break;
 8000d34:	e061      	b.n	8000dfa <scanLed+0xe6>
 8000d36:	3b5b      	subs	r3, #91	; 0x5b
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d85e      	bhi.n	8000dfa <scanLed+0xe6>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <scanLed+0x30>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d6b 	.word	0x08000d6b
 8000d4c:	08000d81 	.word	0x08000d81
 8000d50:	08000d97 	.word	0x08000d97
		onRed_1();
 8000d54:	f7ff fee2 	bl	8000b1c <onRed_1>
		onGreen_2();
 8000d58:	f7ff ff3c 	bl	8000bd4 <onGreen_2>
		if(timer_flag[4] == 0){
 8000d5c:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <scanLed+0x10c>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14c      	bne.n	8000dfe <scanLed+0xea>
			onGreenPed();
 8000d64:	f7ff ff5a 	bl	8000c1c <onGreenPed>
		break;
 8000d68:	e049      	b.n	8000dfe <scanLed+0xea>
		onRed_1();
 8000d6a:	f7ff fed7 	bl	8000b1c <onRed_1>
		onYellow_2();
 8000d6e:	f7ff ff21 	bl	8000bb4 <onYellow_2>
		if(timer_flag[4] == 0){
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <scanLed+0x10c>)
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d143      	bne.n	8000e02 <scanLed+0xee>
			onGreenPed();
 8000d7a:	f7ff ff4f 	bl	8000c1c <onGreenPed>
		break;
 8000d7e:	e040      	b.n	8000e02 <scanLed+0xee>
		onGreen_1();
 8000d80:	f7ff fef4 	bl	8000b6c <onGreen_1>
		onRed_2();
 8000d84:	f7ff ff06 	bl	8000b94 <onRed_2>
		if(timer_flag[4] == 0){
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <scanLed+0x10c>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d13a      	bne.n	8000e06 <scanLed+0xf2>
			onRedPed();
 8000d90:	f7ff ff58 	bl	8000c44 <onRedPed>
		break;
 8000d94:	e037      	b.n	8000e06 <scanLed+0xf2>
		onYellow_1();
 8000d96:	f7ff fed5 	bl	8000b44 <onYellow_1>
		onRed_2();
 8000d9a:	f7ff fefb 	bl	8000b94 <onRed_2>
		if(timer_flag[4] == 0){
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <scanLed+0x10c>)
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d131      	bne.n	8000e0a <scanLed+0xf6>
			onRedPed();
 8000da6:	f7ff ff4d 	bl	8000c44 <onRedPed>
		break;
 8000daa:	e02e      	b.n	8000e0a <scanLed+0xf6>
		offPed();
 8000dac:	f7ff ff22 	bl	8000bf4 <offPed>
		if (timer_flag[3] == 1){
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <scanLed+0x10c>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d12a      	bne.n	8000e0e <scanLed+0xfa>
			onRed_Toggle();
 8000db8:	f7ff ff58 	bl	8000c6c <onRed_Toggle>
			setTimer(50,3);
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	2032      	movs	r0, #50	; 0x32
 8000dc0:	f000 f830 	bl	8000e24 <setTimer>
		break;
 8000dc4:	e023      	b.n	8000e0e <scanLed+0xfa>
		offPed();
 8000dc6:	f7ff ff15 	bl	8000bf4 <offPed>
		if (timer_flag[3] == 1){
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <scanLed+0x10c>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d11f      	bne.n	8000e12 <scanLed+0xfe>
			onYellow_Toggle();
 8000dd2:	f7ff ff83 	bl	8000cdc <onYellow_Toggle>
			setTimer(50,3);
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	2032      	movs	r0, #50	; 0x32
 8000dda:	f000 f823 	bl	8000e24 <setTimer>
		break;
 8000dde:	e018      	b.n	8000e12 <scanLed+0xfe>
		offPed();
 8000de0:	f7ff ff08 	bl	8000bf4 <offPed>
		if (timer_flag[3] == 1){
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <scanLed+0x10c>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d114      	bne.n	8000e16 <scanLed+0x102>
			onGreen_Toggle();
 8000dec:	f7ff ff5a 	bl	8000ca4 <onGreen_Toggle>
			setTimer(50,3);
 8000df0:	2103      	movs	r1, #3
 8000df2:	2032      	movs	r0, #50	; 0x32
 8000df4:	f000 f816 	bl	8000e24 <setTimer>
		break;
 8000df8:	e00d      	b.n	8000e16 <scanLed+0x102>
	default: break;
 8000dfa:	bf00      	nop
 8000dfc:	e00c      	b.n	8000e18 <scanLed+0x104>
		break;
 8000dfe:	bf00      	nop
 8000e00:	e00a      	b.n	8000e18 <scanLed+0x104>
		break;
 8000e02:	bf00      	nop
 8000e04:	e008      	b.n	8000e18 <scanLed+0x104>
		break;
 8000e06:	bf00      	nop
 8000e08:	e006      	b.n	8000e18 <scanLed+0x104>
		break;
 8000e0a:	bf00      	nop
 8000e0c:	e004      	b.n	8000e18 <scanLed+0x104>
		break;
 8000e0e:	bf00      	nop
 8000e10:	e002      	b.n	8000e18 <scanLed+0x104>
		break;
 8000e12:	bf00      	nop
 8000e14:	e000      	b.n	8000e18 <scanLed+0x104>
		break;
 8000e16:	bf00      	nop
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000048 	.word	0x20000048
 8000e20:	200000c8 	.word	0x200000c8

08000e24 <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8000e2e:	4907      	ldr	r1, [pc, #28]	; (8000e4c <setTimer+0x28>)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <setTimer+0x2c>)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	200000a0 	.word	0x200000a0
 8000e50:	200000c8 	.word	0x200000c8

08000e54 <timerRun>:

void timerRun(){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	e01c      	b.n	8000e9a <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000e60:	4a12      	ldr	r2, [pc, #72]	; (8000eac <timerRun+0x58>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd13      	ble.n	8000e94 <timerRun+0x40>
			timer_counter[i]--;
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <timerRun+0x58>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <timerRun+0x58>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <timerRun+0x58>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d104      	bne.n	8000e94 <timerRun+0x40>
				timer_flag [i] = 1;
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <timerRun+0x5c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	dddf      	ble.n	8000e60 <timerRun+0xc>
			}
		}
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	200000a0 	.word	0x200000a0
 8000eb0:	200000c8 	.word	0x200000c8

08000eb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6193      	str	r3, [r2, #24]
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <HAL_MspInit+0x5c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_MspInit+0x60>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_MspInit+0x60>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000

08000f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f28:	d114      	bne.n	8000f54 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_TIM_Base_MspInit+0x78>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_TIM_Base_MspInit+0x78>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_TIM_Base_MspInit+0x78>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	201c      	movs	r0, #28
 8000f48:	f000 fa55 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f4c:	201c      	movs	r0, #28
 8000f4e:	f000 fa6e 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f52:	e018      	b.n	8000f86 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <HAL_TIM_Base_MspInit+0x7c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d113      	bne.n	8000f86 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_TIM_Base_MspInit+0x78>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_TIM_Base_MspInit+0x78>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_TIM_Base_MspInit+0x78>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	201d      	movs	r0, #29
 8000f7c:	f000 fa3b 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f80:	201d      	movs	r0, #29
 8000f82:	f000 fa54 	bl	800142e <HAL_NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40000400 	.word	0x40000400

08000f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <HAL_TIM_MspPostInit+0x58>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d117      	bne.n	8000fe8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_TIM_MspPostInit+0x5c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_TIM_MspPostInit+0x5c>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_TIM_MspPostInit+0x5c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000fd0:	2340      	movs	r3, #64	; 0x40
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <HAL_TIM_MspPostInit+0x60>)
 8000fe4:	f000 faf0 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010800 	.word	0x40010800

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <HAL_UART_MspInit+0x98>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d137      	bne.n	800108c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <HAL_UART_MspInit+0x9c>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_UART_MspInit+0x9c>)
 8001022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001026:	61d3      	str	r3, [r2, #28]
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_UART_MspInit+0x9c>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_UART_MspInit+0x9c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_UART_MspInit+0x9c>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_UART_MspInit+0x9c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800104c:	2304      	movs	r3, #4
 800104e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <HAL_UART_MspInit+0xa0>)
 8001060:	f000 fab2 	bl	80015c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001064:	2308      	movs	r3, #8
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <HAL_UART_MspInit+0xa0>)
 8001078:	f000 faa6 	bl	80015c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2026      	movs	r0, #38	; 0x26
 8001082:	f000 f9b8 	bl	80013f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001086:	2026      	movs	r0, #38	; 0x26
 8001088:	f000 f9d1 	bl	800142e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40004400 	.word	0x40004400
 8001098:	40021000 	.word	0x40021000
 800109c:	40010800 	.word	0x40010800

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <NMI_Handler+0x4>

080010a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <MemManage_Handler+0x4>

080010b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <UsageFault_Handler+0x4>

080010be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 f893 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM2_IRQHandler+0x10>)
 80010f6:	f001 f9c5 	bl	8002484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000144 	.word	0x20000144

08001104 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM3_IRQHandler+0x10>)
 800110a:	f001 f9bb 	bl	8002484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200000fc 	.word	0x200000fc

08001118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART2_IRQHandler+0x10>)
 800111e:	f001 ffcb 	bl	80030b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000018c 	.word	0x2000018c

0800112c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001138:	f7ff fff8 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800113e:	490c      	ldr	r1, [pc, #48]	; (8001170 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001154:	4c09      	ldr	r4, [pc, #36]	; (800117c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 fc8b 	bl	8003a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001166:	f7ff fad7 	bl	8000718 <main>
  bx lr
 800116a:	4770      	bx	lr
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001174:	08003b20 	.word	0x08003b20
  ldr r2, =_sbss
 8001178:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800117c:	200001d8 	.word	0x200001d8

08001180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x28>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x28>)
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f923 	bl	80013e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fe88 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f93b 	bl	800144a <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f903 	bl	80013f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000058 	.word	0x20000058
 8001208:	20000060 	.word	0x20000060
 800120c:	2000005c 	.word	0x2000005c

08001210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x1c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x20>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a03      	ldr	r2, [pc, #12]	; (8001230 <HAL_IncTick+0x20>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000060 	.word	0x20000060
 8001230:	200001d4 	.word	0x200001d4

08001234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <HAL_GetTick+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	200001d4 	.word	0x200001d4

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4906      	ldr	r1, [pc, #24]	; (80012e0 <__NVIC_EnableIRQ+0x34>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ac:	d301      	bcc.n	80013b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00f      	b.n	80013d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <SysTick_Config+0x40>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ba:	210f      	movs	r1, #15
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f7ff ff90 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <SysTick_Config+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ca:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SysTick_Config+0x40>)
 80013cc:	2207      	movs	r2, #7
 80013ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff2d 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001408:	f7ff ff42 	bl	8001290 <__NVIC_GetPriorityGrouping>
 800140c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f7ff ff90 	bl	8001338 <NVIC_EncodePriority>
 8001418:	4602      	mov	r2, r0
 800141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff5f 	bl	80012e4 <__NVIC_SetPriority>
}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff35 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffa2 	bl	800139c <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001462:	b480      	push	{r7}
 8001464:	b085      	sub	sp, #20
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d008      	beq.n	800148c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2204      	movs	r2, #4
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e020      	b.n	80014ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 020e 	bic.w	r2, r2, #14
 800149a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b4:	2101      	movs	r1, #1
 80014b6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d005      	beq.n	80014fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2204      	movs	r2, #4
 80014f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e051      	b.n	80015a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 020e 	bic.w	r2, r2, #14
 800150a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	; (80015ac <HAL_DMA_Abort_IT+0xd4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d029      	beq.n	800157a <HAL_DMA_Abort_IT+0xa2>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <HAL_DMA_Abort_IT+0xd8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d022      	beq.n	8001576 <HAL_DMA_Abort_IT+0x9e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a1f      	ldr	r2, [pc, #124]	; (80015b4 <HAL_DMA_Abort_IT+0xdc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01a      	beq.n	8001570 <HAL_DMA_Abort_IT+0x98>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <HAL_DMA_Abort_IT+0xe0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d012      	beq.n	800156a <HAL_DMA_Abort_IT+0x92>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <HAL_DMA_Abort_IT+0xe4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00a      	beq.n	8001564 <HAL_DMA_Abort_IT+0x8c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_DMA_Abort_IT+0xe8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d102      	bne.n	800155e <HAL_DMA_Abort_IT+0x86>
 8001558:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800155c:	e00e      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 800155e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001562:	e00b      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	e008      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 800156a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156e:	e005      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 8001570:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001574:	e002      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 8001576:	2310      	movs	r3, #16
 8001578:	e000      	b.n	800157c <HAL_DMA_Abort_IT+0xa4>
 800157a:	2301      	movs	r3, #1
 800157c:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_DMA_Abort_IT+0xec>)
 800157e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
    } 
  }
  return status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020008 	.word	0x40020008
 80015b0:	4002001c 	.word	0x4002001c
 80015b4:	40020030 	.word	0x40020030
 80015b8:	40020044 	.word	0x40020044
 80015bc:	40020058 	.word	0x40020058
 80015c0:	4002006c 	.word	0x4002006c
 80015c4:	40020000 	.word	0x40020000

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b08b      	sub	sp, #44	; 0x2c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	e169      	b.n	80018b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015dc:	2201      	movs	r2, #1
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8158 	bne.w	80018aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a9a      	ldr	r2, [pc, #616]	; (8001868 <HAL_GPIO_Init+0x2a0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d05e      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001604:	4a98      	ldr	r2, [pc, #608]	; (8001868 <HAL_GPIO_Init+0x2a0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d875      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800160a:	4a98      	ldr	r2, [pc, #608]	; (800186c <HAL_GPIO_Init+0x2a4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d058      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001610:	4a96      	ldr	r2, [pc, #600]	; (800186c <HAL_GPIO_Init+0x2a4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d86f      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001616:	4a96      	ldr	r2, [pc, #600]	; (8001870 <HAL_GPIO_Init+0x2a8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d052      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 800161c:	4a94      	ldr	r2, [pc, #592]	; (8001870 <HAL_GPIO_Init+0x2a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d869      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001622:	4a94      	ldr	r2, [pc, #592]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d04c      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001628:	4a92      	ldr	r2, [pc, #584]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d863      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800162e:	4a92      	ldr	r2, [pc, #584]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d046      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001634:	4a90      	ldr	r2, [pc, #576]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d85d      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d82a      	bhi.n	8001694 <HAL_GPIO_Init+0xcc>
 800163e:	2b12      	cmp	r3, #18
 8001640:	d859      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <HAL_GPIO_Init+0x80>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	080016c3 	.word	0x080016c3
 800164c:	0800169d 	.word	0x0800169d
 8001650:	080016af 	.word	0x080016af
 8001654:	080016f1 	.word	0x080016f1
 8001658:	080016f7 	.word	0x080016f7
 800165c:	080016f7 	.word	0x080016f7
 8001660:	080016f7 	.word	0x080016f7
 8001664:	080016f7 	.word	0x080016f7
 8001668:	080016f7 	.word	0x080016f7
 800166c:	080016f7 	.word	0x080016f7
 8001670:	080016f7 	.word	0x080016f7
 8001674:	080016f7 	.word	0x080016f7
 8001678:	080016f7 	.word	0x080016f7
 800167c:	080016f7 	.word	0x080016f7
 8001680:	080016f7 	.word	0x080016f7
 8001684:	080016f7 	.word	0x080016f7
 8001688:	080016f7 	.word	0x080016f7
 800168c:	080016a5 	.word	0x080016a5
 8001690:	080016b9 	.word	0x080016b9
 8001694:	4a79      	ldr	r2, [pc, #484]	; (800187c <HAL_GPIO_Init+0x2b4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800169a:	e02c      	b.n	80016f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e029      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	3304      	adds	r3, #4
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e024      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e01f      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	330c      	adds	r3, #12
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e01a      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ca:	2304      	movs	r3, #4
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e013      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	611a      	str	r2, [r3, #16]
          break;
 80016e2:	e009      	b.n	80016f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e4:	2308      	movs	r3, #8
 80016e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	615a      	str	r2, [r3, #20]
          break;
 80016ee:	e003      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          break;
 80016f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d801      	bhi.n	8001702 <HAL_GPIO_Init+0x13a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d802      	bhi.n	8001714 <HAL_GPIO_Init+0x14c>
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	e002      	b.n	800171a <HAL_GPIO_Init+0x152>
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	3b08      	subs	r3, #8
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	210f      	movs	r1, #15
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80b1 	beq.w	80018aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_GPIO_Init+0x2b8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_GPIO_Init+0x2b8>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_GPIO_Init+0x2b8>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001760:	4a48      	ldr	r2, [pc, #288]	; (8001884 <HAL_GPIO_Init+0x2bc>)
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a40      	ldr	r2, [pc, #256]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d013      	beq.n	80017b4 <HAL_GPIO_Init+0x1ec>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3f      	ldr	r2, [pc, #252]	; (800188c <HAL_GPIO_Init+0x2c4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x1e8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <HAL_GPIO_Init+0x2c8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x1e4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3d      	ldr	r2, [pc, #244]	; (8001894 <HAL_GPIO_Init+0x2cc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x1e0>
 80017a4:	2303      	movs	r3, #3
 80017a6:	e006      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017a8:	2304      	movs	r3, #4
 80017aa:	e004      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_GPIO_Init+0x1ee>
 80017b4:	2300      	movs	r3, #0
 80017b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b8:	f002 0203 	and.w	r2, r2, #3
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	4093      	lsls	r3, r2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c6:	492f      	ldr	r1, [pc, #188]	; (8001884 <HAL_GPIO_Init+0x2bc>)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	492c      	ldr	r1, [pc, #176]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	4928      	ldr	r1, [pc, #160]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4922      	ldr	r1, [pc, #136]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	60cb      	str	r3, [r1, #12]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	491e      	ldr	r1, [pc, #120]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001820:	4013      	ands	r3, r2
 8001822:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4918      	ldr	r1, [pc, #96]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	4914      	ldr	r1, [pc, #80]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001848:	4013      	ands	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d021      	beq.n	800189c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	490e      	ldr	r1, [pc, #56]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e021      	b.n	80018aa <HAL_GPIO_Init+0x2e2>
 8001866:	bf00      	nop
 8001868:	10320000 	.word	0x10320000
 800186c:	10310000 	.word	0x10310000
 8001870:	10220000 	.word	0x10220000
 8001874:	10210000 	.word	0x10210000
 8001878:	10120000 	.word	0x10120000
 800187c:	10110000 	.word	0x10110000
 8001880:	40021000 	.word	0x40021000
 8001884:	40010000 	.word	0x40010000
 8001888:	40010800 	.word	0x40010800
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40011000 	.word	0x40011000
 8001894:	40011400 	.word	0x40011400
 8001898:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_GPIO_Init+0x304>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	4909      	ldr	r1, [pc, #36]	; (80018cc <HAL_GPIO_Init+0x304>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	3301      	adds	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f47f ae8e 	bne.w	80015dc <HAL_GPIO_Init+0x14>
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	372c      	adds	r7, #44	; 0x2c
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	807b      	strh	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800190e:	787b      	ldrb	r3, [r7, #1]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001914:	887a      	ldrh	r2, [r7, #2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800191a:	e003      	b.n	8001924 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	041a      	lsls	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
	...

08001930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e26c      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 8087 	beq.w	8001a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001950:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 030c 	and.w	r3, r3, #12
 8001958:	2b04      	cmp	r3, #4
 800195a:	d00c      	beq.n	8001976 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800195c:	4b8f      	ldr	r3, [pc, #572]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d112      	bne.n	800198e <HAL_RCC_OscConfig+0x5e>
 8001968:	4b8c      	ldr	r3, [pc, #560]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001974:	d10b      	bne.n	800198e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001976:	4b89      	ldr	r3, [pc, #548]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d06c      	beq.n	8001a5c <HAL_RCC_OscConfig+0x12c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d168      	bne.n	8001a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e246      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x76>
 8001998:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 800199e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e02e      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x98>
 80019ae:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01d      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0xbc>
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a71      	ldr	r2, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b6f      	ldr	r3, [pc, #444]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6e      	ldr	r2, [pc, #440]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0xd4>
 80019ec:	4b6b      	ldr	r3, [pc, #428]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a6a      	ldr	r2, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a67      	ldr	r2, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fc12 	bl	8001234 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fc0e 	bl	8001234 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1fa      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0xe4>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fbfe 	bl	8001234 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fbfa 	bl	8001234 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1e6      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x10c>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a76:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d11c      	bne.n	8001abc <HAL_RCC_OscConfig+0x18c>
 8001a82:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x176>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1ba      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4939      	ldr	r1, [pc, #228]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	e03a      	b.n	8001b32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac4:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fbb3 	bl	8001234 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fbaf 	bl	8001234 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e19b      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4927      	ldr	r1, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e015      	b.n	8001b32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x270>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb92 	bl	8001234 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fb8e 	bl	8001234 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e17a      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d03a      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d019      	beq.n	8001b7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fb72 	bl	8001234 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb6e 	bl	8001234 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e15a      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b72:	2001      	movs	r0, #1
 8001b74:	f000 facc 	bl	8002110 <RCC_Delay>
 8001b78:	e01c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fb58 	bl	8001234 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b86:	e00f      	b.n	8001ba8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fb54 	bl	8001234 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d908      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e140      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	42420000 	.word	0x42420000
 8001ba4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b9e      	ldr	r3, [pc, #632]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e9      	bne.n	8001b88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a6 	beq.w	8001d0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b97      	ldr	r3, [pc, #604]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10d      	bne.n	8001bee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b94      	ldr	r3, [pc, #592]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a93      	ldr	r2, [pc, #588]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bea:	2301      	movs	r3, #1
 8001bec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b8e      	ldr	r3, [pc, #568]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d118      	bne.n	8001c2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a8a      	ldr	r2, [pc, #552]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c06:	f7ff fb15 	bl	8001234 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0e:	f7ff fb11 	bl	8001234 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b64      	cmp	r3, #100	; 0x64
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0fd      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x312>
 8001c34:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4a7a      	ldr	r2, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6213      	str	r3, [r2, #32]
 8001c40:	e02d      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x334>
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4a75      	ldr	r2, [pc, #468]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6213      	str	r3, [r2, #32]
 8001c56:	4b73      	ldr	r3, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	4a72      	ldr	r2, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6213      	str	r3, [r2, #32]
 8001c62:	e01c      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x356>
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a6c      	ldr	r2, [pc, #432]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0x36e>
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	4b64      	ldr	r3, [pc, #400]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a63      	ldr	r2, [pc, #396]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d015      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fac5 	bl	8001234 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7ff fac1 	bl	8001234 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0ab      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ee      	beq.n	8001cae <HAL_RCC_OscConfig+0x37e>
 8001cd0:	e014      	b.n	8001cfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff faaf 	bl	8001234 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff faab 	bl	8001234 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e095      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cfc:	7dfb      	ldrb	r3, [r7, #23]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4b48      	ldr	r3, [pc, #288]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a47      	ldr	r2, [pc, #284]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8081 	beq.w	8001e1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d061      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d146      	bne.n	8001dba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <HAL_RCC_OscConfig+0x4fc>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d32:	f7ff fa7f 	bl	8001234 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff fa7b 	bl	8001234 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e067      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d108      	bne.n	8001d74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	492d      	ldr	r1, [pc, #180]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d74:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a19      	ldr	r1, [r3, #32]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	430b      	orrs	r3, r1
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x4fc>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7ff fa4f 	bl	8001234 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7ff fa4b 	bl	8001234 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e037      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dac:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x46a>
 8001db8:	e02f      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_RCC_OscConfig+0x4fc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa38 	bl	8001234 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff fa34 	bl	8001234 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e020      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x498>
 8001de6:	e018      	b.n	8001e1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e013      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42420060 	.word	0x42420060

08001e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0d0      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d910      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b67      	ldr	r3, [pc, #412]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4965      	ldr	r1, [pc, #404]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0b8      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e8c:	4b59      	ldr	r3, [pc, #356]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea4:	4b53      	ldr	r3, [pc, #332]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb0:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	494d      	ldr	r1, [pc, #308]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d040      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d115      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e07f      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e073      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06b      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	4b39      	ldr	r3, [pc, #228]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f023 0203 	bic.w	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4936      	ldr	r1, [pc, #216]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f20:	f7ff f988 	bl	8001234 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f28:	f7ff f984 	bl	8001234 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e053      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 020c 	and.w	r2, r3, #12
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1eb      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d210      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	4922      	ldr	r1, [pc, #136]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e032      	b.n	8001fe6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4916      	ldr	r1, [pc, #88]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fbe:	f000 f821 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	490a      	ldr	r1, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd0:	5ccb      	ldrb	r3, [r1, r3]
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1cc>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1d0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff f8e6 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	08003aec 	.word	0x08003aec
 8001ffc:	20000058 	.word	0x20000058
 8002000:	2000005c 	.word	0x2000005c

08002004 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201e:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_GetSysClockFreq+0x94>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b04      	cmp	r3, #4
 800202c:	d002      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x30>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d003      	beq.n	800203a <HAL_RCC_GetSysClockFreq+0x36>
 8002032:	e027      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 8002036:	613b      	str	r3, [r7, #16]
      break;
 8002038:	e027      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0c9b      	lsrs	r3, r3, #18
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCC_GetSysClockFreq+0x94>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0c5b      	lsrs	r3, r3, #17
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800205e:	5cd3      	ldrb	r3, [r2, r3]
 8002060:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 8002066:	fb02 f203 	mul.w	r2, r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e004      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	613b      	str	r3, [r7, #16]
      break;
 8002082:	e002      	b.n	800208a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCC_GetSysClockFreq+0x98>)
 8002086:	613b      	str	r3, [r7, #16]
      break;
 8002088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800208a:	693b      	ldr	r3, [r7, #16]
}
 800208c:	4618      	mov	r0, r3
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	08003b04 	.word	0x08003b04
 80020a4:	08003b14 	.word	0x08003b14
 80020a8:	003d0900 	.word	0x003d0900

080020ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b0:	4b02      	ldr	r3, [pc, #8]	; (80020bc <HAL_RCC_GetHCLKFreq+0x10>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000058 	.word	0x20000058

080020c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c4:	f7ff fff2 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	4903      	ldr	r1, [pc, #12]	; (80020e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40021000 	.word	0x40021000
 80020e4:	08003afc 	.word	0x08003afc

080020e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020ec:	f7ff ffde 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	0adb      	lsrs	r3, r3, #11
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4903      	ldr	r1, [pc, #12]	; (800210c <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	08003afc 	.word	0x08003afc

08002110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <RCC_Delay+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <RCC_Delay+0x38>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0a5b      	lsrs	r3, r3, #9
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800212c:	bf00      	nop
  }
  while (Delay --);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <RCC_Delay+0x1c>
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000058 	.word	0x20000058
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e041      	b.n	80021e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe fed0 	bl	8000f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 fc30 	bl	80029f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d001      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e03a      	b.n	800227a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_TIM_Base_Start_IT+0x98>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00e      	beq.n	8002244 <HAL_TIM_Base_Start_IT+0x58>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222e:	d009      	beq.n	8002244 <HAL_TIM_Base_Start_IT+0x58>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <HAL_TIM_Base_Start_IT+0x9c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d004      	beq.n	8002244 <HAL_TIM_Base_Start_IT+0x58>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <HAL_TIM_Base_Start_IT+0xa0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d111      	bne.n	8002268 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b06      	cmp	r3, #6
 8002254:	d010      	beq.n	8002278 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	e007      	b.n	8002278 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800

08002290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e041      	b.n	8002326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f839 	bl	800232e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f000 fb8e 	bl	80029f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_TIM_PWM_Start+0x24>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e022      	b.n	80023aa <HAL_TIM_PWM_Start+0x6a>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d109      	bne.n	800237e <HAL_TIM_PWM_Start+0x3e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	bf14      	ite	ne
 8002376:	2301      	movne	r3, #1
 8002378:	2300      	moveq	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e015      	b.n	80023aa <HAL_TIM_PWM_Start+0x6a>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d109      	bne.n	8002398 <HAL_TIM_PWM_Start+0x58>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	bf14      	ite	ne
 8002390:	2301      	movne	r3, #1
 8002392:	2300      	moveq	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e008      	b.n	80023aa <HAL_TIM_PWM_Start+0x6a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	bf14      	ite	ne
 80023a4:	2301      	movne	r3, #1
 80023a6:	2300      	moveq	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e05e      	b.n	8002470 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_PWM_Start+0x82>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c0:	e013      	b.n	80023ea <HAL_TIM_PWM_Start+0xaa>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d104      	bne.n	80023d2 <HAL_TIM_PWM_Start+0x92>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d0:	e00b      	b.n	80023ea <HAL_TIM_PWM_Start+0xaa>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d104      	bne.n	80023e2 <HAL_TIM_PWM_Start+0xa2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e0:	e003      	b.n	80023ea <HAL_TIM_PWM_Start+0xaa>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2202      	movs	r2, #2
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2201      	movs	r2, #1
 80023f0:	6839      	ldr	r1, [r7, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fd7c 	bl	8002ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <HAL_TIM_PWM_Start+0x138>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d107      	bne.n	8002412 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <HAL_TIM_PWM_Start+0x138>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00e      	beq.n	800243a <HAL_TIM_PWM_Start+0xfa>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d009      	beq.n	800243a <HAL_TIM_PWM_Start+0xfa>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_TIM_PWM_Start+0x13c>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_TIM_PWM_Start+0xfa>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a12      	ldr	r2, [pc, #72]	; (8002480 <HAL_TIM_PWM_Start+0x140>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d111      	bne.n	800245e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b06      	cmp	r3, #6
 800244a:	d010      	beq.n	800246e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245c:	e007      	b.n	800246e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40000800 	.word	0x40000800

08002484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b02      	cmp	r3, #2
 8002498:	d122      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d11b      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0202 	mvn.w	r2, #2
 80024b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa76 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 80024cc:	e005      	b.n	80024da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fa69 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fa78 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d122      	bne.n	8002534 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d11b      	bne.n	8002534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0204 	mvn.w	r2, #4
 8002504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa4c 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa3f 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fa4e 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b08      	cmp	r3, #8
 8002540:	d122      	bne.n	8002588 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b08      	cmp	r3, #8
 800254e:	d11b      	bne.n	8002588 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0208 	mvn.w	r2, #8
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa22 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fa15 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fa24 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b10      	cmp	r3, #16
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0310 	and.w	r3, r3, #16
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0210 	mvn.w	r2, #16
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2208      	movs	r2, #8
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f9f8 	bl	80029b8 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f9eb 	bl	80029a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f9fa 	bl	80029ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0201 	mvn.w	r2, #1
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fa4a 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b80      	cmp	r3, #128	; 0x80
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fce9 	bl	8003006 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f9be 	bl	80029dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b20      	cmp	r3, #32
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b20      	cmp	r3, #32
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0220 	mvn.w	r2, #32
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fcb4 	bl	8002ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0ae      	b.n	8002810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	f200 809f 	bhi.w	8002800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	080026fd 	.word	0x080026fd
 80026cc:	08002801 	.word	0x08002801
 80026d0:	08002801 	.word	0x08002801
 80026d4:	08002801 	.word	0x08002801
 80026d8:	0800273d 	.word	0x0800273d
 80026dc:	08002801 	.word	0x08002801
 80026e0:	08002801 	.word	0x08002801
 80026e4:	08002801 	.word	0x08002801
 80026e8:	0800277f 	.word	0x0800277f
 80026ec:	08002801 	.word	0x08002801
 80026f0:	08002801 	.word	0x08002801
 80026f4:	08002801 	.word	0x08002801
 80026f8:	080027bf 	.word	0x080027bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f9d6 	bl	8002ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0208 	orr.w	r2, r2, #8
 8002716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0204 	bic.w	r2, r2, #4
 8002726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6999      	ldr	r1, [r3, #24]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	619a      	str	r2, [r3, #24]
      break;
 800273a:	e064      	b.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fa1c 	bl	8002b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6999      	ldr	r1, [r3, #24]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	021a      	lsls	r2, r3, #8
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	619a      	str	r2, [r3, #24]
      break;
 800277c:	e043      	b.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fa65 	bl	8002c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0208 	orr.w	r2, r2, #8
 8002798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0204 	bic.w	r2, r2, #4
 80027a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69d9      	ldr	r1, [r3, #28]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	61da      	str	r2, [r3, #28]
      break;
 80027bc:	e023      	b.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 faaf 	bl	8002d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69d9      	ldr	r1, [r3, #28]
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	021a      	lsls	r2, r3, #8
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	61da      	str	r2, [r3, #28]
      break;
 80027fe:	e002      	b.n	8002806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	75fb      	strb	r3, [r7, #23]
      break;
 8002804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_TIM_ConfigClockSource+0x1c>
 8002830:	2302      	movs	r3, #2
 8002832:	e0b4      	b.n	800299e <HAL_TIM_ConfigClockSource+0x186>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286c:	d03e      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0xd4>
 800286e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002872:	f200 8087 	bhi.w	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	f000 8086 	beq.w	800298a <HAL_TIM_ConfigClockSource+0x172>
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	d87f      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b70      	cmp	r3, #112	; 0x70
 8002886:	d01a      	beq.n	80028be <HAL_TIM_ConfigClockSource+0xa6>
 8002888:	2b70      	cmp	r3, #112	; 0x70
 800288a:	d87b      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 800288c:	2b60      	cmp	r3, #96	; 0x60
 800288e:	d050      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x11a>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d877      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b50      	cmp	r3, #80	; 0x50
 8002896:	d03c      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xfa>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d873      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b40      	cmp	r3, #64	; 0x40
 800289e:	d058      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x13a>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d86f      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b30      	cmp	r3, #48	; 0x30
 80028a6:	d064      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15a>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d86b      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	d060      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15a>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d867      	bhi.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05c      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15a>
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d05a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x15a>
 80028bc:	e062      	b.n	8002984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6899      	ldr	r1, [r3, #8]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f000 faf0 	bl	8002eb2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	609a      	str	r2, [r3, #8]
      break;
 80028ea:	e04f      	b.n	800298c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f000 fad9 	bl	8002eb2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800290e:	609a      	str	r2, [r3, #8]
      break;
 8002910:	e03c      	b.n	800298c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	461a      	mov	r2, r3
 8002920:	f000 fa50 	bl	8002dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2150      	movs	r1, #80	; 0x50
 800292a:	4618      	mov	r0, r3
 800292c:	f000 faa7 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002930:	e02c      	b.n	800298c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	f000 fa6e 	bl	8002e20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2160      	movs	r1, #96	; 0x60
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fa97 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002950:	e01c      	b.n	800298c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f000 fa30 	bl	8002dc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fa87 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002970:	e00c      	b.n	800298c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f000 fa7e 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 8002982:	e003      	b.n	800298c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      break;
 8002988:	e000      	b.n	800298c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800298a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
	...

080029f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <TIM_Base_SetConfig+0xb8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d00b      	beq.n	8002a20 <TIM_Base_SetConfig+0x30>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d007      	beq.n	8002a20 <TIM_Base_SetConfig+0x30>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a26      	ldr	r2, [pc, #152]	; (8002aac <TIM_Base_SetConfig+0xbc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d003      	beq.n	8002a20 <TIM_Base_SetConfig+0x30>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a25      	ldr	r2, [pc, #148]	; (8002ab0 <TIM_Base_SetConfig+0xc0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d108      	bne.n	8002a32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <TIM_Base_SetConfig+0xb8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00b      	beq.n	8002a52 <TIM_Base_SetConfig+0x62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d007      	beq.n	8002a52 <TIM_Base_SetConfig+0x62>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <TIM_Base_SetConfig+0xbc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d003      	beq.n	8002a52 <TIM_Base_SetConfig+0x62>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <TIM_Base_SetConfig+0xc0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d108      	bne.n	8002a64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <TIM_Base_SetConfig+0xb8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d103      	bne.n	8002a98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	615a      	str	r2, [r3, #20]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800

08002ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f023 0201 	bic.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0303 	bic.w	r3, r3, #3
 8002aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 0302 	bic.w	r3, r3, #2
 8002afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <TIM_OC1_SetConfig+0xc8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d10c      	bne.n	8002b2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0308 	bic.w	r3, r3, #8
 8002b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <TIM_OC1_SetConfig+0xc8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d111      	bne.n	8002b56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	621a      	str	r2, [r3, #32]
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40012c00 	.word	0x40012c00

08002b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f023 0210 	bic.w	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f023 0320 	bic.w	r3, r3, #32
 8002bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <TIM_OC2_SetConfig+0xd0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10d      	bne.n	8002bfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <TIM_OC2_SetConfig+0xd0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d113      	bne.n	8002c2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	40012c00 	.word	0x40012c00

08002c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <TIM_OC3_SetConfig+0xd0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <TIM_OC3_SetConfig+0xd0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d113      	bne.n	8002cfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	621a      	str	r2, [r3, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40012c00 	.word	0x40012c00

08002d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	031b      	lsls	r3, r3, #12
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <TIM_OC4_SetConfig+0x98>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d109      	bne.n	8002d9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	019b      	lsls	r3, r3, #6
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	621a      	str	r2, [r3, #32]
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00

08002dc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f023 0201 	bic.w	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f023 030a 	bic.w	r3, r3, #10
 8002e00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	621a      	str	r2, [r3, #32]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f023 0210 	bic.w	r2, r3, #16
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	031b      	lsls	r3, r3, #12
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	621a      	str	r2, [r3, #32]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f043 0307 	orr.w	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ecc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	021a      	lsls	r2, r3, #8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	609a      	str	r2, [r3, #8]
}
 8002ee6:	bf00      	nop
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2201      	movs	r2, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e046      	b.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d00e      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d009      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a12      	ldr	r2, [pc, #72]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10c      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e042      	b.n	80030b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd ffdc 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fc7f 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0ba      	sub	sp, #232	; 0xe8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10f      	bne.n	800311e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_UART_IRQHandler+0x66>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fb63 	bl	80037e2 <UART_Receive_IT>
      return;
 800311c:	e25b      	b.n	80035d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800311e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80de 	beq.w	80032e4 <HAL_UART_IRQHandler+0x22c>
 8003128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003138:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80d1 	beq.w	80032e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_UART_IRQHandler+0xae>
 800314e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_UART_IRQHandler+0xd2>
 8003172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f043 0202 	orr.w	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0xf6>
 8003196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f043 0204 	orr.w	r2, r3, #4
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d011      	beq.n	80031de <HAL_UART_IRQHandler+0x126>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	f043 0208 	orr.w	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 81f2 	beq.w	80035cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_UART_IRQHandler+0x14e>
 80031f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 faee 	bl	80037e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_UART_IRQHandler+0x17a>
 800322a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04f      	beq.n	80032d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9f8 	bl	8003628 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d041      	beq.n	80032ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3314      	adds	r3, #20
 800324c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800325c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3314      	adds	r3, #20
 800326e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003272:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800327e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800328a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1d9      	bne.n	8003246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d013      	beq.n	80032c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	4a7e      	ldr	r2, [pc, #504]	; (8003498 <HAL_UART_IRQHandler+0x3e0>)
 80032a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe f916 	bl	80014d8 <HAL_DMA_Abort_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032bc:	4610      	mov	r0, r2
 80032be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e00e      	b.n	80032e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f99c 	bl	8003600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e00a      	b.n	80032e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f998 	bl	8003600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d0:	e006      	b.n	80032e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f994 	bl	8003600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80032de:	e175      	b.n	80035cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	bf00      	nop
    return;
 80032e2:	e173      	b.n	80035cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 814f 	bne.w	800358c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8148 	beq.w	800358c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8141 	beq.w	800358c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80b6 	beq.w	800349c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800333c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8145 	beq.w	80035d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800334a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800334e:	429a      	cmp	r2, r3
 8003350:	f080 813e 	bcs.w	80035d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800335a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b20      	cmp	r3, #32
 8003364:	f000 8088 	beq.w	8003478 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003376:	e853 3f00 	ldrex	r3, [r3]
 800337a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800337e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003382:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003386:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003394:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033a4:	e841 2300 	strex	r3, r2, [r1]
 80033a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1d9      	bne.n	8003368 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e1      	bne.n	80033b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003414:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003416:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800341a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e3      	bne.n	80033f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003448:	f023 0310 	bic.w	r3, r3, #16
 800344c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800345a:	65ba      	str	r2, [r7, #88]	; 0x58
 800345c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e3      	bne.n	8003436 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fff5 	bl	8001462 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003486:	b29b      	uxth	r3, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8bf 	bl	8003612 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003494:	e09c      	b.n	80035d0 <HAL_UART_IRQHandler+0x518>
 8003496:	bf00      	nop
 8003498:	080036ed 	.word	0x080036ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 808e 	beq.w	80035d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8089 	beq.w	80035d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034e6:	647a      	str	r2, [r7, #68]	; 0x44
 80034e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e3      	bne.n	80034c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	623b      	str	r3, [r7, #32]
   return(result);
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800351e:	633a      	str	r2, [r7, #48]	; 0x30
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e3      	bne.n	80034fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0310 	bic.w	r3, r3, #16
 8003556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003564:	61fa      	str	r2, [r7, #28]
 8003566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	69b9      	ldr	r1, [r7, #24]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	617b      	str	r3, [r7, #20]
   return(result);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e3      	bne.n	8003540 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800357e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f844 	bl	8003612 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800358a:	e023      	b.n	80035d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800358c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_UART_IRQHandler+0x4f4>
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f8b5 	bl	8003714 <UART_Transmit_IT>
    return;
 80035aa:	e014      	b.n	80035d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <HAL_UART_IRQHandler+0x51e>
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f8f4 	bl	80037b2 <UART_EndTransmit_IT>
    return;
 80035ca:	e004      	b.n	80035d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035d4:	bf00      	nop
  }
}
 80035d6:	37e8      	adds	r7, #232	; 0xe8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b095      	sub	sp, #84	; 0x54
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003650:	643a      	str	r2, [r7, #64]	; 0x40
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3314      	adds	r3, #20
 800366a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	61fb      	str	r3, [r7, #28]
   return(result);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	64bb      	str	r3, [r7, #72]	; 0x48
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3314      	adds	r3, #20
 8003682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	2b01      	cmp	r3, #1
 800369e:	d119      	bne.n	80036d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	e853 3f00 	ldrex	r3, [r3]
 80036ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f023 0310 	bic.w	r3, r3, #16
 80036b6:	647b      	str	r3, [r7, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	330c      	adds	r3, #12
 80036be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036c0:	61ba      	str	r2, [r7, #24]
 80036c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c4:	6979      	ldr	r1, [r7, #20]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	e841 2300 	strex	r3, r2, [r1]
 80036cc:	613b      	str	r3, [r7, #16]
   return(result);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e5      	bne.n	80036a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036e2:	bf00      	nop
 80036e4:	3754      	adds	r7, #84	; 0x54
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff ff7a 	bl	8003600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b21      	cmp	r3, #33	; 0x21
 8003726:	d13e      	bne.n	80037a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d114      	bne.n	800375c <UART_Transmit_IT+0x48>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d110      	bne.n	800375c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800374e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	621a      	str	r2, [r3, #32]
 800375a:	e008      	b.n	800376e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	1c59      	adds	r1, r3, #1
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6211      	str	r1, [r2, #32]
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29b      	uxth	r3, r3
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4619      	mov	r1, r3
 800377c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003790:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e000      	b.n	80037a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
  }
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ff02 	bl	80035dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b08c      	sub	sp, #48	; 0x30
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b22      	cmp	r3, #34	; 0x22
 80037f4:	f040 80ae 	bne.w	8003954 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	d117      	bne.n	8003832 <UART_Receive_IT+0x50>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d113      	bne.n	8003832 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	b29b      	uxth	r3, r3
 800381c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003820:	b29a      	uxth	r2, r3
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	1c9a      	adds	r2, r3, #2
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
 8003830:	e026      	b.n	8003880 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003838:	2300      	movs	r3, #0
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d007      	beq.n	8003856 <UART_Receive_IT+0x74>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <UART_Receive_IT+0x82>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e008      	b.n	8003876 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003870:	b2da      	uxtb	r2, r3
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4619      	mov	r1, r3
 800388e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003890:	2b00      	cmp	r3, #0
 8003892:	d15d      	bne.n	8003950 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0220 	bic.w	r2, r2, #32
 80038a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d135      	bne.n	8003946 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	330c      	adds	r3, #12
 80038e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	613b      	str	r3, [r7, #16]
   return(result);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f023 0310 	bic.w	r3, r3, #16
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	623a      	str	r2, [r7, #32]
 8003902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	69f9      	ldr	r1, [r7, #28]
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	61bb      	str	r3, [r7, #24]
   return(result);
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b10      	cmp	r3, #16
 8003920:	d10a      	bne.n	8003938 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fe67 	bl	8003612 <HAL_UARTEx_RxEventCallback>
 8003944:	e002      	b.n	800394c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fe51 	bl	80035ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e002      	b.n	8003956 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3730      	adds	r7, #48	; 0x30
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800399a:	f023 030c 	bic.w	r3, r3, #12
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <UART_SetConfig+0x114>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d103      	bne.n	80039d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7fe fb8e 	bl	80020e8 <HAL_RCC_GetPCLK2Freq>
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	e002      	b.n	80039d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fb76 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009a      	lsls	r2, r3, #2
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <UART_SetConfig+0x118>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	0119      	lsls	r1, r3, #4
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <UART_SetConfig+0x118>)
 8003a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	3332      	adds	r3, #50	; 0x32
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <UART_SetConfig+0x118>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	4419      	add	r1, r3
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009a      	lsls	r2, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <UART_SetConfig+0x118>)
 8003a46:	fba3 0302 	umull	r0, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2064      	movs	r0, #100	; 0x64
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f003 020f 	and.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	440a      	add	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013800 	.word	0x40013800
 8003a78:	51eb851f 	.word	0x51eb851f

08003a7c <__libc_init_array>:
 8003a7c:	b570      	push	{r4, r5, r6, lr}
 8003a7e:	2600      	movs	r6, #0
 8003a80:	4d0c      	ldr	r5, [pc, #48]	; (8003ab4 <__libc_init_array+0x38>)
 8003a82:	4c0d      	ldr	r4, [pc, #52]	; (8003ab8 <__libc_init_array+0x3c>)
 8003a84:	1b64      	subs	r4, r4, r5
 8003a86:	10a4      	asrs	r4, r4, #2
 8003a88:	42a6      	cmp	r6, r4
 8003a8a:	d109      	bne.n	8003aa0 <__libc_init_array+0x24>
 8003a8c:	f000 f822 	bl	8003ad4 <_init>
 8003a90:	2600      	movs	r6, #0
 8003a92:	4d0a      	ldr	r5, [pc, #40]	; (8003abc <__libc_init_array+0x40>)
 8003a94:	4c0a      	ldr	r4, [pc, #40]	; (8003ac0 <__libc_init_array+0x44>)
 8003a96:	1b64      	subs	r4, r4, r5
 8003a98:	10a4      	asrs	r4, r4, #2
 8003a9a:	42a6      	cmp	r6, r4
 8003a9c:	d105      	bne.n	8003aaa <__libc_init_array+0x2e>
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
 8003aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa4:	4798      	blx	r3
 8003aa6:	3601      	adds	r6, #1
 8003aa8:	e7ee      	b.n	8003a88 <__libc_init_array+0xc>
 8003aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aae:	4798      	blx	r3
 8003ab0:	3601      	adds	r6, #1
 8003ab2:	e7f2      	b.n	8003a9a <__libc_init_array+0x1e>
 8003ab4:	08003b18 	.word	0x08003b18
 8003ab8:	08003b18 	.word	0x08003b18
 8003abc:	08003b18 	.word	0x08003b18
 8003ac0:	08003b1c 	.word	0x08003b1c

08003ac4 <memset>:
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4402      	add	r2, r0
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d100      	bne.n	8003ace <memset+0xa>
 8003acc:	4770      	bx	lr
 8003ace:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad2:	e7f9      	b.n	8003ac8 <memset+0x4>

08003ad4 <_init>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr

08003ae0 <_fini>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	bf00      	nop
 8003ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae6:	bc08      	pop	{r3}
 8003ae8:	469e      	mov	lr, r3
 8003aea:	4770      	bx	lr
