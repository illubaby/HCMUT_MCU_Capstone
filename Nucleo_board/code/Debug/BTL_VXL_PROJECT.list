
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004208  08004208  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004208  08004208  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004208  08004208  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000008c  0800429c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800429c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c49  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b3  00000000  00000000  00032cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000355b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00036340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195b2  00000000  00000000  00036fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001141c  00000000  00000000  00050572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeba  00000000  00000000  0006198e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec848  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  000ec89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080041c4 	.word	0x080041c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080041c4 	.word	0x080041c4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <isButtonPressed+0x30>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d106      	bne.n	800066a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <isButtonPressed+0x30>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2100      	movs	r1, #0
 8000662:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <isButtonPressed+0x24>
	}
	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200000a8 	.word	0x200000a8

0800067c <subKeyProcess>:

void subKeyProcess(int i){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <subKeyProcess+0x1c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2101      	movs	r1, #1
 800068a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	200000a8 	.word	0x200000a8

0800069c <ReadPin>:

GPIO_PinState ReadPin(int index){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d105      	bne.n	80006b6 <ReadPin+0x1a>
 80006aa:	2102      	movs	r1, #2
 80006ac:	4812      	ldr	r0, [pc, #72]	; (80006f8 <ReadPin+0x5c>)
 80006ae:	f001 fc6f 	bl	8001f90 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	e01b      	b.n	80006ee <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d105      	bne.n	80006c8 <ReadPin+0x2c>
 80006bc:	2110      	movs	r1, #16
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <ReadPin+0x5c>)
 80006c0:	f001 fc66 	bl	8001f90 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	e012      	b.n	80006ee <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d105      	bne.n	80006da <ReadPin+0x3e>
 80006ce:	2101      	movs	r1, #1
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <ReadPin+0x60>)
 80006d2:	f001 fc5d 	bl	8001f90 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	e009      	b.n	80006ee <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d105      	bne.n	80006ec <ReadPin+0x50>
 80006e0:	2101      	movs	r1, #1
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <ReadPin+0x5c>)
 80006e4:	f001 fc54 	bl	8001f90 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	e000      	b.n	80006ee <ReadPin+0x52>
	else return 0;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40010800 	.word	0x40010800
 80006fc:	40010c00 	.word	0x40010c00

08000700 <getKeyinput>:

void getKeyinput(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e05c      	b.n	80007c6 <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 800070c:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <getKeyinput+0xd8>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000714:	4931      	ldr	r1, [pc, #196]	; (80007dc <getKeyinput+0xdc>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800071c:	4a30      	ldr	r2, [pc, #192]	; (80007e0 <getKeyinput+0xe0>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000724:	492c      	ldr	r1, [pc, #176]	; (80007d8 <getKeyinput+0xd8>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ffb5 	bl	800069c <ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	4619      	mov	r1, r3
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <getKeyinput+0xe0>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <getKeyinput+0xdc>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000746:	4924      	ldr	r1, [pc, #144]	; (80007d8 <getKeyinput+0xd8>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800074e:	429a      	cmp	r2, r3
 8000750:	d136      	bne.n	80007c0 <getKeyinput+0xc0>
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <getKeyinput+0xd8>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075a:	4921      	ldr	r1, [pc, #132]	; (80007e0 <getKeyinput+0xe0>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000762:	429a      	cmp	r2, r3
 8000764:	d12c      	bne.n	80007c0 <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <getKeyinput+0xe4>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076e:	491c      	ldr	r1, [pc, #112]	; (80007e0 <getKeyinput+0xe0>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000776:	429a      	cmp	r2, r3
 8000778:	d014      	beq.n	80007a4 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <getKeyinput+0xe0>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000782:	4918      	ldr	r1, [pc, #96]	; (80007e4 <getKeyinput+0xe4>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <getKeyinput+0xe4>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d114      	bne.n	80007c0 <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <getKeyinput+0xe8>)
 8000798:	22c8      	movs	r2, #200	; 0xc8
 800079a:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff6d 	bl	800067c <subKeyProcess>
 80007a2:	e00d      	b.n	80007c0 <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <getKeyinput+0xe8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <getKeyinput+0xe8>)
 80007ac:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <getKeyinput+0xe8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d104      	bne.n	80007c0 <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <getKeyinput+0xe4>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2101      	movs	r1, #1
 80007bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	dd9f      	ble.n	800070c <getKeyinput+0xc>
				}
			}
		}
	}

}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000010 	.word	0x20000010
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000020 	.word	0x20000020
 80007e4:	20000030 	.word	0x20000030
 80007e8:	20000040 	.word	0x20000040

080007ec <get_buzzer_counter>:
extern TIM_HandleTypeDef htim3;  // External declaration
int buzzer_counter;
int state_buzzer = 1;
int scale_buzzer=0;
float cycle;
void get_buzzer_counter(){	// for take the value of the red time
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	buzzer_counter = red_time;
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <get_buzzer_counter+0x14>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a03      	ldr	r2, [pc, #12]	; (8000804 <get_buzzer_counter+0x18>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	2000004c 	.word	0x2000004c
 8000804:	200000f8 	.word	0x200000f8

08000808 <cal_cycle>:
void cal_cycle (){
 8000808:	b598      	push	{r3, r4, r7, lr}
 800080a:	af00      	add	r7, sp, #0
	//cycle = ((float)buzzer_counter / red_time) * 100.0f;	// the speaker decreases volume every 1s
	cycle = ((float)buzzer_counter / red_time) * 100.0f-scale_buzzer; // the speaker decreases volume every 100ms
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <cal_cycle+0x6c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd55 	bl	80002c0 <__aeabi_i2f>
 8000816:	4604      	mov	r4, r0
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <cal_cycle+0x70>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fd4f 	bl	80002c0 <__aeabi_i2f>
 8000822:	4603      	mov	r3, r0
 8000824:	4619      	mov	r1, r3
 8000826:	4620      	mov	r0, r4
 8000828:	f7ff fe52 	bl	80004d0 <__aeabi_fdiv>
 800082c:	4603      	mov	r3, r0
 800082e:	4913      	ldr	r1, [pc, #76]	; (800087c <cal_cycle+0x74>)
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd99 	bl	8000368 <__aeabi_fmul>
 8000836:	4603      	mov	r3, r0
 8000838:	461c      	mov	r4, r3
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <cal_cycle+0x78>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fd3e 	bl	80002c0 <__aeabi_i2f>
 8000844:	4603      	mov	r3, r0
 8000846:	4619      	mov	r1, r3
 8000848:	4620      	mov	r0, r4
 800084a:	f7ff fc83 	bl	8000154 <__aeabi_fsub>
 800084e:	4603      	mov	r3, r0
 8000850:	461a      	mov	r2, r3
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <cal_cycle+0x7c>)
 8000854:	601a      	str	r2, [r3, #0]
	scale_buzzer++;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <cal_cycle+0x78>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	3301      	adds	r3, #1
 800085c:	4a08      	ldr	r2, [pc, #32]	; (8000880 <cal_cycle+0x78>)
 800085e:	6013      	str	r3, [r2, #0]
	if (scale_buzzer>=10){
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <cal_cycle+0x78>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b09      	cmp	r3, #9
 8000866:	dd02      	ble.n	800086e <cal_cycle+0x66>
		scale_buzzer=0;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <cal_cycle+0x78>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
	}
}
 800086e:	bf00      	nop
 8000870:	bd98      	pop	{r3, r4, r7, pc}
 8000872:	bf00      	nop
 8000874:	200000f8 	.word	0x200000f8
 8000878:	2000004c 	.word	0x2000004c
 800087c:	42c80000 	.word	0x42c80000
 8000880:	200000b8 	.word	0x200000b8
 8000884:	200000f4 	.word	0x200000f4

08000888 <buzzer>:
void buzzer(){
 8000888:	b598      	push	{r3, r4, r7, lr}
 800088a:	af00      	add	r7, sp, #0
	switch(state_buzzer){
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <buzzer+0x90>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d002      	beq.n	800089a <buzzer+0x12>
 8000894:	2b02      	cmp	r3, #2
 8000896:	d036      	beq.n	8000906 <buzzer+0x7e>
	}
	break;
	case OFF:
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
		break;
	default: break;
 8000898:	e03b      	b.n	8000912 <buzzer+0x8a>
	if (timer_flag[6] == 1){// just for decrease the counter, like the red time
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <buzzer+0x94>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d111      	bne.n	80008c6 <buzzer+0x3e>
		if (buzzer_counter>=0)
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <buzzer+0x98>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db04      	blt.n	80008b4 <buzzer+0x2c>
		{HAL_GPIO_TogglePin(TEST_GPIO_Port,TEST_Pin);}
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	481d      	ldr	r0, [pc, #116]	; (8000924 <buzzer+0x9c>)
 80008b0:	f001 fb9d 	bl	8001fee <HAL_GPIO_TogglePin>
		buzzer_counter--;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <buzzer+0x98>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <buzzer+0x98>)
 80008bc:	6013      	str	r3, [r2, #0]
		setTimer(100, 6);
 80008be:	2106      	movs	r1, #6
 80008c0:	2064      	movs	r0, #100	; 0x64
 80008c2:	f000 fe0f 	bl	80014e4 <setTimer>
	if (timer_flag[7] == 1){// for update the PWM more detail
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <buzzer+0x94>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d114      	bne.n	80008f8 <buzzer+0x70>
		cal_cycle ();
 80008ce:	f7ff ff9b 	bl	8000808 <cal_cycle>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 100-cycle); // (100 - cycle) if we want we speaker gets louder and louder
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <buzzer+0xa0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4814      	ldr	r0, [pc, #80]	; (800092c <buzzer+0xa4>)
 80008da:	f7ff fc3b 	bl	8000154 <__aeabi_fsub>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <buzzer+0xa8>)
 80008e4:	681c      	ldr	r4, [r3, #0]
 80008e6:	4610      	mov	r0, r2
 80008e8:	f7ff fe8e 	bl	8000608 <__aeabi_f2uiz>
 80008ec:	4603      	mov	r3, r0
 80008ee:	6363      	str	r3, [r4, #52]	; 0x34
		setTimer(10, 7);// because we want to update the speaker every 100ms, so we set 10
 80008f0:	2107      	movs	r1, #7
 80008f2:	200a      	movs	r0, #10
 80008f4:	f000 fdf6 	bl	80014e4 <setTimer>
	if (buzzer_counter==0){
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <buzzer+0x98>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d107      	bne.n	8000910 <buzzer+0x88>
		get_buzzer_counter();
 8000900:	f7ff ff74 	bl	80007ec <get_buzzer_counter>
	break;
 8000904:	e004      	b.n	8000910 <buzzer+0x88>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <buzzer+0xa8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2200      	movs	r2, #0
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800090e:	e000      	b.n	8000912 <buzzer+0x8a>
	break;
 8000910:	bf00      	nop
	}
}
 8000912:	bf00      	nop
 8000914:	bd98      	pop	{r3, r4, r7, pc}
 8000916:	bf00      	nop
 8000918:	20000044 	.word	0x20000044
 800091c:	20000058 	.word	0x20000058
 8000920:	200000f8 	.word	0x200000f8
 8000924:	40011000 	.word	0x40011000
 8000928:	200000f4 	.word	0x200000f4
 800092c:	42c80000 	.word	0x42c80000
 8000930:	20000108 	.word	0x20000108

08000934 <fsm_auto>:
int green_time = 3;
int red_time_cd = 0 ; // temp variable for red time length
int yellow_time_cd= 0 ;
int green_time_cd = 0 ;

void fsm_auto(){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	switch (status){
 8000938:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <fsm_auto+0x164>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3b5a      	subs	r3, #90	; 0x5a
 800093e:	2b04      	cmp	r3, #4
 8000940:	f200 809e 	bhi.w	8000a80 <fsm_auto+0x14c>
 8000944:	a201      	add	r2, pc, #4	; (adr r2, 800094c <fsm_auto+0x18>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000961 	.word	0x08000961
 8000950:	08000981 	.word	0x08000981
 8000954:	080009bd 	.word	0x080009bd
 8000958:	08000a01 	.word	0x08000a01
 800095c:	08000a3d 	.word	0x08000a3d
	case INIT:
		red_time_cd = red_time; // time length = 5s, start at 4 and end at 0
 8000960:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <fsm_auto+0x168>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a4e      	ldr	r2, [pc, #312]	; (8000aa0 <fsm_auto+0x16c>)
 8000966:	6013      	str	r3, [r2, #0]
		green_time_cd = green_time;
 8000968:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <fsm_auto+0x170>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a4e      	ldr	r2, [pc, #312]	; (8000aa8 <fsm_auto+0x174>)
 800096e:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 8000970:	2100      	movs	r1, #0
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f000 fdb6 	bl	80014e4 <setTimer>
		status = AUTO_RED_GREEN;
 8000978:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <fsm_auto+0x164>)
 800097a:	225b      	movs	r2, #91	; 0x5b
 800097c:	601a      	str	r2, [r3, #0]
		break;
 800097e:	e088      	b.n	8000a92 <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 8000980:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <fsm_auto+0x178>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d17d      	bne.n	8000a84 <fsm_auto+0x150>
			red_time_cd --;
 8000988:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <fsm_auto+0x16c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3b01      	subs	r3, #1
 800098e:	4a44      	ldr	r2, [pc, #272]	; (8000aa0 <fsm_auto+0x16c>)
 8000990:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <fsm_auto+0x174>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a43      	ldr	r2, [pc, #268]	; (8000aa8 <fsm_auto+0x174>)
 800099a:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 800099c:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <fsm_auto+0x174>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d106      	bne.n	80009b2 <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 80009a4:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <fsm_auto+0x164>)
 80009a6:	225c      	movs	r2, #92	; 0x5c
 80009a8:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <fsm_auto+0x17c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a41      	ldr	r2, [pc, #260]	; (8000ab4 <fsm_auto+0x180>)
 80009b0:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f000 fd95 	bl	80014e4 <setTimer>
		}
		break;
 80009ba:	e063      	b.n	8000a84 <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <fsm_auto+0x178>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d161      	bne.n	8000a88 <fsm_auto+0x154>
			red_time_cd --;
 80009c4:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <fsm_auto+0x16c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	4a35      	ldr	r2, [pc, #212]	; (8000aa0 <fsm_auto+0x16c>)
 80009cc:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 80009ce:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <fsm_auto+0x180>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	4a37      	ldr	r2, [pc, #220]	; (8000ab4 <fsm_auto+0x180>)
 80009d6:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 80009d8:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <fsm_auto+0x180>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10a      	bne.n	80009f6 <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <fsm_auto+0x164>)
 80009e2:	225d      	movs	r2, #93	; 0x5d
 80009e4:	601a      	str	r2, [r3, #0]
				red_time_cd = red_time;
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <fsm_auto+0x168>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <fsm_auto+0x16c>)
 80009ec:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <fsm_auto+0x170>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <fsm_auto+0x174>)
 80009f4:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2064      	movs	r0, #100	; 0x64
 80009fa:	f000 fd73 	bl	80014e4 <setTimer>
		}
		break;
 80009fe:	e043      	b.n	8000a88 <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <fsm_auto+0x178>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d141      	bne.n	8000a8c <fsm_auto+0x158>
			red_time_cd --;
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <fsm_auto+0x16c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <fsm_auto+0x16c>)
 8000a10:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <fsm_auto+0x174>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <fsm_auto+0x174>)
 8000a1a:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <fsm_auto+0x174>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d106      	bne.n	8000a32 <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <fsm_auto+0x164>)
 8000a26:	225e      	movs	r2, #94	; 0x5e
 8000a28:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <fsm_auto+0x17c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <fsm_auto+0x180>)
 8000a30:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2064      	movs	r0, #100	; 0x64
 8000a36:	f000 fd55 	bl	80014e4 <setTimer>
		}
		break;
 8000a3a:	e027      	b.n	8000a8c <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <fsm_auto+0x178>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d125      	bne.n	8000a90 <fsm_auto+0x15c>
			red_time_cd --;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <fsm_auto+0x16c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <fsm_auto+0x16c>)
 8000a4c:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <fsm_auto+0x180>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <fsm_auto+0x180>)
 8000a56:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <fsm_auto+0x180>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10a      	bne.n	8000a76 <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <fsm_auto+0x164>)
 8000a62:	225b      	movs	r2, #91	; 0x5b
 8000a64:	601a      	str	r2, [r3, #0]
				red_time_cd  = red_time;
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <fsm_auto+0x168>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <fsm_auto+0x16c>)
 8000a6c:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <fsm_auto+0x170>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <fsm_auto+0x174>)
 8000a74:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000a76:	2100      	movs	r1, #0
 8000a78:	2064      	movs	r0, #100	; 0x64
 8000a7a:	f000 fd33 	bl	80014e4 <setTimer>
		}
		break;
 8000a7e:	e007      	b.n	8000a90 <fsm_auto+0x15c>
	default: break;
 8000a80:	bf00      	nop
 8000a82:	e006      	b.n	8000a92 <fsm_auto+0x15e>
		break;
 8000a84:	bf00      	nop
 8000a86:	e004      	b.n	8000a92 <fsm_auto+0x15e>
		break;
 8000a88:	bf00      	nop
 8000a8a:	e002      	b.n	8000a92 <fsm_auto+0x15e>
		break;
 8000a8c:	bf00      	nop
 8000a8e:	e000      	b.n	8000a92 <fsm_auto+0x15e>
		break;
 8000a90:	bf00      	nop
	}
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000048 	.word	0x20000048
 8000a9c:	2000004c 	.word	0x2000004c
 8000aa0:	200000bc 	.word	0x200000bc
 8000aa4:	20000054 	.word	0x20000054
 8000aa8:	200000c4 	.word	0x200000c4
 8000aac:	20000058 	.word	0x20000058
 8000ab0:	20000050 	.word	0x20000050
 8000ab4:	200000c0 	.word	0x200000c0

08000ab8 <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp, yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <turnbackINIT+0x50>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	dd07      	ble.n	8000ad4 <turnbackINIT+0x1c>
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <turnbackINIT+0x54>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	dd03      	ble.n	8000ad4 <turnbackINIT+0x1c>
			green_time < 1){
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <turnbackINIT+0x58>)
 8000ace:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dc08      	bgt.n	8000ae6 <turnbackINIT+0x2e>
		red_time = 5;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <turnbackINIT+0x50>)
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <turnbackINIT+0x54>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	601a      	str	r2, [r3, #0]
		green_time = 3;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <turnbackINIT+0x58>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	601a      	str	r2, [r3, #0]
	}
	setTimer(0, 3); // turn off timer_flag for scan led
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 fcfb 	bl	80014e4 <setTimer>
	red_time = green_time + yellow_time;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <turnbackINIT+0x58>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <turnbackINIT+0x54>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <turnbackINIT+0x50>)
 8000afa:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <turnbackINIT+0x5c>)
 8000afe:	225a      	movs	r2, #90	; 0x5a
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000004c 	.word	0x2000004c
 8000b0c:	20000050 	.word	0x20000050
 8000b10:	20000054 	.word	0x20000054
 8000b14:	20000048 	.word	0x20000048

08000b18 <checkButton1>:
void checkButton1(){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fd93 	bl	8000648 <isButtonPressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d11e      	bne.n	8000b66 <checkButton1+0x4e>
		//reset set timer

		if (status == MANUAL_RED) {
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <checkButton1+0x54>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b14      	cmp	r3, #20
 8000b2e:	d103      	bne.n	8000b38 <checkButton1+0x20>
			status = MANUAL_YELLOW;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <checkButton1+0x54>)
 8000b32:	2215      	movs	r2, #21
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	e011      	b.n	8000b5c <checkButton1+0x44>
		}
		else if (status == MANUAL_YELLOW) {
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <checkButton1+0x54>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b15      	cmp	r3, #21
 8000b3e:	d103      	bne.n	8000b48 <checkButton1+0x30>
			status = MANUAL_GREEN;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <checkButton1+0x54>)
 8000b42:	2216      	movs	r2, #22
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e009      	b.n	8000b5c <checkButton1+0x44>
		}
		else if (status == MANUAL_GREEN) {
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <checkButton1+0x54>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b16      	cmp	r3, #22
 8000b4e:	d102      	bne.n	8000b56 <checkButton1+0x3e>
			turnbackINIT();
 8000b50:	f7ff ffb2 	bl	8000ab8 <turnbackINIT>
 8000b54:	e002      	b.n	8000b5c <checkButton1+0x44>
		}
		else {
			status = MANUAL_INIT; //auto state -> manual state
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <checkButton1+0x54>)
 8000b58:	2217      	movs	r2, #23
 8000b5a:	601a      	str	r2, [r3, #0]
		}
		setTimer(10000, 2);// after 10 sec don't press button1 -> turn back to auto mode
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b62:	f000 fcbf 	bl	80014e4 <setTimer>
	}
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000048 	.word	0x20000048

08000b70 <checkButton2>:

void checkButton2(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fd67 	bl	8000648 <isButtonPressed>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d126      	bne.n	8000bce <checkButton2+0x5e>
		if (status == MANUAL_RED){
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <checkButton2+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b14      	cmp	r3, #20
 8000b86:	d108      	bne.n	8000b9a <checkButton2+0x2a>
			if (red_time_tmp < 99) red_time_tmp++;
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <checkButton2+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b62      	cmp	r3, #98	; 0x62
 8000b8e:	dc04      	bgt.n	8000b9a <checkButton2+0x2a>
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <checkButton2+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <checkButton2+0x68>)
 8000b98:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_YELLOW){
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <checkButton2+0x64>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b15      	cmp	r3, #21
 8000ba0:	d108      	bne.n	8000bb4 <checkButton2+0x44>
			if (yellow_time_tmp < 99) yellow_time_tmp++;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <checkButton2+0x6c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b62      	cmp	r3, #98	; 0x62
 8000ba8:	dc04      	bgt.n	8000bb4 <checkButton2+0x44>
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <checkButton2+0x6c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <checkButton2+0x6c>)
 8000bb2:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_GREEN){
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <checkButton2+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b16      	cmp	r3, #22
 8000bba:	d108      	bne.n	8000bce <checkButton2+0x5e>
			if (green_time_tmp < 99) green_time_tmp++;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <checkButton2+0x70>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b62      	cmp	r3, #98	; 0x62
 8000bc2:	dc04      	bgt.n	8000bce <checkButton2+0x5e>
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <checkButton2+0x70>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <checkButton2+0x70>)
 8000bcc:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000048 	.word	0x20000048
 8000bd8:	20000104 	.word	0x20000104
 8000bdc:	200000fc 	.word	0x200000fc
 8000be0:	20000100 	.word	0x20000100

08000be4 <checkButton3>:
void checkButton3(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff fd2d 	bl	8000648 <isButtonPressed>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d119      	bne.n	8000c28 <checkButton3+0x44>
		if (status == MANUAL_RED){
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <checkButton3+0x48>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b14      	cmp	r3, #20
 8000bfa:	d104      	bne.n	8000c06 <checkButton3+0x22>
			red_time = red_time_tmp;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <checkButton3+0x4c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <checkButton3+0x50>)
 8000c02:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 8000c04:	e010      	b.n	8000c28 <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <checkButton3+0x48>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b15      	cmp	r3, #21
 8000c0c:	d104      	bne.n	8000c18 <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <checkButton3+0x54>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <checkButton3+0x58>)
 8000c14:	6013      	str	r3, [r2, #0]
}
 8000c16:	e007      	b.n	8000c28 <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <checkButton3+0x48>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b16      	cmp	r3, #22
 8000c1e:	d103      	bne.n	8000c28 <checkButton3+0x44>
			green_time = green_time_tmp;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <checkButton3+0x5c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <checkButton3+0x60>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000048 	.word	0x20000048
 8000c30:	20000104 	.word	0x20000104
 8000c34:	2000004c 	.word	0x2000004c
 8000c38:	200000fc 	.word	0x200000fc
 8000c3c:	20000050 	.word	0x20000050
 8000c40:	20000100 	.word	0x20000100
 8000c44:	20000054 	.word	0x20000054

08000c48 <fsm_manual>:


void fsm_manual(){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	checkButton1();
 8000c4c:	f7ff ff64 	bl	8000b18 <checkButton1>
	switch (status){
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <fsm_manual+0x94>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3b14      	subs	r3, #20
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d83c      	bhi.n	8000cd4 <fsm_manual+0x8c>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <fsm_manual+0x18>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c93 	.word	0x08000c93
 8000c64:	08000ca9 	.word	0x08000ca9
 8000c68:	08000cbf 	.word	0x08000cbf
 8000c6c:	08000c71 	.word	0x08000c71
	case MANUAL_INIT:
		red_time_tmp = 0;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <fsm_manual+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
		yellow_time_tmp = 0;
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <fsm_manual+0x9c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <fsm_manual+0xa0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <fsm_manual+0x94>)
 8000c84:	2214      	movs	r2, #20
 8000c86:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	2032      	movs	r0, #50	; 0x32
 8000c8c:	f000 fc2a 	bl	80014e4 <setTimer>
		break;
 8000c90:	e021      	b.n	8000cd6 <fsm_manual+0x8e>
	case MANUAL_RED:
		if (timer_flag [2] == 1) {
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <fsm_manual+0xa4>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d101      	bne.n	8000c9e <fsm_manual+0x56>
			turnbackINIT();
 8000c9a:	f7ff ff0d 	bl	8000ab8 <turnbackINIT>
		}
		checkButton2();
 8000c9e:	f7ff ff67 	bl	8000b70 <checkButton2>
		checkButton3();
 8000ca2:	f7ff ff9f 	bl	8000be4 <checkButton3>
		break;
 8000ca6:	e016      	b.n	8000cd6 <fsm_manual+0x8e>
	case MANUAL_YELLOW:
		if (timer_flag [2] == 1){
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <fsm_manual+0xa4>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d101      	bne.n	8000cb4 <fsm_manual+0x6c>
			turnbackINIT();
 8000cb0:	f7ff ff02 	bl	8000ab8 <turnbackINIT>
		}
		checkButton2();
 8000cb4:	f7ff ff5c 	bl	8000b70 <checkButton2>
		checkButton3();
 8000cb8:	f7ff ff94 	bl	8000be4 <checkButton3>
		break;
 8000cbc:	e00b      	b.n	8000cd6 <fsm_manual+0x8e>
	case MANUAL_GREEN:
		if (timer_flag [2] == 1){
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <fsm_manual+0xa4>)
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d101      	bne.n	8000cca <fsm_manual+0x82>
			turnbackINIT();
 8000cc6:	f7ff fef7 	bl	8000ab8 <turnbackINIT>
		}
		checkButton2();
 8000cca:	f7ff ff51 	bl	8000b70 <checkButton2>
		checkButton3();
 8000cce:	f7ff ff89 	bl	8000be4 <checkButton3>
		break;
 8000cd2:	e000      	b.n	8000cd6 <fsm_manual+0x8e>
	default: break;
 8000cd4:	bf00      	nop
	}




}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000048 	.word	0x20000048
 8000ce0:	20000104 	.word	0x20000104
 8000ce4:	200000fc 	.word	0x200000fc
 8000ce8:	20000100 	.word	0x20000100
 8000cec:	20000058 	.word	0x20000058

08000cf0 <fsm_pedestrian_light>:
 */

#include "fsm_pedestrian_light.h"
#include "buzzer.h"

void fsm_pedestrian_light(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	if(isButtonPressed(3)){
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f7ff fca7 	bl	8000648 <isButtonPressed>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <fsm_pedestrian_light+0x1a>
		setTimer(1500,4);
 8000d00:	2104      	movs	r1, #4
 8000d02:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d06:	f000 fbed 	bl	80014e4 <setTimer>
//		case MANUAL_GREEN:
//			state_buzzer =OFF;
//			break;
//		default: break;
//	}
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fd96 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f824 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 f94a 	bl	8000fb4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d20:	f000 f85c 	bl	8000ddc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d24:	f000 f91c 	bl	8000f60 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d28:	f000 f8a4 	bl	8000e74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <main+0x4c>)
 8000d2e:	f001 fdd5 	bl	80028dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d32:	2100      	movs	r1, #0
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <main+0x50>)
 8000d36:	f001 fe7b 	bl	8002a30 <HAL_TIM_PWM_Start>
  setTimer(10, 7);
 8000d3a:	2107      	movs	r1, #7
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	f000 fbd1 	bl	80014e4 <setTimer>
  setTimer(10, 6);
 8000d42:	2106      	movs	r1, #6
 8000d44:	200a      	movs	r0, #10
 8000d46:	f000 fbcd 	bl	80014e4 <setTimer>
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_auto();
 8000d4a:	f7ff fdf3 	bl	8000934 <fsm_auto>
	  fsm_manual();
 8000d4e:	f7ff ff7b 	bl	8000c48 <fsm_manual>
	  fsm_pedestrian_light();
 8000d52:	f7ff ffcd 	bl	8000cf0 <fsm_pedestrian_light>
		buzzer(); // buzzer
 8000d56:	f7ff fd97 	bl	8000888 <buzzer>
	  fsm_auto();
 8000d5a:	e7f6      	b.n	8000d4a <main+0x3a>
 8000d5c:	20000150 	.word	0x20000150
 8000d60:	20000108 	.word	0x20000108

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b090      	sub	sp, #64	; 0x40
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	2228      	movs	r2, #40	; 0x28
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fa1e 	bl	80041b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	f107 0318 	add.w	r3, r7, #24
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f940 	bl	8002020 <HAL_RCC_OscConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000da6:	f000 f9a5 	bl	80010f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	230f      	movs	r3, #15
 8000dac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fbac 	bl	8002520 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dce:	f000 f991 	bl	80010f4 <Error_Handler>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3740      	adds	r7, #64	; 0x40
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0308 	add.w	r3, r7, #8
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000dfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e02:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e22:	f001 fd0b 	bl	800283c <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e2c:	f000 f962 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e3e:	f002 f863 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e48:	f000 f954 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM2_Init+0x94>)
 8000e5a:	f002 fbe5 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f000 f946 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000150 	.word	0x20000150

08000e74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_TIM3_Init+0xe8>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000eac:	224f      	movs	r2, #79	; 0x4f
 8000eae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000eb8:	2263      	movs	r2, #99	; 0x63
 8000eba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec8:	4823      	ldr	r0, [pc, #140]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000eca:	f001 fcb7 	bl	800283c <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000ed4:	f000 f90e 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481c      	ldr	r0, [pc, #112]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000ee6:	f002 f80f 	bl	8002f08 <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ef0:	f000 f900 	bl	80010f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef4:	4818      	ldr	r0, [pc, #96]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000ef6:	f001 fd43 	bl	8002980 <HAL_TIM_PWM_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000f00:	f000 f8f8 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4619      	mov	r1, r3
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000f14:	f002 fb88 	bl	8003628 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000f1e:	f000 f8e9 	bl	80010f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f22:	2360      	movs	r3, #96	; 0x60
 8000f24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000f3a:	f001 ff23 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000f44:	f000 f8d6 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM3_Init+0xe4>)
 8000f4a:	f000 fb85 	bl	8001658 <HAL_TIM_MspPostInit>

}
 8000f4e:	bf00      	nop
 8000f50:	3738      	adds	r7, #56	; 0x38
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000108 	.word	0x20000108
 8000f5c:	40000400 	.word	0x40000400

08000f60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <MX_USART2_UART_Init+0x50>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_USART2_UART_Init+0x4c>)
 8000f98:	f002 fbb6 	bl	8003708 <HAL_UART_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fa2:	f000 f8a7 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000198 	.word	0x20000198
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b3f      	ldr	r3, [pc, #252]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a3e      	ldr	r2, [pc, #248]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a38      	ldr	r2, [pc, #224]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a32      	ldr	r2, [pc, #200]	; (80010c8 <MX_GPIO_Init+0x114>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <MX_GPIO_Init+0x114>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001016:	482d      	ldr	r0, [pc, #180]	; (80010cc <MX_GPIO_Init+0x118>)
 8001018:	f000 ffd1 	bl	8001fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001022:	482b      	ldr	r0, [pc, #172]	; (80010d0 <MX_GPIO_Init+0x11c>)
 8001024:	f000 ffcb 	bl	8001fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800102e:	4829      	ldr	r0, [pc, #164]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001030:	f000 ffc5 	bl	8001fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8001034:	2313      	movs	r3, #19
 8001036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4823      	ldr	r0, [pc, #140]	; (80010d4 <MX_GPIO_Init+0x120>)
 8001048:	f000 fe1e 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	481b      	ldr	r0, [pc, #108]	; (80010cc <MX_GPIO_Init+0x118>)
 8001060:	f000 fe12 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 8001064:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2302      	movs	r3, #2
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	4619      	mov	r1, r3
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <MX_GPIO_Init+0x118>)
 800107e:	f000 fe03 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2302      	movs	r3, #2
 8001092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_GPIO_Init+0x11c>)
 800109c:	f000 fdf4 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 80010a0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_GPIO_Init+0x120>)
 80010ba:	f000 fde5 	bl	8001c88 <HAL_GPIO_Init>

}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	40011000 	.word	0x40011000
 80010d4:	40010800 	.word	0x40010800

080010d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
 80010e0:	f000 f934 	bl	800134c <scanLed>

	timerRun(); // software timer
 80010e4:	f000 fa16 	bl	8001514 <timerRun>
	getKeyinput(); // button
 80010e8:	f7ff fb0a 	bl	8000700 <getKeyinput>

//	SCH_Update();
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	e7fe      	b.n	80010fc <Error_Handler+0x8>
	...

08001100 <turnoffAll>:

#include "scanLed.h"

int enable_change = 0;
//lenh bat tat den cho nhanh
void turnoffAll(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <turnoffAll+0x4c>)
 800110c:	f000 ff57 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2108      	movs	r1, #8
 8001114:	480e      	ldr	r0, [pc, #56]	; (8001150 <turnoffAll+0x50>)
 8001116:	f000 ff52 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2120      	movs	r1, #32
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <turnoffAll+0x50>)
 8001120:	f000 ff4d 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	2110      	movs	r1, #16
 8001128:	4809      	ldr	r0, [pc, #36]	; (8001150 <turnoffAll+0x50>)
 800112a:	f000 ff48 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <turnoffAll+0x50>)
 8001136:	f000 ff42 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <turnoffAll+0x4c>)
 8001142:	f000 ff3c 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010800 	.word	0x40010800
 8001150:	40010c00 	.word	0x40010c00

08001154 <onRed_1>:
void onRed_1(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <onRed_1+0x20>)
 8001160:	f000 ff2d 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2108      	movs	r1, #8
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <onRed_1+0x24>)
 800116a:	f000 ff28 	bl	8001fbe <HAL_GPIO_WritePin>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40010800 	.word	0x40010800
 8001178:	40010c00 	.word	0x40010c00

0800117c <onYellow_1>:
void onYellow_1(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <onYellow_1+0x20>)
 8001188:	f000 ff19 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2108      	movs	r1, #8
 8001190:	4803      	ldr	r0, [pc, #12]	; (80011a0 <onYellow_1+0x24>)
 8001192:	f000 ff14 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40010800 	.word	0x40010800
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <onGreen_1>:
void onGreen_1(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <onGreen_1+0x20>)
 80011b0:	f000 ff05 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2108      	movs	r1, #8
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <onGreen_1+0x24>)
 80011ba:	f000 ff00 	bl	8001fbe <HAL_GPIO_WritePin>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00

080011cc <onRed_2>:
void onRed_2(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2120      	movs	r1, #32
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <onRed_2+0x1c>)
 80011d6:	f000 fef2 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	4802      	ldr	r0, [pc, #8]	; (80011e8 <onRed_2+0x1c>)
 80011e0:	f000 feed 	bl	8001fbe <HAL_GPIO_WritePin>
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010c00 	.word	0x40010c00

080011ec <onYellow_2>:
void onYellow_2(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	2120      	movs	r1, #32
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <onYellow_2+0x1c>)
 80011f6:	f000 fee2 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2110      	movs	r1, #16
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <onYellow_2+0x1c>)
 8001200:	f000 fedd 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010c00 	.word	0x40010c00

0800120c <onGreen_2>:
void onGreen_2(){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2120      	movs	r1, #32
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <onGreen_2+0x1c>)
 8001216:	f000 fed2 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 800121a:	2201      	movs	r2, #1
 800121c:	2110      	movs	r1, #16
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <onGreen_2+0x1c>)
 8001220:	f000 fecd 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010c00 	.word	0x40010c00

0800122c <offPed>:
void offPed(){
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <offPed+0x20>)
 8001238:	f000 fec1 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <offPed+0x24>)
 8001244:	f000 febb 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40010c00 	.word	0x40010c00
 8001250:	40010800 	.word	0x40010800

08001254 <onGreenPed>:

void onGreenPed(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <onGreenPed+0x20>)
 8001260:	f000 fead 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <onGreenPed+0x24>)
 800126c:	f000 fea7 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40010800 	.word	0x40010800

0800127c <onRedPed>:
void onRedPed(){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <onRedPed+0x20>)
 8001288:	f000 fe99 	bl	8001fbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <onRedPed+0x24>)
 8001294:	f000 fe93 	bl	8001fbe <HAL_GPIO_WritePin>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	40010800 	.word	0x40010800

080012a4 <onRed_Toggle>:
void onRed_Toggle(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <onRed_Toggle+0x34>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d107      	bne.n	80012c0 <onRed_Toggle+0x1c>
		onRed_1();
 80012b0:	f7ff ff50 	bl	8001154 <onRed_1>
		onRed_2();
 80012b4:	f7ff ff8a 	bl	80011cc <onRed_2>
		enable_change = 1;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <onRed_Toggle+0x34>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 80012be:	e008      	b.n	80012d2 <onRed_Toggle+0x2e>
	else if (enable_change == 1){
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <onRed_Toggle+0x34>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d104      	bne.n	80012d2 <onRed_Toggle+0x2e>
		turnoffAll();
 80012c8:	f7ff ff1a 	bl	8001100 <turnoffAll>
		enable_change = 0;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <onRed_Toggle+0x34>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000c8 	.word	0x200000c8

080012dc <onGreen_Toggle>:
void onGreen_Toggle(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <onGreen_Toggle+0x34>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <onGreen_Toggle+0x1c>
		onGreen_1();
 80012e8:	f7ff ff5c 	bl	80011a4 <onGreen_1>
		onGreen_2();
 80012ec:	f7ff ff8e 	bl	800120c <onGreen_2>
		enable_change = 1;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <onGreen_Toggle+0x34>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 80012f6:	e008      	b.n	800130a <onGreen_Toggle+0x2e>
	else if (enable_change == 1){
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <onGreen_Toggle+0x34>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d104      	bne.n	800130a <onGreen_Toggle+0x2e>
		turnoffAll();
 8001300:	f7ff fefe 	bl	8001100 <turnoffAll>
		enable_change = 0;
 8001304:	4b02      	ldr	r3, [pc, #8]	; (8001310 <onGreen_Toggle+0x34>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000c8 	.word	0x200000c8

08001314 <onYellow_Toggle>:
void onYellow_Toggle(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <onYellow_Toggle+0x34>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <onYellow_Toggle+0x1c>
		onYellow_1();
 8001320:	f7ff ff2c 	bl	800117c <onYellow_1>
		onYellow_2();
 8001324:	f7ff ff62 	bl	80011ec <onYellow_2>
		enable_change = 1;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <onYellow_Toggle+0x34>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 800132e:	e008      	b.n	8001342 <onYellow_Toggle+0x2e>
	else if (enable_change == 1){
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <onYellow_Toggle+0x34>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d104      	bne.n	8001342 <onYellow_Toggle+0x2e>
		turnoffAll();
 8001338:	f7ff fee2 	bl	8001100 <turnoffAll>
		enable_change = 0;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <onYellow_Toggle+0x34>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000c8 	.word	0x200000c8

0800134c <scanLed>:
void scanLed(){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	switch (status){
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <scanLed+0x18c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b5e      	cmp	r3, #94	; 0x5e
 8001356:	f300 80ad 	bgt.w	80014b4 <scanLed+0x168>
 800135a:	2b5b      	cmp	r3, #91	; 0x5b
 800135c:	da0b      	bge.n	8001376 <scanLed+0x2a>
 800135e:	2b16      	cmp	r3, #22
 8001360:	f000 8098 	beq.w	8001494 <scanLed+0x148>
 8001364:	2b16      	cmp	r3, #22
 8001366:	f300 80a5 	bgt.w	80014b4 <scanLed+0x168>
 800136a:	2b14      	cmp	r3, #20
 800136c:	d072      	beq.n	8001454 <scanLed+0x108>
 800136e:	2b15      	cmp	r3, #21
 8001370:	f000 8080 	beq.w	8001474 <scanLed+0x128>
		if (timer_flag[3] == 1){
			onGreen_Toggle();
			setTimer(50,3);
		}
		break;
	default: break;
 8001374:	e09e      	b.n	80014b4 <scanLed+0x168>
 8001376:	3b5b      	subs	r3, #91	; 0x5b
 8001378:	2b03      	cmp	r3, #3
 800137a:	f200 809b 	bhi.w	80014b4 <scanLed+0x168>
 800137e:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <scanLed+0x38>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	08001395 	.word	0x08001395
 8001388:	080013c5 	.word	0x080013c5
 800138c:	080013f5 	.word	0x080013f5
 8001390:	08001425 	.word	0x08001425
		onRed_1();
 8001394:	f7ff fede 	bl	8001154 <onRed_1>
		onGreen_2();
 8001398:	f7ff ff38 	bl	800120c <onGreen_2>
		if(timer_flag[4] == 0){
 800139c:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <scanLed+0x190>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d105      	bne.n	80013b0 <scanLed+0x64>
			onGreenPed();
 80013a4:	f7ff ff56 	bl	8001254 <onGreenPed>
			state_buzzer =ON;//buzzer
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <scanLed+0x194>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
		break;
 80013ae:	e083      	b.n	80014b8 <scanLed+0x16c>
		}else if(timer_flag[4] == 1){
 80013b0:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <scanLed+0x190>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d17f      	bne.n	80014b8 <scanLed+0x16c>
			offPed();
 80013b8:	f7ff ff38 	bl	800122c <offPed>
			state_buzzer =OFF;//buzzer
 80013bc:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <scanLed+0x194>)
 80013be:	2202      	movs	r2, #2
 80013c0:	601a      	str	r2, [r3, #0]
		break;
 80013c2:	e079      	b.n	80014b8 <scanLed+0x16c>
		onRed_1();
 80013c4:	f7ff fec6 	bl	8001154 <onRed_1>
		onYellow_2();
 80013c8:	f7ff ff10 	bl	80011ec <onYellow_2>
		if(timer_flag[4] == 0){
 80013cc:	4b43      	ldr	r3, [pc, #268]	; (80014dc <scanLed+0x190>)
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <scanLed+0x94>
			onGreenPed();
 80013d4:	f7ff ff3e 	bl	8001254 <onGreenPed>
			state_buzzer =ON;//buzzer
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <scanLed+0x194>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
		break;
 80013de:	e06d      	b.n	80014bc <scanLed+0x170>
		}else if(timer_flag[4] == 1){
 80013e0:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <scanLed+0x190>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d169      	bne.n	80014bc <scanLed+0x170>
			offPed();
 80013e8:	f7ff ff20 	bl	800122c <offPed>
			state_buzzer =OFF;//buzzer
 80013ec:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <scanLed+0x194>)
 80013ee:	2202      	movs	r2, #2
 80013f0:	601a      	str	r2, [r3, #0]
		break;
 80013f2:	e063      	b.n	80014bc <scanLed+0x170>
		onGreen_1();
 80013f4:	f7ff fed6 	bl	80011a4 <onGreen_1>
		onRed_2();
 80013f8:	f7ff fee8 	bl	80011cc <onRed_2>
		if(timer_flag[4] == 0){
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <scanLed+0x190>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <scanLed+0xc4>
			state_buzzer =ON;//buzzer
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <scanLed+0x194>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
			onRedPed();
 800140a:	f7ff ff37 	bl	800127c <onRedPed>
		break;
 800140e:	e057      	b.n	80014c0 <scanLed+0x174>
		}else if(timer_flag[4] == 1){
 8001410:	4b32      	ldr	r3, [pc, #200]	; (80014dc <scanLed+0x190>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d153      	bne.n	80014c0 <scanLed+0x174>
			state_buzzer =OFF;//buzzer
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <scanLed+0x194>)
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
			offPed();
 800141e:	f7ff ff05 	bl	800122c <offPed>
		break;
 8001422:	e04d      	b.n	80014c0 <scanLed+0x174>
		onYellow_1();
 8001424:	f7ff feaa 	bl	800117c <onYellow_1>
		onRed_2();
 8001428:	f7ff fed0 	bl	80011cc <onRed_2>
		if(timer_flag[4] == 0){
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <scanLed+0x190>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d105      	bne.n	8001440 <scanLed+0xf4>
			state_buzzer =ON;//buzzer
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <scanLed+0x194>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
			onRedPed();
 800143a:	f7ff ff1f 	bl	800127c <onRedPed>
		break;
 800143e:	e041      	b.n	80014c4 <scanLed+0x178>
		}else if(timer_flag[4] == 1){
 8001440:	4b26      	ldr	r3, [pc, #152]	; (80014dc <scanLed+0x190>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d13d      	bne.n	80014c4 <scanLed+0x178>
			state_buzzer =OFF;//buzzer
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <scanLed+0x194>)
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
			offPed();
 800144e:	f7ff feed 	bl	800122c <offPed>
		break;
 8001452:	e037      	b.n	80014c4 <scanLed+0x178>
		offPed();
 8001454:	f7ff feea 	bl	800122c <offPed>
		state_buzzer =OFF;//buzzer
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <scanLed+0x194>)
 800145a:	2202      	movs	r2, #2
 800145c:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <scanLed+0x190>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d130      	bne.n	80014c8 <scanLed+0x17c>
			onRed_Toggle();
 8001466:	f7ff ff1d 	bl	80012a4 <onRed_Toggle>
			setTimer(50,3);
 800146a:	2103      	movs	r1, #3
 800146c:	2032      	movs	r0, #50	; 0x32
 800146e:	f000 f839 	bl	80014e4 <setTimer>
		break;
 8001472:	e029      	b.n	80014c8 <scanLed+0x17c>
		offPed();
 8001474:	f7ff feda 	bl	800122c <offPed>
		state_buzzer =OFF;//buzzer
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <scanLed+0x194>)
 800147a:	2202      	movs	r2, #2
 800147c:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <scanLed+0x190>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d122      	bne.n	80014cc <scanLed+0x180>
			onYellow_Toggle();
 8001486:	f7ff ff45 	bl	8001314 <onYellow_Toggle>
			setTimer(50,3);
 800148a:	2103      	movs	r1, #3
 800148c:	2032      	movs	r0, #50	; 0x32
 800148e:	f000 f829 	bl	80014e4 <setTimer>
		break;
 8001492:	e01b      	b.n	80014cc <scanLed+0x180>
		offPed();
 8001494:	f7ff feca 	bl	800122c <offPed>
		state_buzzer =OFF; //buzzer
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <scanLed+0x194>)
 800149a:	2202      	movs	r2, #2
 800149c:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <scanLed+0x190>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d114      	bne.n	80014d0 <scanLed+0x184>
			onGreen_Toggle();
 80014a6:	f7ff ff19 	bl	80012dc <onGreen_Toggle>
			setTimer(50,3);
 80014aa:	2103      	movs	r1, #3
 80014ac:	2032      	movs	r0, #50	; 0x32
 80014ae:	f000 f819 	bl	80014e4 <setTimer>
		break;
 80014b2:	e00d      	b.n	80014d0 <scanLed+0x184>
	default: break;
 80014b4:	bf00      	nop
 80014b6:	e00c      	b.n	80014d2 <scanLed+0x186>
		break;
 80014b8:	bf00      	nop
 80014ba:	e00a      	b.n	80014d2 <scanLed+0x186>
		break;
 80014bc:	bf00      	nop
 80014be:	e008      	b.n	80014d2 <scanLed+0x186>
		break;
 80014c0:	bf00      	nop
 80014c2:	e006      	b.n	80014d2 <scanLed+0x186>
		break;
 80014c4:	bf00      	nop
 80014c6:	e004      	b.n	80014d2 <scanLed+0x186>
		break;
 80014c8:	bf00      	nop
 80014ca:	e002      	b.n	80014d2 <scanLed+0x186>
		break;
 80014cc:	bf00      	nop
 80014ce:	e000      	b.n	80014d2 <scanLed+0x186>
		break;
 80014d0:	bf00      	nop
	}
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000048 	.word	0x20000048
 80014dc:	20000058 	.word	0x20000058
 80014e0:	20000044 	.word	0x20000044

080014e4 <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 80014ee:	4907      	ldr	r1, [pc, #28]	; (800150c <setTimer+0x28>)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <setTimer+0x2c>)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2100      	movs	r1, #0
 80014fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	200000cc 	.word	0x200000cc
 8001510:	20000058 	.word	0x20000058

08001514 <timerRun>:

void timerRun(){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e01c      	b.n	800155a <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <timerRun+0x58>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd13      	ble.n	8001554 <timerRun+0x40>
			timer_counter[i]--;
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <timerRun+0x58>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <timerRun+0x58>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <timerRun+0x58>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <timerRun+0x40>
				timer_flag [i] = 1;
 800154a:	4a09      	ldr	r2, [pc, #36]	; (8001570 <timerRun+0x5c>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2101      	movs	r1, #1
 8001550:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b09      	cmp	r3, #9
 800155e:	dddf      	ble.n	8001520 <timerRun+0xc>
			}
		}
	}
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	200000cc 	.word	0x200000cc
 8001570:	20000058 	.word	0x20000058

08001574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_MspInit+0x5c>)
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_MspInit+0x5c>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6193      	str	r3, [r2, #24]
 8001586:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_MspInit+0x5c>)
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_MspInit+0x5c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_MspInit+0x5c>)
 8001598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159c:	61d3      	str	r3, [r2, #28]
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_MspInit+0x5c>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_MspInit+0x60>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_MspInit+0x60>)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000

080015d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d114      	bne.n	8001614 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201c      	movs	r0, #28
 8001608:	f000 fa55 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160c:	201c      	movs	r0, #28
 800160e:	f000 fa6e 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001612:	e018      	b.n	8001646 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_TIM_Base_MspInit+0x7c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_TIM_Base_MspInit+0x78>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	201d      	movs	r0, #29
 800163c:	f000 fa3b 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001640:	201d      	movs	r0, #29
 8001642:	f000 fa54 	bl	8001aee <HAL_NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40000400 	.word	0x40000400

08001658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <HAL_TIM_MspPostInit+0x58>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d117      	bne.n	80016a8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_TIM_MspPostInit+0x5c>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_TIM_MspPostInit+0x5c>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_TIM_MspPostInit+0x5c>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001690:	2340      	movs	r3, #64	; 0x40
 8001692:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2302      	movs	r3, #2
 800169a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_TIM_MspPostInit+0x60>)
 80016a4:	f000 faf0 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010800 	.word	0x40010800

080016bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <HAL_UART_MspInit+0x98>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d137      	bne.n	800174c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <HAL_UART_MspInit+0x9c>)
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <HAL_UART_MspInit+0x9c>)
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e6:	61d3      	str	r3, [r2, #28]
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_UART_MspInit+0x9c>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_UART_MspInit+0x9c>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_UART_MspInit+0x9c>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_UART_MspInit+0x9c>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800170c:	2304      	movs	r3, #4
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480f      	ldr	r0, [pc, #60]	; (800175c <HAL_UART_MspInit+0xa0>)
 8001720:	f000 fab2 	bl	8001c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001724:	2308      	movs	r3, #8
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4809      	ldr	r0, [pc, #36]	; (800175c <HAL_UART_MspInit+0xa0>)
 8001738:	f000 faa6 	bl	8001c88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2026      	movs	r0, #38	; 0x26
 8001742:	f000 f9b8 	bl	8001ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001746:	2026      	movs	r0, #38	; 0x26
 8001748:	f000 f9d1 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40004400 	.word	0x40004400
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a6:	f000 f893 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM2_IRQHandler+0x10>)
 80017b6:	f001 f9dd 	bl	8002b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000150 	.word	0x20000150

080017c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM3_IRQHandler+0x10>)
 80017ca:	f001 f9d3 	bl	8002b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000108 	.word	0x20000108

080017d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USART2_IRQHandler+0x10>)
 80017de:	f001 ffe3 	bl	80037a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000198 	.word	0x20000198

080017ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f8:	f7ff fff8 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017fe:	490c      	ldr	r1, [pc, #48]	; (8001830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001814:	4c09      	ldr	r4, [pc, #36]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001822:	f002 fca3 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff fa73 	bl	8000d10 <main>
  bx lr
 800182a:	4770      	bx	lr
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001834:	08004210 	.word	0x08004210
  ldr r2, =_sbss
 8001838:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800183c:	200001e4 	.word	0x200001e4

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_Init+0x28>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_Init+0x28>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f923 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	200f      	movs	r0, #15
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff fe88 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f93b 	bl	8001b0a <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f903 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000080 	.word	0x20000080
 80018c8:	20000088 	.word	0x20000088
 80018cc:	20000084 	.word	0x20000084

080018d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_IncTick+0x1c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_IncTick+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_IncTick+0x20>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000088 	.word	0x20000088
 80018f0:	200001e0 	.word	0x200001e0

080018f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_GetTick+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	200001e0 	.word	0x200001e0

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4906      	ldr	r1, [pc, #24]	; (80019a0 <__NVIC_EnableIRQ+0x34>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	; (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	; (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	; 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff90 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff2d 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff42 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff90 	bl	80019f8 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5f 	bl	80019a4 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff35 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa2 	bl	8001a5c <SysTick_Config>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d008      	beq.n	8001b4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e020      	b.n	8001b8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020e 	bic.w	r2, r2, #14
 8001b5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d005      	beq.n	8001bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e051      	b.n	8001c60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 020e 	bic.w	r2, r2, #14
 8001bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_DMA_Abort_IT+0xd4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d029      	beq.n	8001c3a <HAL_DMA_Abort_IT+0xa2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_DMA_Abort_IT+0xd8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x9e>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <HAL_DMA_Abort_IT+0xdc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d01a      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x98>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_DMA_Abort_IT+0xe0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d012      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x92>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_DMA_Abort_IT+0xe4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00a      	beq.n	8001c24 <HAL_DMA_Abort_IT+0x8c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a1b      	ldr	r2, [pc, #108]	; (8001c80 <HAL_DMA_Abort_IT+0xe8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d102      	bne.n	8001c1e <HAL_DMA_Abort_IT+0x86>
 8001c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c1c:	e00e      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c22:	e00b      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c28:	e008      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	e005      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c34:	e002      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c36:	2310      	movs	r3, #16
 8001c38:	e000      	b.n	8001c3c <HAL_DMA_Abort_IT+0xa4>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_DMA_Abort_IT+0xec>)
 8001c3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
    } 
  }
  return status;
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40020008 	.word	0x40020008
 8001c70:	4002001c 	.word	0x4002001c
 8001c74:	40020030 	.word	0x40020030
 8001c78:	40020044 	.word	0x40020044
 8001c7c:	40020058 	.word	0x40020058
 8001c80:	4002006c 	.word	0x4002006c
 8001c84:	40020000 	.word	0x40020000

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b08b      	sub	sp, #44	; 0x2c
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e169      	b.n	8001f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8158 	bne.w	8001f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4a9a      	ldr	r2, [pc, #616]	; (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d05e      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cc4:	4a98      	ldr	r2, [pc, #608]	; (8001f28 <HAL_GPIO_Init+0x2a0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d875      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cca:	4a98      	ldr	r2, [pc, #608]	; (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d058      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cd0:	4a96      	ldr	r2, [pc, #600]	; (8001f2c <HAL_GPIO_Init+0x2a4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d86f      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a96      	ldr	r2, [pc, #600]	; (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d052      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cdc:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <HAL_GPIO_Init+0x2a8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d869      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a94      	ldr	r2, [pc, #592]	; (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04c      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a92      	ldr	r2, [pc, #584]	; (8001f34 <HAL_GPIO_Init+0x2ac>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d863      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cee:	4a92      	ldr	r2, [pc, #584]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d046      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
 8001cf4:	4a90      	ldr	r2, [pc, #576]	; (8001f38 <HAL_GPIO_Init+0x2b0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d85d      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001cfa:	2b12      	cmp	r3, #18
 8001cfc:	d82a      	bhi.n	8001d54 <HAL_GPIO_Init+0xcc>
 8001cfe:	2b12      	cmp	r3, #18
 8001d00:	d859      	bhi.n	8001db6 <HAL_GPIO_Init+0x12e>
 8001d02:	a201      	add	r2, pc, #4	; (adr r2, 8001d08 <HAL_GPIO_Init+0x80>)
 8001d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d5d 	.word	0x08001d5d
 8001d10:	08001d6f 	.word	0x08001d6f
 8001d14:	08001db1 	.word	0x08001db1
 8001d18:	08001db7 	.word	0x08001db7
 8001d1c:	08001db7 	.word	0x08001db7
 8001d20:	08001db7 	.word	0x08001db7
 8001d24:	08001db7 	.word	0x08001db7
 8001d28:	08001db7 	.word	0x08001db7
 8001d2c:	08001db7 	.word	0x08001db7
 8001d30:	08001db7 	.word	0x08001db7
 8001d34:	08001db7 	.word	0x08001db7
 8001d38:	08001db7 	.word	0x08001db7
 8001d3c:	08001db7 	.word	0x08001db7
 8001d40:	08001db7 	.word	0x08001db7
 8001d44:	08001db7 	.word	0x08001db7
 8001d48:	08001db7 	.word	0x08001db7
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001d79 	.word	0x08001d79
 8001d54:	4a79      	ldr	r2, [pc, #484]	; (8001f3c <HAL_GPIO_Init+0x2b4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d013      	beq.n	8001d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d5a:	e02c      	b.n	8001db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	623b      	str	r3, [r7, #32]
          break;
 8001d62:	e029      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e024      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	3308      	adds	r3, #8
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e01f      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e01a      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e013      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	611a      	str	r2, [r3, #16]
          break;
 8001da2:	e009      	b.n	8001db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	615a      	str	r2, [r3, #20]
          break;
 8001dae:	e003      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
          break;
 8001db4:	e000      	b.n	8001db8 <HAL_GPIO_Init+0x130>
          break;
 8001db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d801      	bhi.n	8001dc2 <HAL_GPIO_Init+0x13a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	e001      	b.n	8001dc6 <HAL_GPIO_Init+0x13e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2bff      	cmp	r3, #255	; 0xff
 8001dcc:	d802      	bhi.n	8001dd4 <HAL_GPIO_Init+0x14c>
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x152>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	3b08      	subs	r3, #8
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	210f      	movs	r1, #15
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	6a39      	ldr	r1, [r7, #32]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80b1 	beq.w	8001f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_GPIO_Init+0x2b8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e20:	4a48      	ldr	r2, [pc, #288]	; (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	220f      	movs	r2, #15
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a40      	ldr	r2, [pc, #256]	; (8001f48 <HAL_GPIO_Init+0x2c0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x1ec>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <HAL_GPIO_Init+0x2c4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1e8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3e      	ldr	r2, [pc, #248]	; (8001f50 <HAL_GPIO_Init+0x2c8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <HAL_GPIO_Init+0x2cc>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1e0>
 8001e64:	2303      	movs	r3, #3
 8001e66:	e006      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e68:	2304      	movs	r3, #4
 8001e6a:	e004      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e74:	2300      	movs	r3, #0
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e86:	492f      	ldr	r1, [pc, #188]	; (8001f44 <HAL_GPIO_Init+0x2bc>)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	492c      	ldr	r1, [pc, #176]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4928      	ldr	r1, [pc, #160]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4922      	ldr	r1, [pc, #136]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	491e      	ldr	r1, [pc, #120]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4918      	ldr	r1, [pc, #96]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4914      	ldr	r1, [pc, #80]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d021      	beq.n	8001f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	490e      	ldr	r1, [pc, #56]	; (8001f58 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e021      	b.n	8001f6a <HAL_GPIO_Init+0x2e2>
 8001f26:	bf00      	nop
 8001f28:	10320000 	.word	0x10320000
 8001f2c:	10310000 	.word	0x10310000
 8001f30:	10220000 	.word	0x10220000
 8001f34:	10210000 	.word	0x10210000
 8001f38:	10120000 	.word	0x10120000
 8001f3c:	10110000 	.word	0x10110000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40011400 	.word	0x40011400
 8001f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	4909      	ldr	r1, [pc, #36]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f47f ae8e 	bne.w	8001c9c <HAL_GPIO_Init+0x14>
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	372c      	adds	r7, #44	; 0x2c
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	40010400 	.word	0x40010400

08001f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	807b      	strh	r3, [r7, #2]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fce:	787b      	ldrb	r3, [r7, #1]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd4:	887a      	ldrh	r2, [r7, #2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fdc:	887b      	ldrh	r3, [r7, #2]
 8001fde:	041a      	lsls	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	611a      	str	r2, [r3, #16]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002000:	887a      	ldrh	r2, [r7, #2]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	041a      	lsls	r2, r3, #16
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43d9      	mvns	r1, r3
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	400b      	ands	r3, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e26c      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8087 	beq.w	800214e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002040:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b04      	cmp	r3, #4
 800204a:	d00c      	beq.n	8002066 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800204c:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 030c 	and.w	r3, r3, #12
 8002054:	2b08      	cmp	r3, #8
 8002056:	d112      	bne.n	800207e <HAL_RCC_OscConfig+0x5e>
 8002058:	4b8c      	ldr	r3, [pc, #560]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d10b      	bne.n	800207e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002066:	4b89      	ldr	r3, [pc, #548]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d06c      	beq.n	800214c <HAL_RCC_OscConfig+0x12c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d168      	bne.n	800214c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e246      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x76>
 8002088:	4b80      	ldr	r3, [pc, #512]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a7f      	ldr	r2, [pc, #508]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e02e      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4b7b      	ldr	r3, [pc, #492]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a7a      	ldr	r2, [pc, #488]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a77      	ldr	r2, [pc, #476]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0xbc>
 80020c2:	4b72      	ldr	r3, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a71      	ldr	r2, [pc, #452]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6e      	ldr	r2, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0xd4>
 80020dc:	4b6b      	ldr	r3, [pc, #428]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a6a      	ldr	r2, [pc, #424]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fbfa 	bl	80018f4 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff fbf6 	bl	80018f4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1fa      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0xe4>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff fbe6 	bl	80018f4 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff fbe2 	bl	80018f4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1e6      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x10c>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d063      	beq.n	8002222 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800215a:	4b4c      	ldr	r3, [pc, #304]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b08      	cmp	r3, #8
 8002170:	d11c      	bne.n	80021ac <HAL_RCC_OscConfig+0x18c>
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x176>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e1ba      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4939      	ldr	r1, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	e03a      	b.n	8002222 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_OscConfig+0x270>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff fb9b 	bl	80018f4 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff fb97 	bl	80018f4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e19b      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4927      	ldr	r1, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0x270>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7ff fb7a 	bl	80018f4 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7ff fb76 	bl	80018f4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e17a      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d03a      	beq.n	80022a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d019      	beq.n	800226a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_RCC_OscConfig+0x274>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223c:	f7ff fb5a 	bl	80018f4 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002244:	f7ff fb56 	bl	80018f4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e15a      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_RCC_OscConfig+0x26c>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002262:	2001      	movs	r0, #1
 8002264:	f000 facc 	bl	8002800 <RCC_Delay>
 8002268:	e01c      	b.n	80022a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_OscConfig+0x274>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7ff fb40 	bl	80018f4 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002276:	e00f      	b.n	8002298 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff fb3c 	bl	80018f4 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d908      	bls.n	8002298 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e140      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	42420000 	.word	0x42420000
 8002294:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b9e      	ldr	r3, [pc, #632]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e9      	bne.n	8002278 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80a6 	beq.w	80023fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b97      	ldr	r3, [pc, #604]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	4b94      	ldr	r3, [pc, #592]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4a93      	ldr	r2, [pc, #588]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022cc:	61d3      	str	r3, [r2, #28]
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <HAL_RCC_OscConfig+0x4f8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b8b      	ldr	r3, [pc, #556]	; (8002518 <HAL_RCC_OscConfig+0x4f8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a8a      	ldr	r2, [pc, #552]	; (8002518 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7ff fafd 	bl	80018f4 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7ff faf9 	bl	80018f4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b64      	cmp	r3, #100	; 0x64
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0fd      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x4f8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x312>
 8002324:	4b7b      	ldr	r3, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4a7a      	ldr	r2, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6213      	str	r3, [r2, #32]
 8002330:	e02d      	b.n	800238e <HAL_RCC_OscConfig+0x36e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x334>
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a75      	ldr	r2, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	4a72      	ldr	r2, [pc, #456]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	6213      	str	r3, [r2, #32]
 8002352:	e01c      	b.n	800238e <HAL_RCC_OscConfig+0x36e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d10c      	bne.n	8002376 <HAL_RCC_OscConfig+0x356>
 800235c:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a6c      	ldr	r2, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a69      	ldr	r2, [pc, #420]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e00b      	b.n	800238e <HAL_RCC_OscConfig+0x36e>
 8002376:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a66      	ldr	r2, [pc, #408]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	4b64      	ldr	r3, [pc, #400]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a63      	ldr	r2, [pc, #396]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d015      	beq.n	80023c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7ff faad 	bl	80018f4 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7ff faa9 	bl	80018f4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0ab      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ee      	beq.n	800239e <HAL_RCC_OscConfig+0x37e>
 80023c0:	e014      	b.n	80023ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c2:	f7ff fa97 	bl	80018f4 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7ff fa93 	bl	80018f4 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e095      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e0:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1ee      	bne.n	80023ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f2:	4b48      	ldr	r3, [pc, #288]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a47      	ldr	r2, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8081 	beq.w	800250a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002408:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d061      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d146      	bne.n	80024aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0x4fc>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff fa67 	bl	80018f4 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff fa63 	bl	80018f4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e067      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243c:	4b35      	ldr	r3, [pc, #212]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d108      	bne.n	8002464 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	492d      	ldr	r1, [pc, #180]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a19      	ldr	r1, [r3, #32]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	430b      	orrs	r3, r1
 8002476:	4927      	ldr	r1, [pc, #156]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x4fc>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff fa37 	bl	80018f4 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff fa33 	bl	80018f4 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e037      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x46a>
 80024a8:	e02f      	b.n	800250a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_RCC_OscConfig+0x4fc>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fa20 	bl	80018f4 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b8:	f7ff fa1c 	bl	80018f4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e020      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x498>
 80024d6:	e018      	b.n	800250a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e013      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
 800251c:	42420060 	.word	0x42420060

08002520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0d0      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002534:	4b6a      	ldr	r3, [pc, #424]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d910      	bls.n	8002564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b67      	ldr	r3, [pc, #412]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 0207 	bic.w	r2, r3, #7
 800254a:	4965      	ldr	r1, [pc, #404]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0b8      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002586:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002594:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800259e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	494d      	ldr	r1, [pc, #308]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d040      	beq.n	8002640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d115      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e073      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06b      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4936      	ldr	r1, [pc, #216]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002610:	f7ff f970 	bl	80018f4 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7ff f96c 	bl	80018f4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e053      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d210      	bcs.n	8002670 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4922      	ldr	r1, [pc, #136]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e032      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4916      	ldr	r1, [pc, #88]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	490e      	ldr	r1, [pc, #56]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ae:	f000 f821 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	490a      	ldr	r1, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	5ccb      	ldrb	r3, [r1, r3]
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1cc>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1d0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f8ce 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40021000 	.word	0x40021000
 80026e8:	080041dc 	.word	0x080041dc
 80026ec:	20000080 	.word	0x20000080
 80026f0:	20000084 	.word	0x20000084

080026f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_GetSysClockFreq+0x94>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x30>
 800271e:	2b08      	cmp	r3, #8
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x36>
 8002722:	e027      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_GetSysClockFreq+0x98>)
 8002726:	613b      	str	r3, [r7, #16]
      break;
 8002728:	e027      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	0c9b      	lsrs	r3, r3, #18
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d010      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_RCC_GetSysClockFreq+0x94>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0c5b      	lsrs	r3, r3, #17
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	4a11      	ldr	r2, [pc, #68]	; (8002794 <HAL_RCC_GetSysClockFreq+0xa0>)
 800274e:	5cd3      	ldrb	r3, [r2, r3]
 8002750:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a0d      	ldr	r2, [pc, #52]	; (800278c <HAL_RCC_GetSysClockFreq+0x98>)
 8002756:	fb02 f203 	mul.w	r2, r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e004      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	613b      	str	r3, [r7, #16]
      break;
 8002772:	e002      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetSysClockFreq+0x98>)
 8002776:	613b      	str	r3, [r7, #16]
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	693b      	ldr	r3, [r7, #16]
}
 800277c:	4618      	mov	r0, r3
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	007a1200 	.word	0x007a1200
 8002790:	080041f4 	.word	0x080041f4
 8002794:	08004204 	.word	0x08004204
 8002798:	003d0900 	.word	0x003d0900

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <HAL_RCC_GetHCLKFreq+0x10>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20000080 	.word	0x20000080

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff2 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	080041ec 	.word	0x080041ec

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffde 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0adb      	lsrs	r3, r3, #11
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	080041ec 	.word	0x080041ec

08002800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <RCC_Delay+0x34>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <RCC_Delay+0x38>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a5b      	lsrs	r3, r3, #9
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800281c:	bf00      	nop
  }
  while (Delay --);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	60fa      	str	r2, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <RCC_Delay+0x1c>
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000080 	.word	0x20000080
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e041      	b.n	80028d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe feb8 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 fc30 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e03a      	b.n	800296a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f042 0201 	orr.w	r2, r2, #1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_TIM_Base_Start_IT+0x98>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00e      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x58>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d009      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x58>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <HAL_TIM_Base_Start_IT+0x9c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x58>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <HAL_TIM_Base_Start_IT+0xa0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d111      	bne.n	8002958 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b06      	cmp	r3, #6
 8002944:	d010      	beq.n	8002968 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002956:	e007      	b.n	8002968 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800

08002980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e041      	b.n	8002a16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f839 	bl	8002a1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fb8e 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_TIM_PWM_Start+0x24>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e022      	b.n	8002a9a <HAL_TIM_PWM_Start+0x6a>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d109      	bne.n	8002a6e <HAL_TIM_PWM_Start+0x3e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	bf14      	ite	ne
 8002a66:	2301      	movne	r3, #1
 8002a68:	2300      	moveq	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	e015      	b.n	8002a9a <HAL_TIM_PWM_Start+0x6a>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d109      	bne.n	8002a88 <HAL_TIM_PWM_Start+0x58>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e008      	b.n	8002a9a <HAL_TIM_PWM_Start+0x6a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e05e      	b.n	8002b60 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x82>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	e013      	b.n	8002ada <HAL_TIM_PWM_Start+0xaa>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0x92>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac0:	e00b      	b.n	8002ada <HAL_TIM_PWM_Start+0xaa>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d104      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0xa2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad0:	e003      	b.n	8002ada <HAL_TIM_PWM_Start+0xaa>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	6839      	ldr	r1, [r7, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fd7c 	bl	80035e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_TIM_PWM_Start+0x138>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d107      	bne.n	8002b02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_TIM_PWM_Start+0x138>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_TIM_PWM_Start+0xfa>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d009      	beq.n	8002b2a <HAL_TIM_PWM_Start+0xfa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <HAL_TIM_PWM_Start+0x13c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIM_PWM_Start+0xfa>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_TIM_PWM_Start+0x140>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d111      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b06      	cmp	r3, #6
 8002b3a:	d010      	beq.n	8002b5e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4c:	e007      	b.n	8002b5e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40012c00 	.word	0x40012c00
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	40000800 	.word	0x40000800

08002b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0202 	mvn.w	r2, #2
 8002ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa76 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa69 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fa78 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0204 	mvn.w	r2, #4
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa4c 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa3f 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa4e 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0208 	mvn.w	r2, #8
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa22 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa15 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fa24 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9f8 	bl	80030a8 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9eb 	bl	8003096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f9fa 	bl	80030ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f9f0 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fce9 	bl	80036f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f9be 	bl	80030cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fcb4 	bl	80036e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0ae      	b.n	8002f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	f200 809f 	bhi.w	8002ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002ef1 	.word	0x08002ef1
 8002dc0:	08002ef1 	.word	0x08002ef1
 8002dc4:	08002ef1 	.word	0x08002ef1
 8002dc8:	08002e2d 	.word	0x08002e2d
 8002dcc:	08002ef1 	.word	0x08002ef1
 8002dd0:	08002ef1 	.word	0x08002ef1
 8002dd4:	08002ef1 	.word	0x08002ef1
 8002dd8:	08002e6f 	.word	0x08002e6f
 8002ddc:	08002ef1 	.word	0x08002ef1
 8002de0:	08002ef1 	.word	0x08002ef1
 8002de4:	08002ef1 	.word	0x08002ef1
 8002de8:	08002eaf 	.word	0x08002eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f9d6 	bl	80031a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0208 	orr.w	r2, r2, #8
 8002e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0204 	bic.w	r2, r2, #4
 8002e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6999      	ldr	r1, [r3, #24]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	619a      	str	r2, [r3, #24]
      break;
 8002e2a:	e064      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fa1c 	bl	8003270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6999      	ldr	r1, [r3, #24]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	021a      	lsls	r2, r3, #8
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	619a      	str	r2, [r3, #24]
      break;
 8002e6c:	e043      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fa65 	bl	8003344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0208 	orr.w	r2, r2, #8
 8002e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0204 	bic.w	r2, r2, #4
 8002e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69d9      	ldr	r1, [r3, #28]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	61da      	str	r2, [r3, #28]
      break;
 8002eac:	e023      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 faaf 	bl	8003418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69da      	ldr	r2, [r3, #28]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69da      	ldr	r2, [r3, #28]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	021a      	lsls	r2, r3, #8
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	61da      	str	r2, [r3, #28]
      break;
 8002eee:	e002      	b.n	8002ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_TIM_ConfigClockSource+0x1c>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e0b4      	b.n	800308e <HAL_TIM_ConfigClockSource+0x186>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5c:	d03e      	beq.n	8002fdc <HAL_TIM_ConfigClockSource+0xd4>
 8002f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f62:	f200 8087 	bhi.w	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6a:	f000 8086 	beq.w	800307a <HAL_TIM_ConfigClockSource+0x172>
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d87f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b70      	cmp	r3, #112	; 0x70
 8002f76:	d01a      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0xa6>
 8002f78:	2b70      	cmp	r3, #112	; 0x70
 8002f7a:	d87b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b60      	cmp	r3, #96	; 0x60
 8002f7e:	d050      	beq.n	8003022 <HAL_TIM_ConfigClockSource+0x11a>
 8002f80:	2b60      	cmp	r3, #96	; 0x60
 8002f82:	d877      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d03c      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0xfa>
 8002f88:	2b50      	cmp	r3, #80	; 0x50
 8002f8a:	d873      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b40      	cmp	r3, #64	; 0x40
 8002f8e:	d058      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x13a>
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d86f      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b30      	cmp	r3, #48	; 0x30
 8002f96:	d064      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	2b30      	cmp	r3, #48	; 0x30
 8002f9a:	d86b      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d060      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d867      	bhi.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05c      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d05a      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x15a>
 8002fac:	e062      	b.n	8003074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f000 faf0 	bl	80035a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
      break;
 8002fda:	e04f      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f000 fad9 	bl	80035a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffe:	609a      	str	r2, [r3, #8]
      break;
 8003000:	e03c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	461a      	mov	r2, r3
 8003010:	f000 fa50 	bl	80034b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2150      	movs	r1, #80	; 0x50
 800301a:	4618      	mov	r0, r3
 800301c:	f000 faa7 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8003020:	e02c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	461a      	mov	r2, r3
 8003030:	f000 fa6e 	bl	8003510 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2160      	movs	r1, #96	; 0x60
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fa97 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8003040:	e01c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	f000 fa30 	bl	80034b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fa87 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8003060:	e00c      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f000 fa7e 	bl	800356e <TIM_ITRx_SetConfig>
      break;
 8003072:	e003      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      break;
 8003078:	e000      	b.n	800307c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800307a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bc80      	pop	{r7}
 80030dc:	4770      	bx	lr
	...

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <TIM_Base_SetConfig+0xb8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_Base_SetConfig+0x30>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d007      	beq.n	8003110 <TIM_Base_SetConfig+0x30>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a26      	ldr	r2, [pc, #152]	; (800319c <TIM_Base_SetConfig+0xbc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_Base_SetConfig+0x30>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <TIM_Base_SetConfig+0xc0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d108      	bne.n	8003122 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1c      	ldr	r2, [pc, #112]	; (8003198 <TIM_Base_SetConfig+0xb8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_Base_SetConfig+0x62>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d007      	beq.n	8003142 <TIM_Base_SetConfig+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <TIM_Base_SetConfig+0xbc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_Base_SetConfig+0x62>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <TIM_Base_SetConfig+0xc0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <TIM_Base_SetConfig+0xb8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d103      	bne.n	8003188 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	615a      	str	r2, [r3, #20]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800

080031a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f023 0201 	bic.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f023 0302 	bic.w	r3, r3, #2
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <TIM_OC1_SetConfig+0xc8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10c      	bne.n	800321a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f023 0308 	bic.w	r3, r3, #8
 8003206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a13      	ldr	r2, [pc, #76]	; (800326c <TIM_OC1_SetConfig+0xc8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d111      	bne.n	8003246 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	621a      	str	r2, [r3, #32]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40012c00 	.word	0x40012c00

08003270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 0210 	bic.w	r2, r3, #16
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0320 	bic.w	r3, r3, #32
 80032ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <TIM_OC2_SetConfig+0xd0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10d      	bne.n	80032ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <TIM_OC2_SetConfig+0xd0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d113      	bne.n	800331c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00

08003344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800338c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <TIM_OC3_SetConfig+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10d      	bne.n	80033be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a14      	ldr	r2, [pc, #80]	; (8003414 <TIM_OC3_SetConfig+0xd0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d113      	bne.n	80033ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00

08003418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	031b      	lsls	r3, r3, #12
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <TIM_OC4_SetConfig+0x98>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d109      	bne.n	800348c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800347e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	621a      	str	r2, [r3, #32]
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40012c00 	.word	0x40012c00

080034b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 030a 	bic.w	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f023 0210 	bic.w	r2, r3, #16
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800353a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	031b      	lsls	r3, r3, #12
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800354c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	621a      	str	r2, [r3, #32]
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	f043 0307 	orr.w	r3, r3, #7
 8003590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b087      	sub	sp, #28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	021a      	lsls	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	609a      	str	r2, [r3, #8]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	2201      	movs	r2, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1a      	ldr	r2, [r3, #32]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800363c:	2302      	movs	r3, #2
 800363e:	e046      	b.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d009      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d004      	beq.n	80036a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10c      	bne.n	80036bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800

080036e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e042      	b.n	80037a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd ffc4 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2224      	movs	r2, #36	; 0x24
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fc7f 	bl	8004050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b0ba      	sub	sp, #232	; 0xe8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <HAL_UART_IRQHandler+0x66>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fb63 	bl	8003ed2 <UART_Receive_IT>
      return;
 800380c:	e25b      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800380e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80de 	beq.w	80039d4 <HAL_UART_IRQHandler+0x22c>
 8003818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003828:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80d1 	beq.w	80039d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <HAL_UART_IRQHandler+0xae>
 800383e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_UART_IRQHandler+0xd2>
 8003862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_UART_IRQHandler+0xf6>
 8003886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d011      	beq.n	80038ce <HAL_UART_IRQHandler+0x126>
 80038aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f043 0208 	orr.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 81f2 	beq.w	8003cbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_UART_IRQHandler+0x14e>
 80038e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 faee 	bl	8003ed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d103      	bne.n	8003922 <HAL_UART_IRQHandler+0x17a>
 800391a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d04f      	beq.n	80039c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9f8 	bl	8003d18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d041      	beq.n	80039ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3314      	adds	r3, #20
 800393c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800394c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003962:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800396e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800397a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1d9      	bne.n	8003936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d013      	beq.n	80039b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	4a7e      	ldr	r2, [pc, #504]	; (8003b88 <HAL_UART_IRQHandler+0x3e0>)
 8003990:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe f8fe 	bl	8001b98 <HAL_DMA_Abort_IT>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039ac:	4610      	mov	r0, r2
 80039ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e00e      	b.n	80039d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f99c 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e00a      	b.n	80039d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f998 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e006      	b.n	80039d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f994 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039ce:	e175      	b.n	8003cbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	bf00      	nop
    return;
 80039d2:	e173      	b.n	8003cbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d8:	2b01      	cmp	r3, #1
 80039da:	f040 814f 	bne.w	8003c7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8148 	beq.w	8003c7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8141 	beq.w	8003c7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80b6 	beq.w	8003b8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8145 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	f080 813e 	bcs.w	8003cc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	f000 8088 	beq.w	8003b68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1d9      	bne.n	8003a58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ac8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003acc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ad0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e1      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e3      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b38:	f023 0310 	bic.w	r3, r3, #16
 8003b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd ffdd 	bl	8001b22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8bf 	bl	8003d02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b84:	e09c      	b.n	8003cc0 <HAL_UART_IRQHandler+0x518>
 8003b86:	bf00      	nop
 8003b88:	08003ddd 	.word	0x08003ddd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 808e 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8089 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003bd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e3      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c0e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c16:	e841 2300 	strex	r3, r2, [r1]
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1e3      	bne.n	8003bea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0310 	bic.w	r3, r3, #16
 8003c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c54:	61fa      	str	r2, [r7, #28]
 8003c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	69b9      	ldr	r1, [r7, #24]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	617b      	str	r3, [r7, #20]
   return(result);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e3      	bne.n	8003c30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f844 	bl	8003d02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c7a:	e023      	b.n	8003cc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_UART_IRQHandler+0x4f4>
 8003c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f8b5 	bl	8003e04 <UART_Transmit_IT>
    return;
 8003c9a:	e014      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
 8003ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8f4 	bl	8003ea2 <UART_EndTransmit_IT>
    return;
 8003cba:	e004      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003cbc:	bf00      	nop
 8003cbe:	e002      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cc4:	bf00      	nop
  }
}
 8003cc6:	37e8      	adds	r7, #232	; 0xe8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b095      	sub	sp, #84	; 0x54
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	330c      	adds	r3, #12
 8003d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d40:	643a      	str	r2, [r7, #64]	; 0x40
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e5      	bne.n	8003d20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e5      	bne.n	8003d54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d119      	bne.n	8003dc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f023 0310 	bic.w	r3, r3, #16
 8003da6:	647b      	str	r3, [r7, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db0:	61ba      	str	r2, [r7, #24]
 8003db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6979      	ldr	r1, [r7, #20]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dd2:	bf00      	nop
 8003dd4:	3754      	adds	r7, #84	; 0x54
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff ff7a 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b21      	cmp	r3, #33	; 0x21
 8003e16:	d13e      	bne.n	8003e96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e20:	d114      	bne.n	8003e4c <UART_Transmit_IT+0x48>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d110      	bne.n	8003e4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]
 8003e4a:	e008      	b.n	8003e5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	1c59      	adds	r1, r3, #1
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6211      	str	r1, [r2, #32]
 8003e56:	781a      	ldrb	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e000      	b.n	8003e98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff ff02 	bl	8003ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b08c      	sub	sp, #48	; 0x30
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b22      	cmp	r3, #34	; 0x22
 8003ee4:	f040 80ae 	bne.w	8004044 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef0:	d117      	bne.n	8003f22 <UART_Receive_IT+0x50>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d113      	bne.n	8003f22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f20:	e026      	b.n	8003f70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d007      	beq.n	8003f46 <UART_Receive_IT+0x74>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <UART_Receive_IT+0x82>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e008      	b.n	8003f66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d15d      	bne.n	8004040 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0220 	bic.w	r2, r2, #32
 8003f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d135      	bne.n	8004036 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 0310 	bic.w	r3, r3, #16
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	623a      	str	r2, [r7, #32]
 8003ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	69f9      	ldr	r1, [r7, #28]
 8003ff6:	6a3a      	ldr	r2, [r7, #32]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b10      	cmp	r3, #16
 8004010:	d10a      	bne.n	8004028 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402c:	4619      	mov	r1, r3
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fe67 	bl	8003d02 <HAL_UARTEx_RxEventCallback>
 8004034:	e002      	b.n	800403c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fe51 	bl	8003cde <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e002      	b.n	8004046 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3730      	adds	r7, #48	; 0x30
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800408a:	f023 030c 	bic.w	r3, r3, #12
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	430b      	orrs	r3, r1
 8004096:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <UART_SetConfig+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d103      	bne.n	80040c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7fe fb8e 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	e002      	b.n	80040c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7fe fb76 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 80040c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009a      	lsls	r2, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040dc:	4a22      	ldr	r2, [pc, #136]	; (8004168 <UART_SetConfig+0x118>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	0119      	lsls	r1, r3, #4
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	009a      	lsls	r2, r3, #2
 80040f0:	441a      	add	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <UART_SetConfig+0x118>)
 80040fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2064      	movs	r0, #100	; 0x64
 8004106:	fb00 f303 	mul.w	r3, r0, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	3332      	adds	r3, #50	; 0x32
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <UART_SetConfig+0x118>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800411c:	4419      	add	r1, r3
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009a      	lsls	r2, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <UART_SetConfig+0x118>)
 8004136:	fba3 0302 	umull	r0, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2064      	movs	r0, #100	; 0x64
 800413e:	fb00 f303 	mul.w	r3, r0, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	3332      	adds	r3, #50	; 0x32
 8004148:	4a07      	ldr	r2, [pc, #28]	; (8004168 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	440a      	add	r2, r1
 800415a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40013800 	.word	0x40013800
 8004168:	51eb851f 	.word	0x51eb851f

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2600      	movs	r6, #0
 8004170:	4d0c      	ldr	r5, [pc, #48]	; (80041a4 <__libc_init_array+0x38>)
 8004172:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	f000 f822 	bl	80041c4 <_init>
 8004180:	2600      	movs	r6, #0
 8004182:	4d0a      	ldr	r5, [pc, #40]	; (80041ac <__libc_init_array+0x40>)
 8004184:	4c0a      	ldr	r4, [pc, #40]	; (80041b0 <__libc_init_array+0x44>)
 8004186:	1b64      	subs	r4, r4, r5
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	08004208 	.word	0x08004208
 80041a8:	08004208 	.word	0x08004208
 80041ac:	08004208 	.word	0x08004208
 80041b0:	0800420c 	.word	0x0800420c

080041b4 <memset>:
 80041b4:	4603      	mov	r3, r0
 80041b6:	4402      	add	r2, r0
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d100      	bne.n	80041be <memset+0xa>
 80041bc:	4770      	bx	lr
 80041be:	f803 1b01 	strb.w	r1, [r3], #1
 80041c2:	e7f9      	b.n	80041b8 <memset+0x4>

080041c4 <_init>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	bf00      	nop
 80041c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ca:	bc08      	pop	{r3}
 80041cc:	469e      	mov	lr, r3
 80041ce:	4770      	bx	lr

080041d0 <_fini>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr
