
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004410  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08004548  08004548  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004548  08004548  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200000a8  080045f8  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080045f8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147a3  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002916  00000000  00000000  00034874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00037190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00037f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195e6  00000000  00000000  00038bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114e2  00000000  00000000  000521ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aec0  00000000  00000000  00063690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  000ee5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004504 	.word	0x08004504

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004504 	.word	0x08004504

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <isButtonPressed+0x30>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d106      	bne.n	8000756 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <isButtonPressed+0x30>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2100      	movs	r1, #0
 800074e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000752:	2301      	movs	r3, #1
 8000754:	e000      	b.n	8000758 <isButtonPressed+0x24>
	}
	return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000c4 	.word	0x200000c4

08000768 <subKeyProcess>:

void subKeyProcess(int i){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <subKeyProcess+0x1c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2101      	movs	r1, #1
 8000776:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	200000c4 	.word	0x200000c4

08000788 <ReadPin>:

GPIO_PinState ReadPin(int index){
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d105      	bne.n	80007a2 <ReadPin+0x1a>
 8000796:	2102      	movs	r1, #2
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <ReadPin+0x5c>)
 800079a:	f001 fcb1 	bl	8002100 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	e01b      	b.n	80007da <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d105      	bne.n	80007b4 <ReadPin+0x2c>
 80007a8:	2110      	movs	r1, #16
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <ReadPin+0x5c>)
 80007ac:	f001 fca8 	bl	8002100 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	e012      	b.n	80007da <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d105      	bne.n	80007c6 <ReadPin+0x3e>
 80007ba:	2101      	movs	r1, #1
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <ReadPin+0x60>)
 80007be:	f001 fc9f 	bl	8002100 <HAL_GPIO_ReadPin>
 80007c2:	4603      	mov	r3, r0
 80007c4:	e009      	b.n	80007da <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d105      	bne.n	80007d8 <ReadPin+0x50>
 80007cc:	2101      	movs	r1, #1
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <ReadPin+0x5c>)
 80007d0:	f001 fc96 	bl	8002100 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	e000      	b.n	80007da <ReadPin+0x52>
	else return 0;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010800 	.word	0x40010800
 80007e8:	40010c00 	.word	0x40010c00

080007ec <getKeyinput>:

void getKeyinput(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	e05c      	b.n	80008b2 <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 80007f8:	4a32      	ldr	r2, [pc, #200]	; (80008c4 <getKeyinput+0xd8>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000800:	4931      	ldr	r1, [pc, #196]	; (80008c8 <getKeyinput+0xdc>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000808:	4a30      	ldr	r2, [pc, #192]	; (80008cc <getKeyinput+0xe0>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000810:	492c      	ldr	r1, [pc, #176]	; (80008c4 <getKeyinput+0xd8>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ffb5 	bl	8000788 <ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	4619      	mov	r1, r3
 8000822:	4a2a      	ldr	r2, [pc, #168]	; (80008cc <getKeyinput+0xe0>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800082a:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <getKeyinput+0xdc>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000832:	4924      	ldr	r1, [pc, #144]	; (80008c4 <getKeyinput+0xd8>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800083a:	429a      	cmp	r2, r3
 800083c:	d136      	bne.n	80008ac <getKeyinput+0xc0>
 800083e:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <getKeyinput+0xd8>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000846:	4921      	ldr	r1, [pc, #132]	; (80008cc <getKeyinput+0xe0>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084e:	429a      	cmp	r2, r3
 8000850:	d12c      	bne.n	80008ac <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <getKeyinput+0xe4>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085a:	491c      	ldr	r1, [pc, #112]	; (80008cc <getKeyinput+0xe0>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000862:	429a      	cmp	r2, r3
 8000864:	d014      	beq.n	8000890 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 8000866:	4a19      	ldr	r2, [pc, #100]	; (80008cc <getKeyinput+0xe0>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800086e:	4918      	ldr	r1, [pc, #96]	; (80008d0 <getKeyinput+0xe4>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <getKeyinput+0xe4>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d114      	bne.n	80008ac <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <getKeyinput+0xe8>)
 8000884:	22c8      	movs	r2, #200	; 0xc8
 8000886:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff6d 	bl	8000768 <subKeyProcess>
 800088e:	e00d      	b.n	80008ac <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <getKeyinput+0xe8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3b01      	subs	r3, #1
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <getKeyinput+0xe8>)
 8000898:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <getKeyinput+0xe8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d104      	bne.n	80008ac <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <getKeyinput+0xe4>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2101      	movs	r1, #1
 80008a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	dd9f      	ble.n	80007f8 <getKeyinput+0xc>
				}
			}
		}
	}

}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000010 	.word	0x20000010
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000020 	.word	0x20000020
 80008d0:	20000030 	.word	0x20000030
 80008d4:	20000040 	.word	0x20000040

080008d8 <get_buzzer_counter>:
extern TIM_HandleTypeDef htim3;  // External declaration
int buzzer_counter;
int state_buzzer = 2;
float scale_buzzer=0;
float cycle;
void get_buzzer_counter(){	// for take the value of the red time
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	buzzer_counter = red_time;
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <get_buzzer_counter+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <get_buzzer_counter+0x18>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	2000004c 	.word	0x2000004c
 80008f0:	20000114 	.word	0x20000114

080008f4 <cal_cycle>:
void cal_cycle() {
 80008f4:	b598      	push	{r3, r4, r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    //cycle = ((float)buzzer_counter / red_time) * 100.0f;	// the speaker decreases volume every 1s
    cycle = ((float)buzzer_counter / red_time) * 100.0f - scale_buzzer;// the speaker decreases volume every 100ms
 80008f8:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <cal_cycle+0xbc>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fcdf 	bl	80002c0 <__aeabi_i2f>
 8000902:	4604      	mov	r4, r0
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <cal_cycle+0xc0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fcd9 	bl	80002c0 <__aeabi_i2f>
 800090e:	4603      	mov	r3, r0
 8000910:	4619      	mov	r1, r3
 8000912:	4620      	mov	r0, r4
 8000914:	f7ff fddc 	bl	80004d0 <__aeabi_fdiv>
 8000918:	4603      	mov	r3, r0
 800091a:	4927      	ldr	r1, [pc, #156]	; (80009b8 <cal_cycle+0xc4>)
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fd23 	bl	8000368 <__aeabi_fmul>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <cal_cycle+0xc8>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4619      	mov	r1, r3
 800092c:	4610      	mov	r0, r2
 800092e:	f7ff fc11 	bl	8000154 <__aeabi_fsub>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <cal_cycle+0xcc>)
 8000938:	601a      	str	r2, [r3, #0]
    scale_buzzer += (float) (1 / (red_time))*100/10;
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <cal_cycle+0xc0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2201      	movs	r2, #1
 8000940:	fb92 f3f3 	sdiv	r3, r2, r3
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fcbb 	bl	80002c0 <__aeabi_i2f>
 800094a:	4603      	mov	r3, r0
 800094c:	491a      	ldr	r1, [pc, #104]	; (80009b8 <cal_cycle+0xc4>)
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fd0a 	bl	8000368 <__aeabi_fmul>
 8000954:	4603      	mov	r3, r0
 8000956:	491b      	ldr	r1, [pc, #108]	; (80009c4 <cal_cycle+0xd0>)
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fdb9 	bl	80004d0 <__aeabi_fdiv>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <cal_cycle+0xc8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	4610      	mov	r0, r2
 800096a:	f7ff fbf5 	bl	8000158 <__addsf3>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <cal_cycle+0xc8>)
 8000974:	601a      	str	r2, [r3, #0]
    if (scale_buzzer >= (1 / (red_time))*100) {
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <cal_cycle+0xc0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2201      	movs	r2, #1
 800097c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000980:	2264      	movs	r2, #100	; 0x64
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fc9a 	bl	80002c0 <__aeabi_i2f>
 800098c:	4602      	mov	r2, r0
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <cal_cycle+0xc8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4619      	mov	r1, r3
 8000994:	4610      	mov	r0, r2
 8000996:	f7ff fe8f 	bl	80006b8 <__aeabi_fcmple>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d100      	bne.n	80009a2 <cal_cycle+0xae>
        scale_buzzer = 0;
    }
}
 80009a0:	e003      	b.n	80009aa <cal_cycle+0xb6>
        scale_buzzer = 0;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <cal_cycle+0xc8>)
 80009a4:	f04f 0200 	mov.w	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	bd98      	pop	{r3, r4, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000114 	.word	0x20000114
 80009b4:	2000004c 	.word	0x2000004c
 80009b8:	42c80000 	.word	0x42c80000
 80009bc:	200000d4 	.word	0x200000d4
 80009c0:	20000110 	.word	0x20000110
 80009c4:	41200000 	.word	0x41200000

080009c8 <buzzer>:

void buzzer(){
 80009c8:	b598      	push	{r3, r4, r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	switch(state_buzzer){
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <buzzer+0x90>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d002      	beq.n	80009da <buzzer+0x12>
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d036      	beq.n	8000a46 <buzzer+0x7e>
	}
	break;
	case OFF:
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
		break;
	default: break;
 80009d8:	e03b      	b.n	8000a52 <buzzer+0x8a>
	if (timer_flag[6] == 1){// just for decrease the counter, like the red time
 80009da:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <buzzer+0x94>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d111      	bne.n	8000a06 <buzzer+0x3e>
		if (buzzer_counter>=0)
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <buzzer+0x98>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db04      	blt.n	80009f4 <buzzer+0x2c>
		{HAL_GPIO_TogglePin(TEST_GPIO_Port,TEST_Pin);}
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	481d      	ldr	r0, [pc, #116]	; (8000a64 <buzzer+0x9c>)
 80009f0:	f001 fbb5 	bl	800215e <HAL_GPIO_TogglePin>
		buzzer_counter--;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <buzzer+0x98>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <buzzer+0x98>)
 80009fc:	6013      	str	r3, [r2, #0]
		setTimer(100, 6);
 80009fe:	2106      	movs	r1, #6
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f000 fe27 	bl	8001654 <setTimer>
	if (timer_flag[7] == 1){// for update the PWM more detail
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <buzzer+0x94>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d114      	bne.n	8000a38 <buzzer+0x70>
		cal_cycle ();
 8000a0e:	f7ff ff71 	bl	80008f4 <cal_cycle>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,100- cycle);
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <buzzer+0xa0>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	4814      	ldr	r0, [pc, #80]	; (8000a6c <buzzer+0xa4>)
 8000a1a:	f7ff fb9b 	bl	8000154 <__aeabi_fsub>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <buzzer+0xa8>)
 8000a24:	681c      	ldr	r4, [r3, #0]
 8000a26:	4610      	mov	r0, r2
 8000a28:	f7ff fe64 	bl	80006f4 <__aeabi_f2uiz>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	6363      	str	r3, [r4, #52]	; 0x34
		setTimer(10, 7);// because we want to update the speaker every 100ms, so we set 10
 8000a30:	2107      	movs	r1, #7
 8000a32:	200a      	movs	r0, #10
 8000a34:	f000 fe0e 	bl	8001654 <setTimer>
	if (buzzer_counter==0){
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <buzzer+0x98>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d107      	bne.n	8000a50 <buzzer+0x88>
		get_buzzer_counter();
 8000a40:	f7ff ff4a 	bl	80008d8 <get_buzzer_counter>
	break;
 8000a44:	e004      	b.n	8000a50 <buzzer+0x88>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <buzzer+0xa8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000a4e:	e000      	b.n	8000a52 <buzzer+0x8a>
	break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	bd98      	pop	{r3, r4, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000044 	.word	0x20000044
 8000a5c:	20000074 	.word	0x20000074
 8000a60:	20000114 	.word	0x20000114
 8000a64:	40011000 	.word	0x40011000
 8000a68:	20000110 	.word	0x20000110
 8000a6c:	42c80000 	.word	0x42c80000
 8000a70:	20000124 	.word	0x20000124

08000a74 <fsm_auto>:
int green_time = 3;
int red_time_cd = 0 ; // temp variable for red time length
int yellow_time_cd= 0 ;
int green_time_cd = 0 ;

void fsm_auto(){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	switch (status){
 8000a78:	4b57      	ldr	r3, [pc, #348]	; (8000bd8 <fsm_auto+0x164>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3b5a      	subs	r3, #90	; 0x5a
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	f200 809e 	bhi.w	8000bc0 <fsm_auto+0x14c>
 8000a84:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <fsm_auto+0x18>)
 8000a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8a:	bf00      	nop
 8000a8c:	08000aa1 	.word	0x08000aa1
 8000a90:	08000ac1 	.word	0x08000ac1
 8000a94:	08000afd 	.word	0x08000afd
 8000a98:	08000b41 	.word	0x08000b41
 8000a9c:	08000b7d 	.word	0x08000b7d
	case INIT:
		red_time_cd = red_time; // time length = 5s, start at 4 and end at 0
 8000aa0:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <fsm_auto+0x168>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a4e      	ldr	r2, [pc, #312]	; (8000be0 <fsm_auto+0x16c>)
 8000aa6:	6013      	str	r3, [r2, #0]
		green_time_cd = green_time;
 8000aa8:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <fsm_auto+0x170>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a4e      	ldr	r2, [pc, #312]	; (8000be8 <fsm_auto+0x174>)
 8000aae:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2064      	movs	r0, #100	; 0x64
 8000ab4:	f000 fdce 	bl	8001654 <setTimer>
		status = AUTO_RED_GREEN;
 8000ab8:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <fsm_auto+0x164>)
 8000aba:	225b      	movs	r2, #91	; 0x5b
 8000abc:	601a      	str	r2, [r3, #0]
		break;
 8000abe:	e088      	b.n	8000bd2 <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 8000ac0:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <fsm_auto+0x178>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d17d      	bne.n	8000bc4 <fsm_auto+0x150>
			red_time_cd --;
 8000ac8:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <fsm_auto+0x16c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	4a44      	ldr	r2, [pc, #272]	; (8000be0 <fsm_auto+0x16c>)
 8000ad0:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000ad2:	4b45      	ldr	r3, [pc, #276]	; (8000be8 <fsm_auto+0x174>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	4a43      	ldr	r2, [pc, #268]	; (8000be8 <fsm_auto+0x174>)
 8000ada:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000adc:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <fsm_auto+0x174>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d106      	bne.n	8000af2 <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <fsm_auto+0x164>)
 8000ae6:	225c      	movs	r2, #92	; 0x5c
 8000ae8:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000aea:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <fsm_auto+0x17c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <fsm_auto+0x180>)
 8000af0:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000af2:	2100      	movs	r1, #0
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 fdad 	bl	8001654 <setTimer>
		}
		break;
 8000afa:	e063      	b.n	8000bc4 <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 8000afc:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <fsm_auto+0x178>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d161      	bne.n	8000bc8 <fsm_auto+0x154>
			red_time_cd --;
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <fsm_auto+0x16c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	4a35      	ldr	r2, [pc, #212]	; (8000be0 <fsm_auto+0x16c>)
 8000b0c:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000b0e:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <fsm_auto+0x180>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	4a37      	ldr	r2, [pc, #220]	; (8000bf4 <fsm_auto+0x180>)
 8000b16:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <fsm_auto+0x180>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10a      	bne.n	8000b36 <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <fsm_auto+0x164>)
 8000b22:	225d      	movs	r2, #93	; 0x5d
 8000b24:	601a      	str	r2, [r3, #0]
				red_time_cd = red_time;
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <fsm_auto+0x168>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a2d      	ldr	r2, [pc, #180]	; (8000be0 <fsm_auto+0x16c>)
 8000b2c:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <fsm_auto+0x170>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <fsm_auto+0x174>)
 8000b34:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000b36:	2100      	movs	r1, #0
 8000b38:	2064      	movs	r0, #100	; 0x64
 8000b3a:	f000 fd8b 	bl	8001654 <setTimer>
		}
		break;
 8000b3e:	e043      	b.n	8000bc8 <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000b40:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <fsm_auto+0x178>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d141      	bne.n	8000bcc <fsm_auto+0x158>
			red_time_cd --;
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <fsm_auto+0x16c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <fsm_auto+0x16c>)
 8000b50:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <fsm_auto+0x174>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <fsm_auto+0x174>)
 8000b5a:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <fsm_auto+0x174>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d106      	bne.n	8000b72 <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <fsm_auto+0x164>)
 8000b66:	225e      	movs	r2, #94	; 0x5e
 8000b68:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <fsm_auto+0x17c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <fsm_auto+0x180>)
 8000b70:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2064      	movs	r0, #100	; 0x64
 8000b76:	f000 fd6d 	bl	8001654 <setTimer>
		}
		break;
 8000b7a:	e027      	b.n	8000bcc <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <fsm_auto+0x178>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d125      	bne.n	8000bd0 <fsm_auto+0x15c>
			red_time_cd --;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <fsm_auto+0x16c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <fsm_auto+0x16c>)
 8000b8c:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <fsm_auto+0x180>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <fsm_auto+0x180>)
 8000b96:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <fsm_auto+0x180>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10a      	bne.n	8000bb6 <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <fsm_auto+0x164>)
 8000ba2:	225b      	movs	r2, #91	; 0x5b
 8000ba4:	601a      	str	r2, [r3, #0]
				red_time_cd  = red_time;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <fsm_auto+0x168>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <fsm_auto+0x16c>)
 8000bac:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <fsm_auto+0x170>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <fsm_auto+0x174>)
 8000bb4:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f000 fd4b 	bl	8001654 <setTimer>
		}
		break;
 8000bbe:	e007      	b.n	8000bd0 <fsm_auto+0x15c>
	default: break;
 8000bc0:	bf00      	nop
 8000bc2:	e006      	b.n	8000bd2 <fsm_auto+0x15e>
		break;
 8000bc4:	bf00      	nop
 8000bc6:	e004      	b.n	8000bd2 <fsm_auto+0x15e>
		break;
 8000bc8:	bf00      	nop
 8000bca:	e002      	b.n	8000bd2 <fsm_auto+0x15e>
		break;
 8000bcc:	bf00      	nop
 8000bce:	e000      	b.n	8000bd2 <fsm_auto+0x15e>
		break;
 8000bd0:	bf00      	nop
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000048 	.word	0x20000048
 8000bdc:	2000004c 	.word	0x2000004c
 8000be0:	200000d8 	.word	0x200000d8
 8000be4:	20000054 	.word	0x20000054
 8000be8:	200000e0 	.word	0x200000e0
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	20000050 	.word	0x20000050
 8000bf4:	200000dc 	.word	0x200000dc

08000bf8 <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp, yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <turnbackINIT+0x50>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dd07      	ble.n	8000c14 <turnbackINIT+0x1c>
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <turnbackINIT+0x54>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd03      	ble.n	8000c14 <turnbackINIT+0x1c>
			green_time < 1){
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <turnbackINIT+0x58>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dc08      	bgt.n	8000c26 <turnbackINIT+0x2e>
		red_time = 5;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <turnbackINIT+0x50>)
 8000c16:	2205      	movs	r2, #5
 8000c18:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <turnbackINIT+0x54>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	601a      	str	r2, [r3, #0]
		green_time = 3;
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <turnbackINIT+0x58>)
 8000c22:	2203      	movs	r2, #3
 8000c24:	601a      	str	r2, [r3, #0]
	}
	setTimer(0, 3); // turn off timer_flag for scan led
 8000c26:	2103      	movs	r1, #3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fd13 	bl	8001654 <setTimer>
	red_time = green_time + yellow_time;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <turnbackINIT+0x58>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <turnbackINIT+0x54>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <turnbackINIT+0x50>)
 8000c3a:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <turnbackINIT+0x5c>)
 8000c3e:	225a      	movs	r2, #90	; 0x5a
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000004c 	.word	0x2000004c
 8000c4c:	20000050 	.word	0x20000050
 8000c50:	20000054 	.word	0x20000054
 8000c54:	20000048 	.word	0x20000048

08000c58 <checkButton1>:
void checkButton1(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff fd69 	bl	8000734 <isButtonPressed>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d11e      	bne.n	8000ca6 <checkButton1+0x4e>
		//reset set timer

		if (status == MANUAL_RED) {
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <checkButton1+0x54>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b14      	cmp	r3, #20
 8000c6e:	d103      	bne.n	8000c78 <checkButton1+0x20>
			status = MANUAL_YELLOW;
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <checkButton1+0x54>)
 8000c72:	2215      	movs	r2, #21
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e011      	b.n	8000c9c <checkButton1+0x44>
		}
		else if (status == MANUAL_YELLOW) {
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <checkButton1+0x54>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b15      	cmp	r3, #21
 8000c7e:	d103      	bne.n	8000c88 <checkButton1+0x30>
			status = MANUAL_GREEN;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <checkButton1+0x54>)
 8000c82:	2216      	movs	r2, #22
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e009      	b.n	8000c9c <checkButton1+0x44>
		}
		else if (status == MANUAL_GREEN) {
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <checkButton1+0x54>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b16      	cmp	r3, #22
 8000c8e:	d102      	bne.n	8000c96 <checkButton1+0x3e>
			turnbackINIT();
 8000c90:	f7ff ffb2 	bl	8000bf8 <turnbackINIT>
 8000c94:	e002      	b.n	8000c9c <checkButton1+0x44>
		}
		else {
			status = MANUAL_INIT; //auto state -> manual state
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <checkButton1+0x54>)
 8000c98:	2217      	movs	r2, #23
 8000c9a:	601a      	str	r2, [r3, #0]
		}
		setTimer(10000, 2);// after 10 sec don't press button1 -> turn back to auto mode
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ca2:	f000 fcd7 	bl	8001654 <setTimer>
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000048 	.word	0x20000048

08000cb0 <checkButton2>:

void checkButton2(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fd3d 	bl	8000734 <isButtonPressed>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d126      	bne.n	8000d0e <checkButton2+0x5e>
		if (status == MANUAL_RED){
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <checkButton2+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b14      	cmp	r3, #20
 8000cc6:	d108      	bne.n	8000cda <checkButton2+0x2a>
			if (red_time_tmp < 99) red_time_tmp++;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <checkButton2+0x68>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b62      	cmp	r3, #98	; 0x62
 8000cce:	dc04      	bgt.n	8000cda <checkButton2+0x2a>
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <checkButton2+0x68>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <checkButton2+0x68>)
 8000cd8:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_YELLOW){
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <checkButton2+0x64>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b15      	cmp	r3, #21
 8000ce0:	d108      	bne.n	8000cf4 <checkButton2+0x44>
			if (yellow_time_tmp < 99) yellow_time_tmp++;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <checkButton2+0x6c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b62      	cmp	r3, #98	; 0x62
 8000ce8:	dc04      	bgt.n	8000cf4 <checkButton2+0x44>
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <checkButton2+0x6c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <checkButton2+0x6c>)
 8000cf2:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_GREEN){
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <checkButton2+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b16      	cmp	r3, #22
 8000cfa:	d108      	bne.n	8000d0e <checkButton2+0x5e>
			if (green_time_tmp < 99) green_time_tmp++;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <checkButton2+0x70>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b62      	cmp	r3, #98	; 0x62
 8000d02:	dc04      	bgt.n	8000d0e <checkButton2+0x5e>
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <checkButton2+0x70>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <checkButton2+0x70>)
 8000d0c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000048 	.word	0x20000048
 8000d18:	20000120 	.word	0x20000120
 8000d1c:	20000118 	.word	0x20000118
 8000d20:	2000011c 	.word	0x2000011c

08000d24 <checkButton3>:
void checkButton3(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f7ff fd03 	bl	8000734 <isButtonPressed>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d119      	bne.n	8000d68 <checkButton3+0x44>
		if (status == MANUAL_RED){
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <checkButton3+0x48>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b14      	cmp	r3, #20
 8000d3a:	d104      	bne.n	8000d46 <checkButton3+0x22>
			red_time = red_time_tmp;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <checkButton3+0x4c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0c      	ldr	r2, [pc, #48]	; (8000d74 <checkButton3+0x50>)
 8000d42:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 8000d44:	e010      	b.n	8000d68 <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <checkButton3+0x48>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b15      	cmp	r3, #21
 8000d4c:	d104      	bne.n	8000d58 <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <checkButton3+0x54>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <checkButton3+0x58>)
 8000d54:	6013      	str	r3, [r2, #0]
}
 8000d56:	e007      	b.n	8000d68 <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <checkButton3+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b16      	cmp	r3, #22
 8000d5e:	d103      	bne.n	8000d68 <checkButton3+0x44>
			green_time = green_time_tmp;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <checkButton3+0x5c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <checkButton3+0x60>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000048 	.word	0x20000048
 8000d70:	20000120 	.word	0x20000120
 8000d74:	2000004c 	.word	0x2000004c
 8000d78:	20000118 	.word	0x20000118
 8000d7c:	20000050 	.word	0x20000050
 8000d80:	2000011c 	.word	0x2000011c
 8000d84:	20000054 	.word	0x20000054

08000d88 <fsm_manual>:


void fsm_manual(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	checkButton1();
 8000d8c:	f7ff ff64 	bl	8000c58 <checkButton1>
	switch (status){
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <fsm_manual+0x94>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3b14      	subs	r3, #20
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d83c      	bhi.n	8000e14 <fsm_manual+0x8c>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <fsm_manual+0x18>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000dd3 	.word	0x08000dd3
 8000da4:	08000de9 	.word	0x08000de9
 8000da8:	08000dff 	.word	0x08000dff
 8000dac:	08000db1 	.word	0x08000db1
	case MANUAL_INIT:
		red_time_tmp = 0;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <fsm_manual+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
		yellow_time_tmp = 0;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <fsm_manual+0x9c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <fsm_manual+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <fsm_manual+0x94>)
 8000dc4:	2214      	movs	r2, #20
 8000dc6:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 8000dc8:	2103      	movs	r1, #3
 8000dca:	2032      	movs	r0, #50	; 0x32
 8000dcc:	f000 fc42 	bl	8001654 <setTimer>
		break;
 8000dd0:	e021      	b.n	8000e16 <fsm_manual+0x8e>
	case MANUAL_RED:
		if (timer_flag [2] == 1) {
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <fsm_manual+0xa4>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <fsm_manual+0x56>
			turnbackINIT();
 8000dda:	f7ff ff0d 	bl	8000bf8 <turnbackINIT>
		}
		checkButton2();
 8000dde:	f7ff ff67 	bl	8000cb0 <checkButton2>
		checkButton3();
 8000de2:	f7ff ff9f 	bl	8000d24 <checkButton3>
		break;
 8000de6:	e016      	b.n	8000e16 <fsm_manual+0x8e>
	case MANUAL_YELLOW:
		if (timer_flag [2] == 1){
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <fsm_manual+0xa4>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d101      	bne.n	8000df4 <fsm_manual+0x6c>
			turnbackINIT();
 8000df0:	f7ff ff02 	bl	8000bf8 <turnbackINIT>
		}
		checkButton2();
 8000df4:	f7ff ff5c 	bl	8000cb0 <checkButton2>
		checkButton3();
 8000df8:	f7ff ff94 	bl	8000d24 <checkButton3>
		break;
 8000dfc:	e00b      	b.n	8000e16 <fsm_manual+0x8e>
	case MANUAL_GREEN:
		if (timer_flag [2] == 1){
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <fsm_manual+0xa4>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <fsm_manual+0x82>
			turnbackINIT();
 8000e06:	f7ff fef7 	bl	8000bf8 <turnbackINIT>
		}
		checkButton2();
 8000e0a:	f7ff ff51 	bl	8000cb0 <checkButton2>
		checkButton3();
 8000e0e:	f7ff ff89 	bl	8000d24 <checkButton3>
		break;
 8000e12:	e000      	b.n	8000e16 <fsm_manual+0x8e>
	default: break;
 8000e14:	bf00      	nop
	}




}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000048 	.word	0x20000048
 8000e20:	20000120 	.word	0x20000120
 8000e24:	20000118 	.word	0x20000118
 8000e28:	2000011c 	.word	0x2000011c
 8000e2c:	20000074 	.word	0x20000074

08000e30 <fsm_pedestrian_light>:
 */

#include "fsm_pedestrian_light.h"
#include "buzzer.h"

void fsm_pedestrian_light(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	if(isButtonPressed(3)){
 8000e34:	2003      	movs	r0, #3
 8000e36:	f7ff fc7d 	bl	8000734 <isButtonPressed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d004      	beq.n	8000e4a <fsm_pedestrian_light+0x1a>
		setTimer(1500,4);
 8000e40:	2104      	movs	r1, #4
 8000e42:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e46:	f000 fc05 	bl	8001654 <setTimer>
//		case MANUAL_GREEN:
//			state_buzzer =OFF;
//			break;
//		default: break;
//	}
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <test_print_1>:
/**
  * @brief  The application entry point.
  * @retval int
  */
char tx_buffer_1[27] = "Hello\n\r";
void test_print_1(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_UART_Transmit (&huart2 , (uint8_t *) tx_buffer_1, 27, 10);
 8000e54:	230a      	movs	r3, #10
 8000e56:	221b      	movs	r2, #27
 8000e58:	4902      	ldr	r1, [pc, #8]	; (8000e64 <test_print_1+0x14>)
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <test_print_1+0x18>)
 8000e5c:	f002 fd5c 	bl	8003918 <HAL_UART_Transmit>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000058 	.word	0x20000058
 8000e68:	200001b4 	.word	0x200001b4

08000e6c <main>:
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fda0 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f824 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 f94a 	bl	8001110 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e7c:	f000 f85c 	bl	8000f38 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000e80:	f000 f91c 	bl	80010bc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e84:	f000 f8a4 	bl	8000fd0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <main+0x4c>)
 8000e8a:	f001 fddf 	bl	8002a4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	480a      	ldr	r0, [pc, #40]	; (8000ebc <main+0x50>)
 8000e92:	f001 fe85 	bl	8002ba0 <HAL_TIM_PWM_Start>
  setTimer(10, 7);// for the PWM detail
 8000e96:	2107      	movs	r1, #7
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f000 fbdb 	bl	8001654 <setTimer>
  setTimer(10, 6);// for the buzzer counter
 8000e9e:	2106      	movs	r1, #6
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fbd7 	bl	8001654 <setTimer>
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_auto();
 8000ea6:	f7ff fde5 	bl	8000a74 <fsm_auto>
	  fsm_manual();
 8000eaa:	f7ff ff6d 	bl	8000d88 <fsm_manual>
	  fsm_pedestrian_light();
 8000eae:	f7ff ffbf 	bl	8000e30 <fsm_pedestrian_light>
	  buzzer();
 8000eb2:	f7ff fd89 	bl	80009c8 <buzzer>
	  fsm_auto();
 8000eb6:	e7f6      	b.n	8000ea6 <main+0x3a>
 8000eb8:	2000016c 	.word	0x2000016c
 8000ebc:	20000124 	.word	0x20000124

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b090      	sub	sp, #64	; 0x40
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2228      	movs	r2, #40	; 0x28
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fb10 	bl	80044f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2310      	movs	r3, #16
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 f94a 	bl	8002190 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f02:	f000 f9b0 	bl	8001266 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fbb6 	bl	8002690 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f2a:	f000 f99c 	bl	8001266 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3740      	adds	r7, #64	; 0x40
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f7e:	f001 fd15 	bl	80029ac <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f88:	f000 f96d 	bl	8001266 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000f9a:	f002 f86d 	bl	8003078 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fa4:	f000 f95f 	bl	8001266 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_TIM2_Init+0x94>)
 8000fb6:	f002 fbef 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fc0:	f000 f951 	bl	8001266 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000016c 	.word	0x2000016c

08000fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001002:	4a2d      	ldr	r2, [pc, #180]	; (80010b8 <MX_TIM3_Init+0xe8>)
 8001004:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001008:	224f      	movs	r2, #79	; 0x4f
 800100a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_TIM3_Init+0xe4>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001014:	2263      	movs	r2, #99	; 0x63
 8001016:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_TIM3_Init+0xe4>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001026:	f001 fcc1 	bl	80029ac <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001030:	f000 f919 	bl	8001266 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103e:	4619      	mov	r1, r3
 8001040:	481c      	ldr	r0, [pc, #112]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001042:	f002 f819 	bl	8003078 <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800104c:	f000 f90b 	bl	8001266 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001050:	4818      	ldr	r0, [pc, #96]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001052:	f001 fd4d 	bl	8002af0 <HAL_TIM_PWM_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800105c:	f000 f903 	bl	8001266 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001070:	f002 fb92 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800107a:	f000 f8f4 	bl	8001266 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107e:	2360      	movs	r3, #96	; 0x60
 8001080:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <MX_TIM3_Init+0xe4>)
 8001096:	f001 ff2d 	bl	8002ef4 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80010a0:	f000 f8e1 	bl	8001266 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <MX_TIM3_Init+0xe4>)
 80010a6:	f000 fb8f 	bl	80017c8 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3738      	adds	r7, #56	; 0x38
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000124 	.word	0x20000124
 80010b8:	40000400 	.word	0x40000400

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART2_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f002 fbc0 	bl	8003878 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f8b2 	bl	8001266 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200001b4 	.word	0x200001b4
 800110c:	40004400 	.word	0x40004400

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <MX_GPIO_Init+0x114>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a3e      	ldr	r2, [pc, #248]	; (8001224 <MX_GPIO_Init+0x114>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <MX_GPIO_Init+0x114>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b39      	ldr	r3, [pc, #228]	; (8001224 <MX_GPIO_Init+0x114>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a38      	ldr	r2, [pc, #224]	; (8001224 <MX_GPIO_Init+0x114>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <MX_GPIO_Init+0x114>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <MX_GPIO_Init+0x114>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a32      	ldr	r2, [pc, #200]	; (8001224 <MX_GPIO_Init+0x114>)
 800115a:	f043 0310 	orr.w	r3, r3, #16
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_GPIO_Init+0x114>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <MX_GPIO_Init+0x118>)
 8001174:	f000 ffdb 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117e:	482b      	ldr	r0, [pc, #172]	; (800122c <MX_GPIO_Init+0x11c>)
 8001180:	f000 ffd5 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800118a:	4829      	ldr	r0, [pc, #164]	; (8001230 <MX_GPIO_Init+0x120>)
 800118c:	f000 ffcf 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8001190:	2313      	movs	r3, #19
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001198:	2301      	movs	r3, #1
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <MX_GPIO_Init+0x120>)
 80011a4:	f000 fe28 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 80011a8:	2301      	movs	r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	481b      	ldr	r0, [pc, #108]	; (8001228 <MX_GPIO_Init+0x118>)
 80011bc:	f000 fe1c 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 80011c0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	4813      	ldr	r0, [pc, #76]	; (8001228 <MX_GPIO_Init+0x118>)
 80011da:	f000 fe0d 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 80011de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_GPIO_Init+0x11c>)
 80011f8:	f000 fdfe 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 80011fc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_GPIO_Init+0x120>)
 8001216:	f000 fdef 	bl	8001df8 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40011000 	.word	0x40011000
 8001230:	40010800 	.word	0x40010800

08001234 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
 800123c:	f000 f93e 	bl	80014bc <scanLed>
	timerRun(); // software timer
 8001240:	f000 fa20 	bl	8001684 <timerRun>
	getKeyinput(); // button
 8001244:	f7ff fad2 	bl	80007ec <getKeyinput>
	  test_print_1();
 8001248:	f7ff fe02 	bl	8000e50 <test_print_1>
//	SCH_Update();
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126a:	b672      	cpsid	i
}
 800126c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126e:	e7fe      	b.n	800126e <Error_Handler+0x8>

08001270 <turnoffAll>:

#include "scanLed.h"

int enable_change = 0;
//lenh bat tat den cho nhanh
void turnoffAll(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127a:	4810      	ldr	r0, [pc, #64]	; (80012bc <turnoffAll+0x4c>)
 800127c:	f000 ff57 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2108      	movs	r1, #8
 8001284:	480e      	ldr	r0, [pc, #56]	; (80012c0 <turnoffAll+0x50>)
 8001286:	f000 ff52 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2120      	movs	r1, #32
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <turnoffAll+0x50>)
 8001290:	f000 ff4d 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2110      	movs	r1, #16
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <turnoffAll+0x50>)
 800129a:	f000 ff48 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a4:	4806      	ldr	r0, [pc, #24]	; (80012c0 <turnoffAll+0x50>)
 80012a6:	f000 ff42 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <turnoffAll+0x4c>)
 80012b2:	f000 ff3c 	bl	800212e <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00

080012c4 <onRed_1>:
void onRed_1(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <onRed_1+0x20>)
 80012d0:	f000 ff2d 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2108      	movs	r1, #8
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <onRed_1+0x24>)
 80012da:	f000 ff28 	bl	800212e <HAL_GPIO_WritePin>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00

080012ec <onYellow_1>:
void onYellow_1(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <onYellow_1+0x20>)
 80012f8:	f000 ff19 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	2108      	movs	r1, #8
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <onYellow_1+0x24>)
 8001302:	f000 ff14 	bl	800212e <HAL_GPIO_WritePin>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00

08001314 <onGreen_1>:
void onGreen_1(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <onGreen_1+0x20>)
 8001320:	f000 ff05 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2108      	movs	r1, #8
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <onGreen_1+0x24>)
 800132a:	f000 ff00 	bl	800212e <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00

0800133c <onRed_2>:
void onRed_2(){
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2120      	movs	r1, #32
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <onRed_2+0x1c>)
 8001346:	f000 fef2 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2110      	movs	r1, #16
 800134e:	4802      	ldr	r0, [pc, #8]	; (8001358 <onRed_2+0x1c>)
 8001350:	f000 feed 	bl	800212e <HAL_GPIO_WritePin>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40010c00 	.word	0x40010c00

0800135c <onYellow_2>:
void onYellow_2(){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2120      	movs	r1, #32
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <onYellow_2+0x1c>)
 8001366:	f000 fee2 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 800136a:	2201      	movs	r2, #1
 800136c:	2110      	movs	r1, #16
 800136e:	4802      	ldr	r0, [pc, #8]	; (8001378 <onYellow_2+0x1c>)
 8001370:	f000 fedd 	bl	800212e <HAL_GPIO_WritePin>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40010c00 	.word	0x40010c00

0800137c <onGreen_2>:
void onGreen_2(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2120      	movs	r1, #32
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <onGreen_2+0x1c>)
 8001386:	f000 fed2 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2110      	movs	r1, #16
 800138e:	4802      	ldr	r0, [pc, #8]	; (8001398 <onGreen_2+0x1c>)
 8001390:	f000 fecd 	bl	800212e <HAL_GPIO_WritePin>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010c00 	.word	0x40010c00

0800139c <offPed>:
void offPed(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <offPed+0x20>)
 80013a8:	f000 fec1 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <offPed+0x24>)
 80013b4:	f000 febb 	bl	800212e <HAL_GPIO_WritePin>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40010c00 	.word	0x40010c00
 80013c0:	40010800 	.word	0x40010800

080013c4 <onGreenPed>:

void onGreenPed(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <onGreenPed+0x20>)
 80013d0:	f000 fead 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013da:	4803      	ldr	r0, [pc, #12]	; (80013e8 <onGreenPed+0x24>)
 80013dc:	f000 fea7 	bl	800212e <HAL_GPIO_WritePin>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	40010800 	.word	0x40010800

080013ec <onRedPed>:
void onRedPed(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <onRedPed+0x20>)
 80013f8:	f000 fe99 	bl	800212e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <onRedPed+0x24>)
 8001404:	f000 fe93 	bl	800212e <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40010800 	.word	0x40010800

08001414 <onRed_Toggle>:
void onRed_Toggle(){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <onRed_Toggle+0x34>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <onRed_Toggle+0x1c>
		onRed_1();
 8001420:	f7ff ff50 	bl	80012c4 <onRed_1>
		onRed_2();
 8001424:	f7ff ff8a 	bl	800133c <onRed_2>
		enable_change = 1;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <onRed_Toggle+0x34>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 800142e:	e008      	b.n	8001442 <onRed_Toggle+0x2e>
	else if (enable_change == 1){
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <onRed_Toggle+0x34>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d104      	bne.n	8001442 <onRed_Toggle+0x2e>
		turnoffAll();
 8001438:	f7ff ff1a 	bl	8001270 <turnoffAll>
		enable_change = 0;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <onRed_Toggle+0x34>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200000e4 	.word	0x200000e4

0800144c <onGreen_Toggle>:
void onGreen_Toggle(){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <onGreen_Toggle+0x34>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d107      	bne.n	8001468 <onGreen_Toggle+0x1c>
		onGreen_1();
 8001458:	f7ff ff5c 	bl	8001314 <onGreen_1>
		onGreen_2();
 800145c:	f7ff ff8e 	bl	800137c <onGreen_2>
		enable_change = 1;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <onGreen_Toggle+0x34>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 8001466:	e008      	b.n	800147a <onGreen_Toggle+0x2e>
	else if (enable_change == 1){
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <onGreen_Toggle+0x34>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d104      	bne.n	800147a <onGreen_Toggle+0x2e>
		turnoffAll();
 8001470:	f7ff fefe 	bl	8001270 <turnoffAll>
		enable_change = 0;
 8001474:	4b02      	ldr	r3, [pc, #8]	; (8001480 <onGreen_Toggle+0x34>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000e4 	.word	0x200000e4

08001484 <onYellow_Toggle>:
void onYellow_Toggle(){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <onYellow_Toggle+0x34>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <onYellow_Toggle+0x1c>
		onYellow_1();
 8001490:	f7ff ff2c 	bl	80012ec <onYellow_1>
		onYellow_2();
 8001494:	f7ff ff62 	bl	800135c <onYellow_2>
		enable_change = 1;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <onYellow_Toggle+0x34>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 800149e:	e008      	b.n	80014b2 <onYellow_Toggle+0x2e>
	else if (enable_change == 1){
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <onYellow_Toggle+0x34>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d104      	bne.n	80014b2 <onYellow_Toggle+0x2e>
		turnoffAll();
 80014a8:	f7ff fee2 	bl	8001270 <turnoffAll>
		enable_change = 0;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <onYellow_Toggle+0x34>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200000e4 	.word	0x200000e4

080014bc <scanLed>:
void scanLed(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	switch (status){
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <scanLed+0x18c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b5e      	cmp	r3, #94	; 0x5e
 80014c6:	f300 80ad 	bgt.w	8001624 <scanLed+0x168>
 80014ca:	2b5b      	cmp	r3, #91	; 0x5b
 80014cc:	da0b      	bge.n	80014e6 <scanLed+0x2a>
 80014ce:	2b16      	cmp	r3, #22
 80014d0:	f000 8098 	beq.w	8001604 <scanLed+0x148>
 80014d4:	2b16      	cmp	r3, #22
 80014d6:	f300 80a5 	bgt.w	8001624 <scanLed+0x168>
 80014da:	2b14      	cmp	r3, #20
 80014dc:	d072      	beq.n	80015c4 <scanLed+0x108>
 80014de:	2b15      	cmp	r3, #21
 80014e0:	f000 8080 	beq.w	80015e4 <scanLed+0x128>
		if (timer_flag[3] == 1){
			onGreen_Toggle();
			setTimer(50,3);
		}
		break;
	default: break;
 80014e4:	e09e      	b.n	8001624 <scanLed+0x168>
 80014e6:	3b5b      	subs	r3, #91	; 0x5b
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	f200 809b 	bhi.w	8001624 <scanLed+0x168>
 80014ee:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <scanLed+0x38>)
 80014f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f4:	08001505 	.word	0x08001505
 80014f8:	08001535 	.word	0x08001535
 80014fc:	08001565 	.word	0x08001565
 8001500:	08001595 	.word	0x08001595
		onRed_1();
 8001504:	f7ff fede 	bl	80012c4 <onRed_1>
		onGreen_2();
 8001508:	f7ff ff38 	bl	800137c <onGreen_2>
		if(timer_flag[4] == 0){
 800150c:	4b4f      	ldr	r3, [pc, #316]	; (800164c <scanLed+0x190>)
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <scanLed+0x64>
			onGreenPed();
 8001514:	f7ff ff56 	bl	80013c4 <onGreenPed>
			state_buzzer =OFF;//buzzer
 8001518:	4b4d      	ldr	r3, [pc, #308]	; (8001650 <scanLed+0x194>)
 800151a:	2202      	movs	r2, #2
 800151c:	601a      	str	r2, [r3, #0]
		break;
 800151e:	e083      	b.n	8001628 <scanLed+0x16c>
		}else if(timer_flag[4] == 1){
 8001520:	4b4a      	ldr	r3, [pc, #296]	; (800164c <scanLed+0x190>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d17f      	bne.n	8001628 <scanLed+0x16c>
			offPed();
 8001528:	f7ff ff38 	bl	800139c <offPed>
			state_buzzer =OFF;//buzzer
 800152c:	4b48      	ldr	r3, [pc, #288]	; (8001650 <scanLed+0x194>)
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
		break;
 8001532:	e079      	b.n	8001628 <scanLed+0x16c>
		onRed_1();
 8001534:	f7ff fec6 	bl	80012c4 <onRed_1>
		onYellow_2();
 8001538:	f7ff ff10 	bl	800135c <onYellow_2>
		if(timer_flag[4] == 0){
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <scanLed+0x190>)
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <scanLed+0x94>
			onGreenPed();
 8001544:	f7ff ff3e 	bl	80013c4 <onGreenPed>
			state_buzzer =OFF;//buzzer
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <scanLed+0x194>)
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]
		break;
 800154e:	e06d      	b.n	800162c <scanLed+0x170>
		}else if(timer_flag[4] == 1){
 8001550:	4b3e      	ldr	r3, [pc, #248]	; (800164c <scanLed+0x190>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d169      	bne.n	800162c <scanLed+0x170>
			offPed();
 8001558:	f7ff ff20 	bl	800139c <offPed>
			state_buzzer =OFF;//buzzer
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <scanLed+0x194>)
 800155e:	2202      	movs	r2, #2
 8001560:	601a      	str	r2, [r3, #0]
		break;
 8001562:	e063      	b.n	800162c <scanLed+0x170>
		onGreen_1();
 8001564:	f7ff fed6 	bl	8001314 <onGreen_1>
		onRed_2();
 8001568:	f7ff fee8 	bl	800133c <onRed_2>
		if(timer_flag[4] == 0){
 800156c:	4b37      	ldr	r3, [pc, #220]	; (800164c <scanLed+0x190>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <scanLed+0xc4>
			state_buzzer =ON;//buzzer
 8001574:	4b36      	ldr	r3, [pc, #216]	; (8001650 <scanLed+0x194>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]
			onRedPed();
 800157a:	f7ff ff37 	bl	80013ec <onRedPed>
		break;
 800157e:	e057      	b.n	8001630 <scanLed+0x174>
		}else if(timer_flag[4] == 1){
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <scanLed+0x190>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d153      	bne.n	8001630 <scanLed+0x174>
			state_buzzer =OFF;//buzzer
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <scanLed+0x194>)
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
			offPed();
 800158e:	f7ff ff05 	bl	800139c <offPed>
		break;
 8001592:	e04d      	b.n	8001630 <scanLed+0x174>
		onYellow_1();
 8001594:	f7ff feaa 	bl	80012ec <onYellow_1>
		onRed_2();
 8001598:	f7ff fed0 	bl	800133c <onRed_2>
		if(timer_flag[4] == 0){
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <scanLed+0x190>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <scanLed+0xf4>
			state_buzzer =ON;//buzzer
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <scanLed+0x194>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
			onRedPed();
 80015aa:	f7ff ff1f 	bl	80013ec <onRedPed>
		break;
 80015ae:	e041      	b.n	8001634 <scanLed+0x178>
		}else if(timer_flag[4] == 1){
 80015b0:	4b26      	ldr	r3, [pc, #152]	; (800164c <scanLed+0x190>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d13d      	bne.n	8001634 <scanLed+0x178>
			state_buzzer =OFF;//buzzer
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <scanLed+0x194>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	601a      	str	r2, [r3, #0]
			offPed();
 80015be:	f7ff feed 	bl	800139c <offPed>
		break;
 80015c2:	e037      	b.n	8001634 <scanLed+0x178>
		offPed();
 80015c4:	f7ff feea 	bl	800139c <offPed>
		state_buzzer =OFF;//buzzer
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <scanLed+0x194>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <scanLed+0x190>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d130      	bne.n	8001638 <scanLed+0x17c>
			onRed_Toggle();
 80015d6:	f7ff ff1d 	bl	8001414 <onRed_Toggle>
			setTimer(50,3);
 80015da:	2103      	movs	r1, #3
 80015dc:	2032      	movs	r0, #50	; 0x32
 80015de:	f000 f839 	bl	8001654 <setTimer>
		break;
 80015e2:	e029      	b.n	8001638 <scanLed+0x17c>
		offPed();
 80015e4:	f7ff feda 	bl	800139c <offPed>
		state_buzzer =OFF;//buzzer
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <scanLed+0x194>)
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <scanLed+0x190>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d122      	bne.n	800163c <scanLed+0x180>
			onYellow_Toggle();
 80015f6:	f7ff ff45 	bl	8001484 <onYellow_Toggle>
			setTimer(50,3);
 80015fa:	2103      	movs	r1, #3
 80015fc:	2032      	movs	r0, #50	; 0x32
 80015fe:	f000 f829 	bl	8001654 <setTimer>
		break;
 8001602:	e01b      	b.n	800163c <scanLed+0x180>
		offPed();
 8001604:	f7ff feca 	bl	800139c <offPed>
		state_buzzer =OFF; //buzzer
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <scanLed+0x194>)
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <scanLed+0x190>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d114      	bne.n	8001640 <scanLed+0x184>
			onGreen_Toggle();
 8001616:	f7ff ff19 	bl	800144c <onGreen_Toggle>
			setTimer(50,3);
 800161a:	2103      	movs	r1, #3
 800161c:	2032      	movs	r0, #50	; 0x32
 800161e:	f000 f819 	bl	8001654 <setTimer>
		break;
 8001622:	e00d      	b.n	8001640 <scanLed+0x184>
	default: break;
 8001624:	bf00      	nop
 8001626:	e00c      	b.n	8001642 <scanLed+0x186>
		break;
 8001628:	bf00      	nop
 800162a:	e00a      	b.n	8001642 <scanLed+0x186>
		break;
 800162c:	bf00      	nop
 800162e:	e008      	b.n	8001642 <scanLed+0x186>
		break;
 8001630:	bf00      	nop
 8001632:	e006      	b.n	8001642 <scanLed+0x186>
		break;
 8001634:	bf00      	nop
 8001636:	e004      	b.n	8001642 <scanLed+0x186>
		break;
 8001638:	bf00      	nop
 800163a:	e002      	b.n	8001642 <scanLed+0x186>
		break;
 800163c:	bf00      	nop
 800163e:	e000      	b.n	8001642 <scanLed+0x186>
		break;
 8001640:	bf00      	nop
	}
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000048 	.word	0x20000048
 800164c:	20000074 	.word	0x20000074
 8001650:	20000044 	.word	0x20000044

08001654 <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 800165e:	4907      	ldr	r1, [pc, #28]	; (800167c <setTimer+0x28>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 8001668:	4a05      	ldr	r2, [pc, #20]	; (8001680 <setTimer+0x2c>)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	200000e8 	.word	0x200000e8
 8001680:	20000074 	.word	0x20000074

08001684 <timerRun>:

void timerRun(){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	e01c      	b.n	80016ca <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <timerRun+0x58>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	2b00      	cmp	r3, #0
 800169a:	dd13      	ble.n	80016c4 <timerRun+0x40>
			timer_counter[i]--;
 800169c:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <timerRun+0x58>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	490d      	ldr	r1, [pc, #52]	; (80016dc <timerRun+0x58>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <timerRun+0x58>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d104      	bne.n	80016c4 <timerRun+0x40>
				timer_flag [i] = 1;
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <timerRun+0x5c>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2101      	movs	r1, #1
 80016c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3301      	adds	r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	dddf      	ble.n	8001690 <timerRun+0xc>
			}
		}
	}
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	200000e8 	.word	0x200000e8
 80016e0:	20000074 	.word	0x20000074

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_MspInit+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x5c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x60>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_MspInit+0x60>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d114      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_TIM_Base_MspInit+0x78>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_TIM_Base_MspInit+0x78>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	61d3      	str	r3, [r2, #28]
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_TIM_Base_MspInit+0x78>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	201c      	movs	r0, #28
 8001778:	f000 fa55 	bl	8001c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177c:	201c      	movs	r0, #28
 800177e:	f000 fa6e 	bl	8001c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001782:	e018      	b.n	80017b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <HAL_TIM_Base_MspInit+0x7c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d113      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_TIM_Base_MspInit+0x78>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <HAL_TIM_Base_MspInit+0x78>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	61d3      	str	r3, [r2, #28]
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_TIM_Base_MspInit+0x78>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201d      	movs	r0, #29
 80017ac:	f000 fa3b 	bl	8001c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017b0:	201d      	movs	r0, #29
 80017b2:	f000 fa54 	bl	8001c5e <HAL_NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40000400 	.word	0x40000400

080017c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_TIM_MspPostInit+0x58>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d117      	bne.n	8001818 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_TIM_MspPostInit+0x5c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_TIM_MspPostInit+0x5c>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_TIM_MspPostInit+0x5c>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001800:	2340      	movs	r3, #64	; 0x40
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2302      	movs	r3, #2
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_TIM_MspPostInit+0x60>)
 8001814:	f000 faf0 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40000400 	.word	0x40000400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010800 	.word	0x40010800

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_UART_MspInit+0x98>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d137      	bne.n	80018bc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 8001852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001856:	61d3      	str	r3, [r2, #28]
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x9c>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800187c:	2304      	movs	r3, #4
 800187e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4619      	mov	r1, r3
 800188e:	480f      	ldr	r0, [pc, #60]	; (80018cc <HAL_UART_MspInit+0xa0>)
 8001890:	f000 fab2 	bl	8001df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001894:	2308      	movs	r3, #8
 8001896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	4809      	ldr	r0, [pc, #36]	; (80018cc <HAL_UART_MspInit+0xa0>)
 80018a8:	f000 faa6 	bl	8001df8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2026      	movs	r0, #38	; 0x26
 80018b2:	f000 f9b8 	bl	8001c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018b6:	2026      	movs	r0, #38	; 0x26
 80018b8:	f000 f9d1 	bl	8001c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40004400 	.word	0x40004400
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <NMI_Handler+0x4>

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <HardFault_Handler+0x4>

080018dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <MemManage_Handler+0x4>

080018e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <UsageFault_Handler+0x4>

080018ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001916:	f000 f893 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM2_IRQHandler+0x10>)
 8001926:	f001 f9dd 	bl	8002ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000016c 	.word	0x2000016c

08001934 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <TIM3_IRQHandler+0x10>)
 800193a:	f001 f9d3 	bl	8002ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000124 	.word	0x20000124

08001948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <USART2_IRQHandler+0x10>)
 800194e:	f002 f867 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200001b4 	.word	0x200001b4

0800195c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001968:	f7ff fff8 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480b      	ldr	r0, [pc, #44]	; (800199c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800196e:	490c      	ldr	r1, [pc, #48]	; (80019a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001970:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001984:	4c09      	ldr	r4, [pc, #36]	; (80019ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f002 fd8b 	bl	80044ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001996:	f7ff fa69 	bl	8000e6c <main>
  bx lr
 800199a:	4770      	bx	lr
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80019a4:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 80019a8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80019ac:	20000200 	.word	0x20000200

080019b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC1_2_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x28>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x28>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 f923 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	200f      	movs	r0, #15
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fe88 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f93b 	bl	8001c7a <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f000 f903 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	2000009c 	.word	0x2000009c
 8001a38:	200000a4 	.word	0x200000a4
 8001a3c:	200000a0 	.word	0x200000a0

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_IncTick+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <HAL_IncTick+0x20>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	200000a4 	.word	0x200000a4
 8001a60:	200001fc 	.word	0x200001fc

08001a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_GetTick+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	200001fc 	.word	0x200001fc

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4906      	ldr	r1, [pc, #24]	; (8001b10 <__NVIC_EnableIRQ+0x34>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff90 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff2d 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff42 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff90 	bl	8001b68 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5f 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff35 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffa2 	bl	8001bcc <SysTick_Config>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d008      	beq.n	8001cbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e020      	b.n	8001cfe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 020e 	bic.w	r2, r2, #14
 8001cca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0201 	bic.w	r2, r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d005      	beq.n	8001d2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2204      	movs	r2, #4
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e051      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 020e 	bic.w	r2, r2, #14
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <HAL_DMA_Abort_IT+0xd4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d029      	beq.n	8001daa <HAL_DMA_Abort_IT+0xa2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <HAL_DMA_Abort_IT+0xd8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d022      	beq.n	8001da6 <HAL_DMA_Abort_IT+0x9e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_DMA_Abort_IT+0xdc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01a      	beq.n	8001da0 <HAL_DMA_Abort_IT+0x98>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_DMA_Abort_IT+0xe0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d012      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x92>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_DMA_Abort_IT+0xe4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00a      	beq.n	8001d94 <HAL_DMA_Abort_IT+0x8c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_DMA_Abort_IT+0xe8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d102      	bne.n	8001d8e <HAL_DMA_Abort_IT+0x86>
 8001d88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d8c:	e00e      	b.n	8001dac <HAL_DMA_Abort_IT+0xa4>
 8001d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d92:	e00b      	b.n	8001dac <HAL_DMA_Abort_IT+0xa4>
 8001d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d98:	e008      	b.n	8001dac <HAL_DMA_Abort_IT+0xa4>
 8001d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9e:	e005      	b.n	8001dac <HAL_DMA_Abort_IT+0xa4>
 8001da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da4:	e002      	b.n	8001dac <HAL_DMA_Abort_IT+0xa4>
 8001da6:	2310      	movs	r3, #16
 8001da8:	e000      	b.n	8001dac <HAL_DMA_Abort_IT+0xa4>
 8001daa:	2301      	movs	r3, #1
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_DMA_Abort_IT+0xec>)
 8001dae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
    } 
  }
  return status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020008 	.word	0x40020008
 8001de0:	4002001c 	.word	0x4002001c
 8001de4:	40020030 	.word	0x40020030
 8001de8:	40020044 	.word	0x40020044
 8001dec:	40020058 	.word	0x40020058
 8001df0:	4002006c 	.word	0x4002006c
 8001df4:	40020000 	.word	0x40020000

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b08b      	sub	sp, #44	; 0x2c
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e169      	b.n	80020e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	f040 8158 	bne.w	80020da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a9a      	ldr	r2, [pc, #616]	; (8002098 <HAL_GPIO_Init+0x2a0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d05e      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e34:	4a98      	ldr	r2, [pc, #608]	; (8002098 <HAL_GPIO_Init+0x2a0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d875      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a98      	ldr	r2, [pc, #608]	; (800209c <HAL_GPIO_Init+0x2a4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d058      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e40:	4a96      	ldr	r2, [pc, #600]	; (800209c <HAL_GPIO_Init+0x2a4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d86f      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e46:	4a96      	ldr	r2, [pc, #600]	; (80020a0 <HAL_GPIO_Init+0x2a8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d052      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e4c:	4a94      	ldr	r2, [pc, #592]	; (80020a0 <HAL_GPIO_Init+0x2a8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d869      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e52:	4a94      	ldr	r2, [pc, #592]	; (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d04c      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e58:	4a92      	ldr	r2, [pc, #584]	; (80020a4 <HAL_GPIO_Init+0x2ac>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d863      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e5e:	4a92      	ldr	r2, [pc, #584]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d046      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
 8001e64:	4a90      	ldr	r2, [pc, #576]	; (80020a8 <HAL_GPIO_Init+0x2b0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d85d      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d82a      	bhi.n	8001ec4 <HAL_GPIO_Init+0xcc>
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d859      	bhi.n	8001f26 <HAL_GPIO_Init+0x12e>
 8001e72:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <HAL_GPIO_Init+0x80>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001ef3 	.word	0x08001ef3
 8001e7c:	08001ecd 	.word	0x08001ecd
 8001e80:	08001edf 	.word	0x08001edf
 8001e84:	08001f21 	.word	0x08001f21
 8001e88:	08001f27 	.word	0x08001f27
 8001e8c:	08001f27 	.word	0x08001f27
 8001e90:	08001f27 	.word	0x08001f27
 8001e94:	08001f27 	.word	0x08001f27
 8001e98:	08001f27 	.word	0x08001f27
 8001e9c:	08001f27 	.word	0x08001f27
 8001ea0:	08001f27 	.word	0x08001f27
 8001ea4:	08001f27 	.word	0x08001f27
 8001ea8:	08001f27 	.word	0x08001f27
 8001eac:	08001f27 	.word	0x08001f27
 8001eb0:	08001f27 	.word	0x08001f27
 8001eb4:	08001f27 	.word	0x08001f27
 8001eb8:	08001f27 	.word	0x08001f27
 8001ebc:	08001ed5 	.word	0x08001ed5
 8001ec0:	08001ee9 	.word	0x08001ee9
 8001ec4:	4a79      	ldr	r2, [pc, #484]	; (80020ac <HAL_GPIO_Init+0x2b4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d013      	beq.n	8001ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eca:	e02c      	b.n	8001f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	623b      	str	r3, [r7, #32]
          break;
 8001ed2:	e029      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e024      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	623b      	str	r3, [r7, #32]
          break;
 8001ee6:	e01f      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	330c      	adds	r3, #12
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e01a      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001efa:	2304      	movs	r3, #4
 8001efc:	623b      	str	r3, [r7, #32]
          break;
 8001efe:	e013      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d105      	bne.n	8001f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	611a      	str	r2, [r3, #16]
          break;
 8001f12:	e009      	b.n	8001f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f14:	2308      	movs	r3, #8
 8001f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	615a      	str	r2, [r3, #20]
          break;
 8001f1e:	e003      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
          break;
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x130>
          break;
 8001f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d801      	bhi.n	8001f32 <HAL_GPIO_Init+0x13a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_Init+0x13e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d802      	bhi.n	8001f44 <HAL_GPIO_Init+0x14c>
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0x152>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	3b08      	subs	r3, #8
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	210f      	movs	r1, #15
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	6a39      	ldr	r1, [r7, #32]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80b1 	beq.w	80020da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f78:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <HAL_GPIO_Init+0x2b8>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a4c      	ldr	r2, [pc, #304]	; (80020b0 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_GPIO_Init+0x2b8>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f90:	4a48      	ldr	r2, [pc, #288]	; (80020b4 <HAL_GPIO_Init+0x2bc>)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a40      	ldr	r2, [pc, #256]	; (80020b8 <HAL_GPIO_Init+0x2c0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d013      	beq.n	8001fe4 <HAL_GPIO_Init+0x1ec>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3f      	ldr	r2, [pc, #252]	; (80020bc <HAL_GPIO_Init+0x2c4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_GPIO_Init+0x1e8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3e      	ldr	r2, [pc, #248]	; (80020c0 <HAL_GPIO_Init+0x2c8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_GPIO_Init+0x1e4>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <HAL_GPIO_Init+0x2cc>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_GPIO_Init+0x1e0>
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e006      	b.n	8001fe6 <HAL_GPIO_Init+0x1ee>
 8001fd8:	2304      	movs	r3, #4
 8001fda:	e004      	b.n	8001fe6 <HAL_GPIO_Init+0x1ee>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e002      	b.n	8001fe6 <HAL_GPIO_Init+0x1ee>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_GPIO_Init+0x1ee>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe8:	f002 0203 	and.w	r2, r2, #3
 8001fec:	0092      	lsls	r2, r2, #2
 8001fee:	4093      	lsls	r3, r2
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff6:	492f      	ldr	r1, [pc, #188]	; (80020b4 <HAL_GPIO_Init+0x2bc>)
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	492c      	ldr	r1, [pc, #176]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	43db      	mvns	r3, r3
 8002026:	4928      	ldr	r1, [pc, #160]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002028:	4013      	ands	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002038:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	4922      	ldr	r1, [pc, #136]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	43db      	mvns	r3, r3
 800204e:	491e      	ldr	r1, [pc, #120]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002050:	4013      	ands	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4918      	ldr	r1, [pc, #96]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206e:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	43db      	mvns	r3, r3
 8002076:	4914      	ldr	r1, [pc, #80]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 8002078:	4013      	ands	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d021      	beq.n	80020cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_GPIO_Init+0x2d0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e021      	b.n	80020da <HAL_GPIO_Init+0x2e2>
 8002096:	bf00      	nop
 8002098:	10320000 	.word	0x10320000
 800209c:	10310000 	.word	0x10310000
 80020a0:	10220000 	.word	0x10220000
 80020a4:	10210000 	.word	0x10210000
 80020a8:	10120000 	.word	0x10120000
 80020ac:	10110000 	.word	0x10110000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000
 80020b8:	40010800 	.word	0x40010800
 80020bc:	40010c00 	.word	0x40010c00
 80020c0:	40011000 	.word	0x40011000
 80020c4:	40011400 	.word	0x40011400
 80020c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_GPIO_Init+0x304>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4909      	ldr	r1, [pc, #36]	; (80020fc <HAL_GPIO_Init+0x304>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	3301      	adds	r3, #1
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f47f ae8e 	bne.w	8001e0c <HAL_GPIO_Init+0x14>
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	372c      	adds	r7, #44	; 0x2c
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	807b      	strh	r3, [r7, #2]
 800213a:	4613      	mov	r3, r2
 800213c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800213e:	787b      	ldrb	r3, [r7, #1]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800214a:	e003      	b.n	8002154 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	041a      	lsls	r2, r3, #16
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	611a      	str	r2, [r3, #16]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002170:	887a      	ldrh	r2, [r7, #2]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	041a      	lsls	r2, r3, #16
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	43d9      	mvns	r1, r3
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	400b      	ands	r3, r1
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e26c      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b0:	4b92      	ldr	r3, [pc, #584]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d00c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021bc:	4b8f      	ldr	r3, [pc, #572]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d112      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
 80021c8:	4b8c      	ldr	r3, [pc, #560]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d10b      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b89      	ldr	r3, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d06c      	beq.n	80022bc <HAL_RCC_OscConfig+0x12c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d168      	bne.n	80022bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e246      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x76>
 80021f8:	4b80      	ldr	r3, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a7f      	ldr	r2, [pc, #508]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e02e      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b7b      	ldr	r3, [pc, #492]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7a      	ldr	r2, [pc, #488]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b78      	ldr	r3, [pc, #480]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a77      	ldr	r2, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0xbc>
 8002232:	4b72      	ldr	r3, [pc, #456]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a71      	ldr	r2, [pc, #452]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b6f      	ldr	r3, [pc, #444]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6e      	ldr	r2, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 800224c:	4b6b      	ldr	r3, [pc, #428]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a6a      	ldr	r2, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b68      	ldr	r3, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a67      	ldr	r2, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002262:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fbfa 	bl	8001a64 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fbf6 	bl	8001a64 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1fa      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b5d      	ldr	r3, [pc, #372]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xe4>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fbe6 	bl	8001a64 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff fbe2 	bl	8001a64 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e1e6      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	4b53      	ldr	r3, [pc, #332]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x10c>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d063      	beq.n	8002392 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ca:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022d6:	4b49      	ldr	r3, [pc, #292]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d11c      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
 80022e2:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d116      	bne.n	800231c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e1ba      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4939      	ldr	r1, [pc, #228]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	e03a      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_RCC_OscConfig+0x270>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7ff fb9b 	bl	8001a64 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002332:	f7ff fb97 	bl	8001a64 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e19b      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4927      	ldr	r1, [pc, #156]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
 8002364:	e015      	b.n	8002392 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002366:	4b26      	ldr	r3, [pc, #152]	; (8002400 <HAL_RCC_OscConfig+0x270>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7ff fb7a 	bl	8001a64 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002374:	f7ff fb76 	bl	8001a64 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e17a      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002386:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03a      	beq.n	8002414 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d019      	beq.n	80023da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_RCC_OscConfig+0x274>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fb5a 	bl	8001a64 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b4:	f7ff fb56 	bl	8001a64 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e15a      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c6:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <HAL_RCC_OscConfig+0x26c>)
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 facc 	bl	8002970 <RCC_Delay>
 80023d8:	e01c      	b.n	8002414 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff fb40 	bl	8001a64 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e6:	e00f      	b.n	8002408 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff fb3c 	bl	8001a64 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d908      	bls.n	8002408 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e140      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	42420000 	.word	0x42420000
 8002404:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b9e      	ldr	r3, [pc, #632]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e9      	bne.n	80023e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a6 	beq.w	800256e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b97      	ldr	r3, [pc, #604]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10d      	bne.n	800244e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b94      	ldr	r3, [pc, #592]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a93      	ldr	r2, [pc, #588]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]
 800243e:	4b91      	ldr	r3, [pc, #580]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a8a      	ldr	r2, [pc, #552]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002466:	f7ff fafd 	bl	8001a64 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246e:	f7ff faf9 	bl	8001a64 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0fd      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <HAL_RCC_OscConfig+0x4f8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x312>
 8002494:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	6213      	str	r3, [r2, #32]
 80024a0:	e02d      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x334>
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a75      	ldr	r2, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b73      	ldr	r3, [pc, #460]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a72      	ldr	r2, [pc, #456]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	e01c      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b05      	cmp	r3, #5
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCC_OscConfig+0x356>
 80024cc:	4b6d      	ldr	r3, [pc, #436]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a6c      	ldr	r2, [pc, #432]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e00b      	b.n	80024fe <HAL_RCC_OscConfig+0x36e>
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a66      	ldr	r2, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	6213      	str	r3, [r2, #32]
 80024f2:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a63      	ldr	r2, [pc, #396]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f023 0304 	bic.w	r3, r3, #4
 80024fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d015      	beq.n	8002532 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7ff faad 	bl	8001a64 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7ff faa9 	bl	8001a64 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0ab      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ee      	beq.n	800250e <HAL_RCC_OscConfig+0x37e>
 8002530:	e014      	b.n	800255c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff fa97 	bl	8001a64 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7ff fa93 	bl	8001a64 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e095      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b48      	ldr	r3, [pc, #288]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a47      	ldr	r2, [pc, #284]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8081 	beq.w	800267a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b08      	cmp	r3, #8
 8002582:	d061      	beq.n	8002648 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d146      	bne.n	800261a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7ff fa67 	bl	8001a64 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff fa63 	bl	8001a64 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e067      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	492d      	ldr	r1, [pc, #180]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a19      	ldr	r1, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	430b      	orrs	r3, r1
 80025e6:	4927      	ldr	r1, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7ff fa37 	bl	8001a64 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff fa33 	bl	8001a64 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e037      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x46a>
 8002618:	e02f      	b.n	800267a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b1c      	ldr	r3, [pc, #112]	; (800268c <HAL_RCC_OscConfig+0x4fc>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff fa20 	bl	8001a64 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff fa1c 	bl	8001a64 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e020      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x498>
 8002646:	e018      	b.n	800267a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e013      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	40007000 	.word	0x40007000
 800268c:	42420060 	.word	0x42420060

08002690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d0      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d910      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0207 	bic.w	r2, r3, #7
 80026ba:	4965      	ldr	r1, [pc, #404]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b8      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d020      	beq.n	8002722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a58      	ldr	r2, [pc, #352]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002704:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a52      	ldr	r2, [pc, #328]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800270e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	494d      	ldr	r1, [pc, #308]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d040      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d115      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e07f      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e073      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e06b      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4936      	ldr	r1, [pc, #216]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7ff f970 	bl	8001a64 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7ff f96c 	bl	8001a64 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e053      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d210      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4922      	ldr	r1, [pc, #136]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	4916      	ldr	r1, [pc, #88]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d009      	beq.n	800281e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	490e      	ldr	r1, [pc, #56]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800281e:	f000 f821 	bl	8002864 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	490a      	ldr	r1, [pc, #40]	; (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a09      	ldr	r2, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1cc>)
 8002838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800283a:	4b09      	ldr	r3, [pc, #36]	; (8002860 <HAL_RCC_ClockConfig+0x1d0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff f8ce 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40022000 	.word	0x40022000
 8002854:	40021000 	.word	0x40021000
 8002858:	0800451c 	.word	0x0800451c
 800285c:	2000009c 	.word	0x2000009c
 8002860:	200000a0 	.word	0x200000a0

08002864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b04      	cmp	r3, #4
 800288c:	d002      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x30>
 800288e:	2b08      	cmp	r3, #8
 8002890:	d003      	beq.n	800289a <HAL_RCC_GetSysClockFreq+0x36>
 8002892:	e027      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002896:	613b      	str	r3, [r7, #16]
      break;
 8002898:	e027      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0c9b      	lsrs	r3, r3, #18
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d010      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	0c5b      	lsrs	r3, r3, #17
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 80028c6:	fb02 f203 	mul.w	r2, r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e004      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	613b      	str	r3, [r7, #16]
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetSysClockFreq+0x98>)
 80028e6:	613b      	str	r3, [r7, #16]
      break;
 80028e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ea:	693b      	ldr	r3, [r7, #16]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000
 80028fc:	007a1200 	.word	0x007a1200
 8002900:	08004534 	.word	0x08004534
 8002904:	08004544 	.word	0x08004544
 8002908:	003d0900 	.word	0x003d0900

0800290c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b02      	ldr	r3, [pc, #8]	; (800291c <HAL_RCC_GetHCLKFreq+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	2000009c 	.word	0x2000009c

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002924:	f7ff fff2 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	0800452c 	.word	0x0800452c

08002948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800294c:	f7ff ffde 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0adb      	lsrs	r3, r3, #11
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <HAL_RCC_GetPCLK2Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000
 800296c:	0800452c 	.word	0x0800452c

08002970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <RCC_Delay+0x34>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <RCC_Delay+0x38>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0a5b      	lsrs	r3, r3, #9
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800298c:	bf00      	nop
  }
  while (Delay --);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	60fa      	str	r2, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f9      	bne.n	800298c <RCC_Delay+0x1c>
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	2000009c 	.word	0x2000009c
 80029a8:	10624dd3 	.word	0x10624dd3

080029ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e041      	b.n	8002a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fe feb8 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f000 fc30 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d001      	beq.n	8002a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e03a      	b.n	8002ada <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00e      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x58>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d009      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x58>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a14      	ldr	r2, [pc, #80]	; (8002ae8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x58>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a13      	ldr	r2, [pc, #76]	; (8002aec <HAL_TIM_Base_Start_IT+0xa0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d111      	bne.n	8002ac8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d010      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	e007      	b.n	8002ad8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40000800 	.word	0x40000800

08002af0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e041      	b.n	8002b86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f839 	bl	8002b8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fb8e 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_TIM_PWM_Start+0x24>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e022      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d109      	bne.n	8002bde <HAL_TIM_PWM_Start+0x3e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e015      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d109      	bne.n	8002bf8 <HAL_TIM_PWM_Start+0x58>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	e008      	b.n	8002c0a <HAL_TIM_PWM_Start+0x6a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e05e      	b.n	8002cd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <HAL_TIM_PWM_Start+0x82>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c20:	e013      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x92>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c30:	e00b      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xa2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c40:	e003      	b.n	8002c4a <HAL_TIM_PWM_Start+0xaa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	6839      	ldr	r1, [r7, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fd7c 	bl	8003750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <HAL_TIM_PWM_Start+0x138>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIM_PWM_Start+0x138>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_TIM_PWM_Start+0xfa>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d009      	beq.n	8002c9a <HAL_TIM_PWM_Start+0xfa>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <HAL_TIM_PWM_Start+0x13c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_TIM_PWM_Start+0xfa>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_TIM_PWM_Start+0x140>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d111      	bne.n	8002cbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d010      	beq.n	8002cce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbc:	e007      	b.n	8002cce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0202 	mvn.w	r2, #2
 8002d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa76 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa69 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fa78 	bl	800322a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0204 	mvn.w	r2, #4
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa4c 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa3f 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fa4e 	bl	800322a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0208 	mvn.w	r2, #8
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa22 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa15 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa24 	bl	800322a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d122      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d11b      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0210 	mvn.w	r2, #16
 8002e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2208      	movs	r2, #8
 8002e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f9f8 	bl	8003218 <HAL_TIM_IC_CaptureCallback>
 8002e28:	e005      	b.n	8002e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f9eb 	bl	8003206 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f9fa 	bl	800322a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d10e      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d107      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0201 	mvn.w	r2, #1
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe f9e6 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d10e      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d107      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fce9 	bl	8003866 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b40      	cmp	r3, #64	; 0x40
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d107      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f9be 	bl	800323c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0320 	and.w	r3, r3, #32
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d10e      	bne.n	8002eec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d107      	bne.n	8002eec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0220 	mvn.w	r2, #32
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fcb4 	bl	8003854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0ae      	b.n	8003070 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	f200 809f 	bhi.w	8003060 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f5d 	.word	0x08002f5d
 8002f2c:	08003061 	.word	0x08003061
 8002f30:	08003061 	.word	0x08003061
 8002f34:	08003061 	.word	0x08003061
 8002f38:	08002f9d 	.word	0x08002f9d
 8002f3c:	08003061 	.word	0x08003061
 8002f40:	08003061 	.word	0x08003061
 8002f44:	08003061 	.word	0x08003061
 8002f48:	08002fdf 	.word	0x08002fdf
 8002f4c:	08003061 	.word	0x08003061
 8002f50:	08003061 	.word	0x08003061
 8002f54:	08003061 	.word	0x08003061
 8002f58:	0800301f 	.word	0x0800301f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f9d6 	bl	8003314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0208 	orr.w	r2, r2, #8
 8002f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	619a      	str	r2, [r3, #24]
      break;
 8002f9a:	e064      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fa1c 	bl	80033e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]
      break;
 8002fdc:	e043      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa65 	bl	80034b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0208 	orr.w	r2, r2, #8
 8002ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0204 	bic.w	r2, r2, #4
 8003008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69d9      	ldr	r1, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	61da      	str	r2, [r3, #28]
      break;
 800301c:	e023      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 faaf 	bl	8003588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	021a      	lsls	r2, r3, #8
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	61da      	str	r2, [r3, #28]
      break;
 800305e:	e002      	b.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
      break;
 8003064:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800306e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIM_ConfigClockSource+0x1c>
 8003090:	2302      	movs	r3, #2
 8003092:	e0b4      	b.n	80031fe <HAL_TIM_ConfigClockSource+0x186>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030cc:	d03e      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xd4>
 80030ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d2:	f200 8087 	bhi.w	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030da:	f000 8086 	beq.w	80031ea <HAL_TIM_ConfigClockSource+0x172>
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e2:	d87f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b70      	cmp	r3, #112	; 0x70
 80030e6:	d01a      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xa6>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d87b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b60      	cmp	r3, #96	; 0x60
 80030ee:	d050      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x11a>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d877      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b50      	cmp	r3, #80	; 0x50
 80030f6:	d03c      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0xfa>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d873      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	d058      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d86f      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b30      	cmp	r3, #48	; 0x30
 8003106:	d064      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d86b      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b20      	cmp	r3, #32
 800310e:	d060      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d867      	bhi.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d05c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	2b10      	cmp	r3, #16
 800311a:	d05a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x15a>
 800311c:	e062      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 faf0 	bl	8003712 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	609a      	str	r2, [r3, #8]
      break;
 800314a:	e04f      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f000 fad9 	bl	8003712 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800316e:	609a      	str	r2, [r3, #8]
      break;
 8003170:	e03c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	461a      	mov	r2, r3
 8003180:	f000 fa50 	bl	8003624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2150      	movs	r1, #80	; 0x50
 800318a:	4618      	mov	r0, r3
 800318c:	f000 faa7 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 8003190:	e02c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 fa6e 	bl	8003680 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2160      	movs	r1, #96	; 0x60
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fa97 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80031b0:	e01c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fa30 	bl	8003624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2140      	movs	r1, #64	; 0x40
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fa87 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80031d0:	e00c      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f000 fa7e 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80031e2:	e003      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e000      	b.n	80031ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
	...

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a29      	ldr	r2, [pc, #164]	; (8003308 <TIM_Base_SetConfig+0xb8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a26      	ldr	r2, [pc, #152]	; (800330c <TIM_Base_SetConfig+0xbc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a25      	ldr	r2, [pc, #148]	; (8003310 <TIM_Base_SetConfig+0xc0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <TIM_Base_SetConfig+0xb8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d007      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <TIM_Base_SetConfig+0xbc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <TIM_Base_SetConfig+0xc0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d108      	bne.n	80032c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <TIM_Base_SetConfig+0xb8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	40012c00 	.word	0x40012c00
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800

08003314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 0201 	bic.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f023 0302 	bic.w	r3, r3, #2
 800335c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <TIM_OC1_SetConfig+0xc8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10c      	bne.n	800338a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 0308 	bic.w	r3, r3, #8
 8003376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <TIM_OC1_SetConfig+0xc8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d111      	bne.n	80033b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	621a      	str	r2, [r3, #32]
}
 80033d0:	bf00      	nop
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40012c00 	.word	0x40012c00

080033e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f023 0210 	bic.w	r2, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0320 	bic.w	r3, r3, #32
 800342a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <TIM_OC2_SetConfig+0xd0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10d      	bne.n	800345c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800345a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <TIM_OC2_SetConfig+0xd0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d113      	bne.n	800348c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800346a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	621a      	str	r2, [r3, #32]
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40012c00 	.word	0x40012c00

080034b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <TIM_OC3_SetConfig+0xd0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800352c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <TIM_OC3_SetConfig+0xd0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800353c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40012c00 	.word	0x40012c00

08003588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	031b      	lsls	r3, r3, #12
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <TIM_OC4_SetConfig+0x98>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d109      	bne.n	80035fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0210 	bic.w	r2, r3, #16
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	031b      	lsls	r3, r3, #12
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f043 0307 	orr.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003712:	b480      	push	{r7}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	021a      	lsls	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	431a      	orrs	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	609a      	str	r2, [r3, #8]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2201      	movs	r2, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1a      	ldr	r2, [r3, #32]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e046      	b.n	800383e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d009      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a10      	ldr	r2, [pc, #64]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10c      	bne.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4313      	orrs	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e042      	b.n	8003910 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd ffc4 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fd67 	bl	8004390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b20      	cmp	r3, #32
 8003936:	d16d      	bne.n	8003a14 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_UART_Transmit+0x2c>
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e066      	b.n	8003a16 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2221      	movs	r2, #33	; 0x21
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003956:	f7fe f885 	bl	8001a64 <HAL_GetTick>
 800395a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003970:	d108      	bne.n	8003984 <HAL_UART_Transmit+0x6c>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	61bb      	str	r3, [r7, #24]
 8003982:	e003      	b.n	800398c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003988:	2300      	movs	r3, #0
 800398a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800398c:	e02a      	b.n	80039e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 faf0 	bl	8003f7e <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e036      	b.n	8003a16 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	3302      	adds	r3, #2
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	e007      	b.n	80039d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1cf      	bne.n	800398e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fac0 	bl	8003f7e <UART_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e006      	b.n	8003a16 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	e000      	b.n	8003a16 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b0ba      	sub	sp, #232	; 0xe8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fbc8 	bl	8004214 <UART_Receive_IT>
      return;
 8003a84:	e25b      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80de 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
 8003a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80d1 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d011      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
 8003b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 81f2 	beq.w	8003f34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
 8003b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb53 	bl	8004214 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf14      	ite	ne
 8003b7c:	2301      	movne	r3, #1
 8003b7e:	2300      	moveq	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_UART_IRQHandler+0x17a>
 8003b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04f      	beq.n	8003c3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa5d 	bl	800405a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d041      	beq.n	8003c32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1d9      	bne.n	8003bae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	4a7e      	ldr	r2, [pc, #504]	; (8003e00 <HAL_UART_IRQHandler+0x3e0>)
 8003c08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe f87a 	bl	8001d08 <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00e      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f993 	bl	8003f56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00a      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f98f 	bl	8003f56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e006      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f98b 	bl	8003f56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c46:	e175      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	bf00      	nop
    return;
 8003c4a:	e173      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 814f 	bne.w	8003ef4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8148 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 8141 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80b6 	beq.w	8003e04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8145 	beq.w	8003f38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f080 813e 	bcs.w	8003f38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	f000 8088 	beq.w	8003de0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cfc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1d9      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3314      	adds	r3, #20
 8003d22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e1      	bne.n	8003d1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e3      	bne.n	8003d58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dc4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd ff59 	bl	8001c92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4619      	mov	r1, r3
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f8b6 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dfc:	e09c      	b.n	8003f38 <HAL_UART_IRQHandler+0x518>
 8003dfe:	bf00      	nop
 8003e00:	0800411f 	.word	0x0800411f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 808e 	beq.w	8003f3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8089 	beq.w	8003f3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e4e:	647a      	str	r2, [r7, #68]	; 0x44
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e3      	bne.n	8003e2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	623b      	str	r3, [r7, #32]
   return(result);
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3314      	adds	r3, #20
 8003e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e86:	633a      	str	r2, [r7, #48]	; 0x30
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e3      	bne.n	8003e62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0310 	bic.w	r3, r3, #16
 8003ebe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ecc:	61fa      	str	r2, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	617b      	str	r3, [r7, #20]
   return(result);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e3      	bne.n	8003ea8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eea:	4619      	mov	r1, r3
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f83b 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ef2:	e023      	b.n	8003f3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <HAL_UART_IRQHandler+0x4f4>
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f91a 	bl	8004146 <UART_Transmit_IT>
    return;
 8003f12:	e014      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00e      	beq.n	8003f3e <HAL_UART_IRQHandler+0x51e>
 8003f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f959 	bl	80041e4 <UART_EndTransmit_IT>
    return;
 8003f32:	e004      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
    return;
 8003f34:	bf00      	nop
 8003f36:	e002      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <HAL_UART_IRQHandler+0x51e>
      return;
 8003f3c:	bf00      	nop
  }
}
 8003f3e:	37e8      	adds	r7, #232	; 0xe8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b090      	sub	sp, #64	; 0x40
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8e:	e050      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d04c      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9e:	f7fd fd61 	bl	8001a64 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d241      	bcs.n	8004032 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fce:	637a      	str	r2, [r7, #52]	; 0x34
 8003fd0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004002:	623a      	str	r2, [r7, #32]
 8004004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	69f9      	ldr	r1, [r7, #28]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e00f      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d09f      	beq.n	8003f90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3740      	adds	r7, #64	; 0x40
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800405a:	b480      	push	{r7}
 800405c:	b095      	sub	sp, #84	; 0x54
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	330c      	adds	r3, #12
 8004080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004082:	643a      	str	r2, [r7, #64]	; 0x40
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e5      	bne.n	8004062 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3314      	adds	r3, #20
 800409c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d119      	bne.n	8004106 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 0310 	bic.w	r3, r3, #16
 80040e8:	647b      	str	r3, [r7, #68]	; 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f2:	61ba      	str	r2, [r7, #24]
 80040f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6979      	ldr	r1, [r7, #20]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e5      	bne.n	80040d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004114:	bf00      	nop
 8004116:	3754      	adds	r7, #84	; 0x54
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff ff0c 	bl	8003f56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b21      	cmp	r3, #33	; 0x21
 8004158:	d13e      	bne.n	80041d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d114      	bne.n	800418e <UART_Transmit_IT+0x48>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d110      	bne.n	800418e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004180:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	621a      	str	r2, [r3, #32]
 800418c:	e008      	b.n	80041a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6211      	str	r1, [r2, #32]
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4619      	mov	r1, r3
 80041ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fe9d 	bl	8003f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08c      	sub	sp, #48	; 0x30
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b22      	cmp	r3, #34	; 0x22
 8004226:	f040 80ae 	bne.w	8004386 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d117      	bne.n	8004264 <UART_Receive_IT+0x50>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d113      	bne.n	8004264 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	b29a      	uxth	r2, r3
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
 8004262:	e026      	b.n	80042b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d007      	beq.n	8004288 <UART_Receive_IT+0x74>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <UART_Receive_IT+0x82>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	e008      	b.n	80042a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d15d      	bne.n	8004382 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0220 	bic.w	r2, r2, #32
 80042d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	2b01      	cmp	r3, #1
 800430a:	d135      	bne.n	8004378 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	613b      	str	r3, [r7, #16]
   return(result);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f023 0310 	bic.w	r3, r3, #16
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	330c      	adds	r3, #12
 8004330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004332:	623a      	str	r2, [r7, #32]
 8004334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	69f9      	ldr	r1, [r7, #28]
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e5      	bne.n	8004312 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b10      	cmp	r3, #16
 8004352:	d10a      	bne.n	800436a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436e:	4619      	mov	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fdf9 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
 8004376:	e002      	b.n	800437e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7fc ff6b 	bl	8001254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e002      	b.n	8004388 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3730      	adds	r7, #48	; 0x30
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ca:	f023 030c 	bic.w	r3, r3, #12
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <UART_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d103      	bne.n	8004400 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe faa6 	bl	8002948 <HAL_RCC_GetPCLK2Freq>
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	e002      	b.n	8004406 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fe fa8e 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8004404:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	009a      	lsls	r2, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	4a22      	ldr	r2, [pc, #136]	; (80044a8 <UART_SetConfig+0x118>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	0119      	lsls	r1, r3, #4
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fbb2 f2f3 	udiv	r2, r2, r3
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <UART_SetConfig+0x118>)
 800443e:	fba3 0302 	umull	r0, r3, r3, r2
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	2064      	movs	r0, #100	; 0x64
 8004446:	fb00 f303 	mul.w	r3, r0, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	3332      	adds	r3, #50	; 0x32
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <UART_SetConfig+0x118>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445c:	4419      	add	r1, r3
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	fbb2 f2f3 	udiv	r2, r2, r3
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <UART_SetConfig+0x118>)
 8004476:	fba3 0302 	umull	r0, r3, r3, r2
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	; 0x32
 8004488:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <UART_SetConfig+0x118>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	440a      	add	r2, r1
 800449a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40013800 	.word	0x40013800
 80044a8:	51eb851f 	.word	0x51eb851f

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	2600      	movs	r6, #0
 80044b0:	4d0c      	ldr	r5, [pc, #48]	; (80044e4 <__libc_init_array+0x38>)
 80044b2:	4c0d      	ldr	r4, [pc, #52]	; (80044e8 <__libc_init_array+0x3c>)
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	42a6      	cmp	r6, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	f000 f822 	bl	8004504 <_init>
 80044c0:	2600      	movs	r6, #0
 80044c2:	4d0a      	ldr	r5, [pc, #40]	; (80044ec <__libc_init_array+0x40>)
 80044c4:	4c0a      	ldr	r4, [pc, #40]	; (80044f0 <__libc_init_array+0x44>)
 80044c6:	1b64      	subs	r4, r4, r5
 80044c8:	10a4      	asrs	r4, r4, #2
 80044ca:	42a6      	cmp	r6, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d4:	4798      	blx	r3
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f855 3b04 	ldr.w	r3, [r5], #4
 80044de:	4798      	blx	r3
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	08004548 	.word	0x08004548
 80044e8:	08004548 	.word	0x08004548
 80044ec:	08004548 	.word	0x08004548
 80044f0:	0800454c 	.word	0x0800454c

080044f4 <memset>:
 80044f4:	4603      	mov	r3, r0
 80044f6:	4402      	add	r2, r0
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d100      	bne.n	80044fe <memset+0xa>
 80044fc:	4770      	bx	lr
 80044fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004502:	e7f9      	b.n	80044f8 <memset+0x4>

08004504 <_init>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr

08004510 <_fini>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr
