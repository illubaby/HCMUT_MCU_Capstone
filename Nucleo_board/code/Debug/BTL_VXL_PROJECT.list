
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002e7c  08002e7c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e7c  08002e7c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000060  08002ee4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002ee4  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3af  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee5  00000000  00000000  0002d438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  0002fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017642  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea73  00000000  00000000  0004823a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bea  00000000  00000000  00056cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd897  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003448  00000000  00000000  000dd8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e38 	.word	0x08002e38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002e38 	.word	0x08002e38

0800014c <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	2000007c 	.word	0x2000007c

0800016c <ReadPin>:

GPIO_PinState ReadPin(int index){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d105      	bne.n	8000186 <ReadPin+0x1a>
 800017a:	2102      	movs	r1, #2
 800017c:	4812      	ldr	r0, [pc, #72]	; (80001c8 <ReadPin+0x5c>)
 800017e:	f001 f8c1 	bl	8001304 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	e01b      	b.n	80001be <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2b01      	cmp	r3, #1
 800018a:	d105      	bne.n	8000198 <ReadPin+0x2c>
 800018c:	2110      	movs	r1, #16
 800018e:	480e      	ldr	r0, [pc, #56]	; (80001c8 <ReadPin+0x5c>)
 8000190:	f001 f8b8 	bl	8001304 <HAL_GPIO_ReadPin>
 8000194:	4603      	mov	r3, r0
 8000196:	e012      	b.n	80001be <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b02      	cmp	r3, #2
 800019c:	d105      	bne.n	80001aa <ReadPin+0x3e>
 800019e:	2101      	movs	r1, #1
 80001a0:	480a      	ldr	r0, [pc, #40]	; (80001cc <ReadPin+0x60>)
 80001a2:	f001 f8af 	bl	8001304 <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	e009      	b.n	80001be <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2b03      	cmp	r3, #3
 80001ae:	d105      	bne.n	80001bc <ReadPin+0x50>
 80001b0:	2101      	movs	r1, #1
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <ReadPin+0x5c>)
 80001b4:	f001 f8a6 	bl	8001304 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	e000      	b.n	80001be <ReadPin+0x52>
	else return 0;
 80001bc:	2300      	movs	r3, #0
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40010800 	.word	0x40010800
 80001cc:	40010c00 	.word	0x40010c00

080001d0 <getKeyinput>:

void getKeyinput(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e05c      	b.n	8000296 <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 80001dc:	4a32      	ldr	r2, [pc, #200]	; (80002a8 <getKeyinput+0xd8>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e4:	4931      	ldr	r1, [pc, #196]	; (80002ac <getKeyinput+0xdc>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001ec:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <getKeyinput+0xe0>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	492c      	ldr	r1, [pc, #176]	; (80002a8 <getKeyinput+0xd8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 80001fc:	6878      	ldr	r0, [r7, #4]
 80001fe:	f7ff ffb5 	bl	800016c <ReadPin>
 8000202:	4603      	mov	r3, r0
 8000204:	4619      	mov	r1, r3
 8000206:	4a2a      	ldr	r2, [pc, #168]	; (80002b0 <getKeyinput+0xe0>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800020e:	4a27      	ldr	r2, [pc, #156]	; (80002ac <getKeyinput+0xdc>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000216:	4924      	ldr	r1, [pc, #144]	; (80002a8 <getKeyinput+0xd8>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021e:	429a      	cmp	r2, r3
 8000220:	d136      	bne.n	8000290 <getKeyinput+0xc0>
 8000222:	4a21      	ldr	r2, [pc, #132]	; (80002a8 <getKeyinput+0xd8>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022a:	4921      	ldr	r1, [pc, #132]	; (80002b0 <getKeyinput+0xe0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000232:	429a      	cmp	r2, r3
 8000234:	d12c      	bne.n	8000290 <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 8000236:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <getKeyinput+0xe4>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <getKeyinput+0xe0>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000246:	429a      	cmp	r2, r3
 8000248:	d014      	beq.n	8000274 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <getKeyinput+0xe0>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000252:	4918      	ldr	r1, [pc, #96]	; (80002b4 <getKeyinput+0xe4>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 800025a:	4a16      	ldr	r2, [pc, #88]	; (80002b4 <getKeyinput+0xe4>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d114      	bne.n	8000290 <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <getKeyinput+0xe8>)
 8000268:	22c8      	movs	r2, #200	; 0xc8
 800026a:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ff6d 	bl	800014c <subKeyProcess>
 8000272:	e00d      	b.n	8000290 <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <getKeyinput+0xe8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3b01      	subs	r3, #1
 800027a:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <getKeyinput+0xe8>)
 800027c:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <getKeyinput+0xe8>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d104      	bne.n	8000290 <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <getKeyinput+0xe4>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2101      	movs	r1, #1
 800028c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b03      	cmp	r3, #3
 800029a:	dd9f      	ble.n	80001dc <getKeyinput+0xc>
				}
			}
		}
	}

}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000010 	.word	0x20000010
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000020 	.word	0x20000020
 80002b4:	20000030 	.word	0x20000030
 80002b8:	20000040 	.word	0x20000040

080002bc <fsm_auto>:
int green_time = 3;
int red_time_tmp = 0 ; // temp variable for red time length
int yellow_time_tmp = 0 ;
int green_time_tmp = 0 ;

void fsm_auto(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	switch (status){
 80002c0:	4b57      	ldr	r3, [pc, #348]	; (8000420 <fsm_auto+0x164>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3b5a      	subs	r3, #90	; 0x5a
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	f200 809e 	bhi.w	8000408 <fsm_auto+0x14c>
 80002cc:	a201      	add	r2, pc, #4	; (adr r2, 80002d4 <fsm_auto+0x18>)
 80002ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d2:	bf00      	nop
 80002d4:	080002e9 	.word	0x080002e9
 80002d8:	08000309 	.word	0x08000309
 80002dc:	08000345 	.word	0x08000345
 80002e0:	08000389 	.word	0x08000389
 80002e4:	080003c5 	.word	0x080003c5
	case INIT:
		red_time_tmp = red_time; // time length = 5s, start at 4 and end at 0
 80002e8:	4b4e      	ldr	r3, [pc, #312]	; (8000424 <fsm_auto+0x168>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a4e      	ldr	r2, [pc, #312]	; (8000428 <fsm_auto+0x16c>)
 80002ee:	6013      	str	r3, [r2, #0]
		green_time_tmp = green_time;
 80002f0:	4b4e      	ldr	r3, [pc, #312]	; (800042c <fsm_auto+0x170>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a4e      	ldr	r2, [pc, #312]	; (8000430 <fsm_auto+0x174>)
 80002f6:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 80002f8:	2100      	movs	r1, #0
 80002fa:	2064      	movs	r0, #100	; 0x64
 80002fc:	f000 fb04 	bl	8000908 <setTimer>
		status = AUTO_RED_GREEN;
 8000300:	4b47      	ldr	r3, [pc, #284]	; (8000420 <fsm_auto+0x164>)
 8000302:	225b      	movs	r2, #91	; 0x5b
 8000304:	601a      	str	r2, [r3, #0]
		break;
 8000306:	e088      	b.n	800041a <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 8000308:	4b4a      	ldr	r3, [pc, #296]	; (8000434 <fsm_auto+0x178>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d17d      	bne.n	800040c <fsm_auto+0x150>
			red_time_tmp --;
 8000310:	4b45      	ldr	r3, [pc, #276]	; (8000428 <fsm_auto+0x16c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3b01      	subs	r3, #1
 8000316:	4a44      	ldr	r2, [pc, #272]	; (8000428 <fsm_auto+0x16c>)
 8000318:	6013      	str	r3, [r2, #0]
			green_time_tmp --;
 800031a:	4b45      	ldr	r3, [pc, #276]	; (8000430 <fsm_auto+0x174>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	3b01      	subs	r3, #1
 8000320:	4a43      	ldr	r2, [pc, #268]	; (8000430 <fsm_auto+0x174>)
 8000322:	6013      	str	r3, [r2, #0]
			if (green_time_tmp == 0){
 8000324:	4b42      	ldr	r3, [pc, #264]	; (8000430 <fsm_auto+0x174>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d106      	bne.n	800033a <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 800032c:	4b3c      	ldr	r3, [pc, #240]	; (8000420 <fsm_auto+0x164>)
 800032e:	225c      	movs	r2, #92	; 0x5c
 8000330:	601a      	str	r2, [r3, #0]
				yellow_time_tmp = yellow_time;
 8000332:	4b41      	ldr	r3, [pc, #260]	; (8000438 <fsm_auto+0x17c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a41      	ldr	r2, [pc, #260]	; (800043c <fsm_auto+0x180>)
 8000338:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 800033a:	2100      	movs	r1, #0
 800033c:	2064      	movs	r0, #100	; 0x64
 800033e:	f000 fae3 	bl	8000908 <setTimer>
		}
		break;
 8000342:	e063      	b.n	800040c <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 8000344:	4b3b      	ldr	r3, [pc, #236]	; (8000434 <fsm_auto+0x178>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d161      	bne.n	8000410 <fsm_auto+0x154>
			red_time_tmp --;
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <fsm_auto+0x16c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3b01      	subs	r3, #1
 8000352:	4a35      	ldr	r2, [pc, #212]	; (8000428 <fsm_auto+0x16c>)
 8000354:	6013      	str	r3, [r2, #0]
			yellow_time_tmp --;
 8000356:	4b39      	ldr	r3, [pc, #228]	; (800043c <fsm_auto+0x180>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3b01      	subs	r3, #1
 800035c:	4a37      	ldr	r2, [pc, #220]	; (800043c <fsm_auto+0x180>)
 800035e:	6013      	str	r3, [r2, #0]
			if (yellow_time_tmp == 0){
 8000360:	4b36      	ldr	r3, [pc, #216]	; (800043c <fsm_auto+0x180>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d10a      	bne.n	800037e <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <fsm_auto+0x164>)
 800036a:	225d      	movs	r2, #93	; 0x5d
 800036c:	601a      	str	r2, [r3, #0]
				red_time_tmp = red_time;
 800036e:	4b2d      	ldr	r3, [pc, #180]	; (8000424 <fsm_auto+0x168>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a2d      	ldr	r2, [pc, #180]	; (8000428 <fsm_auto+0x16c>)
 8000374:	6013      	str	r3, [r2, #0]
				green_time_tmp = green_time;
 8000376:	4b2d      	ldr	r3, [pc, #180]	; (800042c <fsm_auto+0x170>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a2d      	ldr	r2, [pc, #180]	; (8000430 <fsm_auto+0x174>)
 800037c:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 800037e:	2100      	movs	r1, #0
 8000380:	2064      	movs	r0, #100	; 0x64
 8000382:	f000 fac1 	bl	8000908 <setTimer>
		}
		break;
 8000386:	e043      	b.n	8000410 <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <fsm_auto+0x178>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d141      	bne.n	8000414 <fsm_auto+0x158>
			red_time_tmp --;
 8000390:	4b25      	ldr	r3, [pc, #148]	; (8000428 <fsm_auto+0x16c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3b01      	subs	r3, #1
 8000396:	4a24      	ldr	r2, [pc, #144]	; (8000428 <fsm_auto+0x16c>)
 8000398:	6013      	str	r3, [r2, #0]
			green_time_tmp --;
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <fsm_auto+0x174>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3b01      	subs	r3, #1
 80003a0:	4a23      	ldr	r2, [pc, #140]	; (8000430 <fsm_auto+0x174>)
 80003a2:	6013      	str	r3, [r2, #0]
			if (green_time_tmp == 0){
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <fsm_auto+0x174>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d106      	bne.n	80003ba <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <fsm_auto+0x164>)
 80003ae:	225e      	movs	r2, #94	; 0x5e
 80003b0:	601a      	str	r2, [r3, #0]
				yellow_time_tmp = yellow_time;
 80003b2:	4b21      	ldr	r3, [pc, #132]	; (8000438 <fsm_auto+0x17c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a21      	ldr	r2, [pc, #132]	; (800043c <fsm_auto+0x180>)
 80003b8:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80003ba:	2100      	movs	r1, #0
 80003bc:	2064      	movs	r0, #100	; 0x64
 80003be:	f000 faa3 	bl	8000908 <setTimer>
		}
		break;
 80003c2:	e027      	b.n	8000414 <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <fsm_auto+0x178>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d125      	bne.n	8000418 <fsm_auto+0x15c>
			red_time_tmp --;
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <fsm_auto+0x16c>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3b01      	subs	r3, #1
 80003d2:	4a15      	ldr	r2, [pc, #84]	; (8000428 <fsm_auto+0x16c>)
 80003d4:	6013      	str	r3, [r2, #0]
			yellow_time_tmp --;
 80003d6:	4b19      	ldr	r3, [pc, #100]	; (800043c <fsm_auto+0x180>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4a17      	ldr	r2, [pc, #92]	; (800043c <fsm_auto+0x180>)
 80003de:	6013      	str	r3, [r2, #0]
			if (yellow_time_tmp == 0){
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <fsm_auto+0x180>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d10a      	bne.n	80003fe <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <fsm_auto+0x164>)
 80003ea:	225b      	movs	r2, #91	; 0x5b
 80003ec:	601a      	str	r2, [r3, #0]
				red_time_tmp  = red_time;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <fsm_auto+0x168>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a0d      	ldr	r2, [pc, #52]	; (8000428 <fsm_auto+0x16c>)
 80003f4:	6013      	str	r3, [r2, #0]
				green_time_tmp = green_time;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <fsm_auto+0x170>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <fsm_auto+0x174>)
 80003fc:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80003fe:	2100      	movs	r1, #0
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f000 fa81 	bl	8000908 <setTimer>
		}
		break;
 8000406:	e007      	b.n	8000418 <fsm_auto+0x15c>
	default: break;
 8000408:	bf00      	nop
 800040a:	e006      	b.n	800041a <fsm_auto+0x15e>
		break;
 800040c:	bf00      	nop
 800040e:	e004      	b.n	800041a <fsm_auto+0x15e>
		break;
 8000410:	bf00      	nop
 8000412:	e002      	b.n	800041a <fsm_auto+0x15e>
		break;
 8000414:	bf00      	nop
 8000416:	e000      	b.n	800041a <fsm_auto+0x15e>
		break;
 8000418:	bf00      	nop
	}
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000044 	.word	0x20000044
 8000424:	20000048 	.word	0x20000048
 8000428:	2000008c 	.word	0x2000008c
 800042c:	20000050 	.word	0x20000050
 8000430:	20000094 	.word	0x20000094
 8000434:	200000c0 	.word	0x200000c0
 8000438:	2000004c 	.word	0x2000004c
 800043c:	20000090 	.word	0x20000090

08000440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 fbb8 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f80e 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 f8be 	bl	80005cc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000450:	f000 f846 	bl	80004e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000454:	f000 f890 	bl	8000578 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000458:	4802      	ldr	r0, [pc, #8]	; (8000464 <main+0x24>)
 800045a:	f001 fbe1 	bl	8001c20 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
	  //test_IO();
	  	  fsm_auto();
 800045e:	f7ff ff2d 	bl	80002bc <fsm_auto>
 8000462:	e7fc      	b.n	800045e <main+0x1e>
 8000464:	200000e8 	.word	0x200000e8

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b090      	sub	sp, #64	; 0x40
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0318 	add.w	r3, r7, #24
 8000472:	2228      	movs	r2, #40	; 0x28
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f002 fcd6 	bl	8002e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048a:	2302      	movs	r3, #2
 800048c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048e:	2301      	movs	r3, #1
 8000490:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000492:	2310      	movs	r3, #16
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000496:	2300      	movs	r3, #0
 8000498:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	f107 0318 	add.w	r3, r7, #24
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 ff60 	bl	8001364 <HAL_RCC_OscConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004aa:	f000 f90b 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ae:	230f      	movs	r3, #15
 80004b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 f9cc 	bl	8001864 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004d2:	f000 f8f7 	bl	80006c4 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	; 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_TIM2_Init+0x94>)
 80004fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <MX_TIM2_Init+0x94>)
 8000506:	f242 720f 	movw	r2, #9999	; 0x270f
 800050a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_TIM2_Init+0x94>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_TIM2_Init+0x94>)
 8000514:	2207      	movs	r2, #7
 8000516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_TIM2_Init+0x94>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_TIM2_Init+0x94>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000524:	4813      	ldr	r0, [pc, #76]	; (8000574 <MX_TIM2_Init+0x94>)
 8000526:	f001 fb2b 	bl	8001b80 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000530:	f000 f8c8 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4619      	mov	r1, r3
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_TIM2_Init+0x94>)
 8000542:	f001 fcc7 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800054c:	f000 f8ba 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_TIM2_Init+0x94>)
 800055e:	f001 fe9d 	bl	800229c <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000568:	f000 f8ac 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000e8 	.word	0x200000e8

08000578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <MX_USART2_UART_Init+0x50>)
 8000580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000584:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_USART2_UART_Init+0x4c>)
 80005b0:	f001 fee4 	bl	800237c <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ba:	f000 f883 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000130 	.word	0x20000130
 80005c8:	40004400 	.word	0x40004400

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <MX_GPIO_Init+0xd0>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a2d      	ldr	r2, [pc, #180]	; (800069c <MX_GPIO_Init+0xd0>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <MX_GPIO_Init+0xd0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <MX_GPIO_Init+0xd0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <MX_GPIO_Init+0xd0>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <MX_GPIO_Init+0xd0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000616:	4822      	ldr	r0, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xd4>)
 8000618:	f000 fe8b 	bl	8001332 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000622:	4820      	ldr	r0, [pc, #128]	; (80006a4 <MX_GPIO_Init+0xd8>)
 8000624:	f000 fe85 	bl	8001332 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8000628:	2313      	movs	r3, #19
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4619      	mov	r1, r3
 800063a:	481a      	ldr	r0, [pc, #104]	; (80006a4 <MX_GPIO_Init+0xd8>)
 800063c:	f000 fcde 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000640:	2301      	movs	r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000648:	2301      	movs	r3, #1
 800064a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4619      	mov	r1, r3
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <MX_GPIO_Init+0xd4>)
 8000654:	f000 fcd2 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 8000658:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800065c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2302      	movs	r3, #2
 8000668:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <MX_GPIO_Init+0xd4>)
 8000672:	f000 fcc3 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 8000676:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800067a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2302      	movs	r3, #2
 8000686:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	4619      	mov	r1, r3
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_GPIO_Init+0xd8>)
 8000690:	f000 fcb4 	bl	8000ffc <HAL_GPIO_Init>

}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010c00 	.word	0x40010c00
 80006a4:	40010800 	.word	0x40010800

080006a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
 80006b0:	f000 f8a2 	bl	80007f8 <scanLed>
//	buzzerController(); // buzzer
	timerRun(); // software timer
 80006b4:	f000 f940 	bl	8000938 <timerRun>
	getKeyinput(); // button
 80006b8:	f7ff fd8a 	bl	80001d0 <getKeyinput>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <onRed_1>:
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
}
void onRed_1(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <onRed_1+0x20>)
 80006dc:	f000 fe29 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2108      	movs	r1, #8
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <onRed_1+0x24>)
 80006e6:	f000 fe24 	bl	8001332 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40010c00 	.word	0x40010c00

080006f8 <onYellow_1>:
void onYellow_1(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <onYellow_1+0x20>)
 8000704:	f000 fe15 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2108      	movs	r1, #8
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <onYellow_1+0x24>)
 800070e:	f000 fe10 	bl	8001332 <HAL_GPIO_WritePin>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40010800 	.word	0x40010800
 800071c:	40010c00 	.word	0x40010c00

08000720 <onGreen_1>:
void onGreen_1(){
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <onGreen_1+0x20>)
 800072c:	f000 fe01 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2108      	movs	r1, #8
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <onGreen_1+0x24>)
 8000736:	f000 fdfc 	bl	8001332 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40010800 	.word	0x40010800
 8000744:	40010c00 	.word	0x40010c00

08000748 <onRed_2>:
void onRed_2(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2120      	movs	r1, #32
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <onRed_2+0x1c>)
 8000752:	f000 fdee 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2110      	movs	r1, #16
 800075a:	4802      	ldr	r0, [pc, #8]	; (8000764 <onRed_2+0x1c>)
 800075c:	f000 fde9 	bl	8001332 <HAL_GPIO_WritePin>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40010c00 	.word	0x40010c00

08000768 <onYellow_2>:
void onYellow_2(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2120      	movs	r1, #32
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <onYellow_2+0x1c>)
 8000772:	f000 fdde 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2110      	movs	r1, #16
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <onYellow_2+0x1c>)
 800077c:	f000 fdd9 	bl	8001332 <HAL_GPIO_WritePin>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40010c00 	.word	0x40010c00

08000788 <onGreen_2>:
void onGreen_2(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2120      	movs	r1, #32
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <onGreen_2+0x1c>)
 8000792:	f000 fdce 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2110      	movs	r1, #16
 800079a:	4802      	ldr	r0, [pc, #8]	; (80007a4 <onGreen_2+0x1c>)
 800079c:	f000 fdc9 	bl	8001332 <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <onGreenPed>:

void onGreenPed(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <onGreenPed+0x20>)
 80007b4:	f000 fdbd 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <onGreenPed+0x24>)
 80007c0:	f000 fdb7 	bl	8001332 <HAL_GPIO_WritePin>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	40010800 	.word	0x40010800

080007d0 <onRedPed>:
void onRedPed(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <onRedPed+0x20>)
 80007dc:	f000 fda9 	bl	8001332 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <onRedPed+0x24>)
 80007e8:	f000 fda3 	bl	8001332 <HAL_GPIO_WritePin>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40010c00 	.word	0x40010c00
 80007f4:	40010800 	.word	0x40010800

080007f8 <scanLed>:
	HAL_GPIO_TogglePin(TL1A_GPIO_Port, TL1A_Pin);
	HAL_GPIO_TogglePin(TL1B_GPIO_Port, TL1B_Pin);
	HAL_GPIO_TogglePin(TL2A_GPIO_Port, TL2A_Pin);
	HAL_GPIO_TogglePin(TL2B_GPIO_Port, TL2B_Pin);
}
void scanLed(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	switch (status){
 80007fc:	4b40      	ldr	r3, [pc, #256]	; (8000900 <scanLed+0x108>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b5e      	cmp	r3, #94	; 0x5e
 8000802:	dc6c      	bgt.n	80008de <scanLed+0xe6>
 8000804:	2b5b      	cmp	r3, #91	; 0x5b
 8000806:	da08      	bge.n	800081a <scanLed+0x22>
 8000808:	2b16      	cmp	r3, #22
 800080a:	d05b      	beq.n	80008c4 <scanLed+0xcc>
 800080c:	2b16      	cmp	r3, #22
 800080e:	dc66      	bgt.n	80008de <scanLed+0xe6>
 8000810:	2b14      	cmp	r3, #20
 8000812:	d03d      	beq.n	8000890 <scanLed+0x98>
 8000814:	2b15      	cmp	r3, #21
 8000816:	d048      	beq.n	80008aa <scanLed+0xb2>
			onGreen_1();
			onGreen_2();
			setTimer(50,3);
		}
		break;
	default: break;
 8000818:	e061      	b.n	80008de <scanLed+0xe6>
 800081a:	3b5b      	subs	r3, #91	; 0x5b
 800081c:	2b03      	cmp	r3, #3
 800081e:	d85e      	bhi.n	80008de <scanLed+0xe6>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <scanLed+0x30>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000839 	.word	0x08000839
 800082c:	0800084f 	.word	0x0800084f
 8000830:	08000865 	.word	0x08000865
 8000834:	0800087b 	.word	0x0800087b
		onRed_1();
 8000838:	f7ff ff4a 	bl	80006d0 <onRed_1>
		onGreen_2();
 800083c:	f7ff ffa4 	bl	8000788 <onGreen_2>
		if(timer_flag[4] == 0){
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <scanLed+0x10c>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d14c      	bne.n	80008e2 <scanLed+0xea>
			onGreenPed();
 8000848:	f7ff ffae 	bl	80007a8 <onGreenPed>
		break;
 800084c:	e049      	b.n	80008e2 <scanLed+0xea>
		onRed_1();
 800084e:	f7ff ff3f 	bl	80006d0 <onRed_1>
		onYellow_2();
 8000852:	f7ff ff89 	bl	8000768 <onYellow_2>
		if(timer_flag[4] == 0){
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <scanLed+0x10c>)
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d143      	bne.n	80008e6 <scanLed+0xee>
			onGreenPed();
 800085e:	f7ff ffa3 	bl	80007a8 <onGreenPed>
		break;
 8000862:	e040      	b.n	80008e6 <scanLed+0xee>
		onGreen_1();
 8000864:	f7ff ff5c 	bl	8000720 <onGreen_1>
		onRed_2();
 8000868:	f7ff ff6e 	bl	8000748 <onRed_2>
		if(timer_flag[4] == 0){
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <scanLed+0x10c>)
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d13a      	bne.n	80008ea <scanLed+0xf2>
			onRedPed();
 8000874:	f7ff ffac 	bl	80007d0 <onRedPed>
		break;
 8000878:	e037      	b.n	80008ea <scanLed+0xf2>
		onYellow_1();
 800087a:	f7ff ff3d 	bl	80006f8 <onYellow_1>
		onRed_2();
 800087e:	f7ff ff63 	bl	8000748 <onRed_2>
		if(timer_flag[4] == 0){
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <scanLed+0x10c>)
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d131      	bne.n	80008ee <scanLed+0xf6>
			onRedPed();
 800088a:	f7ff ffa1 	bl	80007d0 <onRedPed>
		break;
 800088e:	e02e      	b.n	80008ee <scanLed+0xf6>
		if (timer_flag[3] == 1){
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <scanLed+0x10c>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d12c      	bne.n	80008f2 <scanLed+0xfa>
			onRed_1();
 8000898:	f7ff ff1a 	bl	80006d0 <onRed_1>
			onRed_2();
 800089c:	f7ff ff54 	bl	8000748 <onRed_2>
			setTimer(50,3);
 80008a0:	2103      	movs	r1, #3
 80008a2:	2032      	movs	r0, #50	; 0x32
 80008a4:	f000 f830 	bl	8000908 <setTimer>
		break;
 80008a8:	e023      	b.n	80008f2 <scanLed+0xfa>
		if (timer_flag[3] == 1){
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <scanLed+0x10c>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d121      	bne.n	80008f6 <scanLed+0xfe>
			onYellow_1();
 80008b2:	f7ff ff21 	bl	80006f8 <onYellow_1>
			onYellow_2();
 80008b6:	f7ff ff57 	bl	8000768 <onYellow_2>
			setTimer(50,3);
 80008ba:	2103      	movs	r1, #3
 80008bc:	2032      	movs	r0, #50	; 0x32
 80008be:	f000 f823 	bl	8000908 <setTimer>
		break;
 80008c2:	e018      	b.n	80008f6 <scanLed+0xfe>
		if (timer_flag[3] == 1){
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <scanLed+0x10c>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d116      	bne.n	80008fa <scanLed+0x102>
			onGreen_1();
 80008cc:	f7ff ff28 	bl	8000720 <onGreen_1>
			onGreen_2();
 80008d0:	f7ff ff5a 	bl	8000788 <onGreen_2>
			setTimer(50,3);
 80008d4:	2103      	movs	r1, #3
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f000 f816 	bl	8000908 <setTimer>
		break;
 80008dc:	e00d      	b.n	80008fa <scanLed+0x102>
	default: break;
 80008de:	bf00      	nop
 80008e0:	e00c      	b.n	80008fc <scanLed+0x104>
		break;
 80008e2:	bf00      	nop
 80008e4:	e00a      	b.n	80008fc <scanLed+0x104>
		break;
 80008e6:	bf00      	nop
 80008e8:	e008      	b.n	80008fc <scanLed+0x104>
		break;
 80008ea:	bf00      	nop
 80008ec:	e006      	b.n	80008fc <scanLed+0x104>
		break;
 80008ee:	bf00      	nop
 80008f0:	e004      	b.n	80008fc <scanLed+0x104>
		break;
 80008f2:	bf00      	nop
 80008f4:	e002      	b.n	80008fc <scanLed+0x104>
		break;
 80008f6:	bf00      	nop
 80008f8:	e000      	b.n	80008fc <scanLed+0x104>
		break;
 80008fa:	bf00      	nop
	}
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000044 	.word	0x20000044
 8000904:	200000c0 	.word	0x200000c0

08000908 <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 8000912:	4907      	ldr	r1, [pc, #28]	; (8000930 <setTimer+0x28>)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 800091c:	4a05      	ldr	r2, [pc, #20]	; (8000934 <setTimer+0x2c>)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	2100      	movs	r1, #0
 8000922:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	20000098 	.word	0x20000098
 8000934:	200000c0 	.word	0x200000c0

08000938 <timerRun>:

void timerRun(){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e01c      	b.n	800097e <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <timerRun+0x58>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	2b00      	cmp	r3, #0
 800094e:	dd13      	ble.n	8000978 <timerRun+0x40>
			timer_counter[i]--;
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <timerRun+0x58>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <timerRun+0x58>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <timerRun+0x58>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d104      	bne.n	8000978 <timerRun+0x40>
				timer_flag [i] = 1;
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <timerRun+0x5c>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2101      	movs	r1, #1
 8000974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3301      	adds	r3, #1
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b09      	cmp	r3, #9
 8000982:	dddf      	ble.n	8000944 <timerRun+0xc>
			}
		}
	}
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000098 	.word	0x20000098
 8000994:	200000c0 	.word	0x200000c0

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_MspInit+0x5c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <HAL_MspInit+0x5c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_MspInit+0x5c>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x5c>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x5c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x5c>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_MspInit+0x60>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_MspInit+0x60>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010000 	.word	0x40010000

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a0c:	d113      	bne.n	8000a36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <HAL_TIM_Base_MspInit+0x44>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	201c      	movs	r0, #28
 8000a2c:	f000 f9fd 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a30:	201c      	movs	r0, #28
 8000a32:	f000 fa16 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_UART_MspInit+0x98>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d137      	bne.n	8000ad4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <HAL_UART_MspInit+0x9c>)
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_UART_MspInit+0x9c>)
 8000a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6e:	61d3      	str	r3, [r2, #28]
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x9c>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x9c>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x9c>)
 8000a82:	f043 0304 	orr.w	r3, r3, #4
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x9c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a94:	2304      	movs	r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <HAL_UART_MspInit+0xa0>)
 8000aa8:	f000 faa8 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aac:	2308      	movs	r3, #8
 8000aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_UART_MspInit+0xa0>)
 8000ac0:	f000 fa9c 	bl	8000ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2026      	movs	r0, #38	; 0x26
 8000aca:	f000 f9ae 	bl	8000e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ace:	2026      	movs	r0, #38	; 0x26
 8000ad0:	f000 f9c7 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 f889 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM2_IRQHandler+0x10>)
 8000b3e:	f001 f8c1 	bl	8001cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000e8 	.word	0x200000e8

08000b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <USART2_IRQHandler+0x10>)
 8000b52:	f001 fc63 	bl	800241c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000130 	.word	0x20000130

08000b60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b6c:	f7ff fff8 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b72:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b88:	4c09      	ldr	r4, [pc, #36]	; (8000bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b96:	f002 f923 	bl	8002de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9a:	f7ff fc51 	bl	8000440 <main>
  bx lr
 8000b9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ba8:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 8000bac:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bb0:	2000017c 	.word	0x2000017c

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x28>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x28>)
 8000bc2:	f043 0310 	orr.w	r3, r3, #16
 8000bc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f923 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f000 f808 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fee0 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40022000 	.word	0x40022000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_InitTick+0x54>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x58>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f93b 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00e      	b.n	8000c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d80a      	bhi.n	8000c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f000 f903 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_InitTick+0x5c>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000054 	.word	0x20000054
 8000c3c:	2000005c 	.word	0x2000005c
 8000c40:	20000058 	.word	0x20000058

08000c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x1c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x20>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <HAL_IncTick+0x20>)
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	2000005c 	.word	0x2000005c
 8000c64:	20000178 	.word	0x20000178

08000c68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <HAL_GetTick+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	20000178 	.word	0x20000178

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4906      	ldr	r1, [pc, #24]	; (8000d14 <__NVIC_EnableIRQ+0x34>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff90 	bl	8000d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff2d 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff42 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff90 	bl	8000d6c <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5f 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff35 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d008      	beq.n	8000ec0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e020      	b.n	8000f02 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 020e 	bic.w	r2, r2, #14
 8000ece:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0201 	bic.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d005      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2204      	movs	r2, #4
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e051      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 020e 	bic.w	r2, r2, #14
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <HAL_DMA_Abort_IT+0xd4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d029      	beq.n	8000fae <HAL_DMA_Abort_IT+0xa2>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <HAL_DMA_Abort_IT+0xd8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d022      	beq.n	8000faa <HAL_DMA_Abort_IT+0x9e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_DMA_Abort_IT+0xdc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01a      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0x98>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <HAL_DMA_Abort_IT+0xe0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d012      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x92>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_DMA_Abort_IT+0xe4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00a      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x8c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_DMA_Abort_IT+0xe8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d102      	bne.n	8000f92 <HAL_DMA_Abort_IT+0x86>
 8000f8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f90:	e00e      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f96:	e00b      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9c:	e008      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa2:	e005      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	e002      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000faa:	2310      	movs	r3, #16
 8000fac:	e000      	b.n	8000fb0 <HAL_DMA_Abort_IT+0xa4>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <HAL_DMA_Abort_IT+0xec>)
 8000fb2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
    } 
  }
  return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40020008 	.word	0x40020008
 8000fe4:	4002001c 	.word	0x4002001c
 8000fe8:	40020030 	.word	0x40020030
 8000fec:	40020044 	.word	0x40020044
 8000ff0:	40020058 	.word	0x40020058
 8000ff4:	4002006c 	.word	0x4002006c
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b08b      	sub	sp, #44	; 0x2c
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	e169      	b.n	80012e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001010:	2201      	movs	r2, #1
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8158 	bne.w	80012de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a9a      	ldr	r2, [pc, #616]	; (800129c <HAL_GPIO_Init+0x2a0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d05e      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001038:	4a98      	ldr	r2, [pc, #608]	; (800129c <HAL_GPIO_Init+0x2a0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d875      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800103e:	4a98      	ldr	r2, [pc, #608]	; (80012a0 <HAL_GPIO_Init+0x2a4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d058      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001044:	4a96      	ldr	r2, [pc, #600]	; (80012a0 <HAL_GPIO_Init+0x2a4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d86f      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800104a:	4a96      	ldr	r2, [pc, #600]	; (80012a4 <HAL_GPIO_Init+0x2a8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d052      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001050:	4a94      	ldr	r2, [pc, #592]	; (80012a4 <HAL_GPIO_Init+0x2a8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d869      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001056:	4a94      	ldr	r2, [pc, #592]	; (80012a8 <HAL_GPIO_Init+0x2ac>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d04c      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 800105c:	4a92      	ldr	r2, [pc, #584]	; (80012a8 <HAL_GPIO_Init+0x2ac>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d863      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001062:	4a92      	ldr	r2, [pc, #584]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d046      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001068:	4a90      	ldr	r2, [pc, #576]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d85d      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800106e:	2b12      	cmp	r3, #18
 8001070:	d82a      	bhi.n	80010c8 <HAL_GPIO_Init+0xcc>
 8001072:	2b12      	cmp	r3, #18
 8001074:	d859      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <HAL_GPIO_Init+0x80>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010f7 	.word	0x080010f7
 8001080:	080010d1 	.word	0x080010d1
 8001084:	080010e3 	.word	0x080010e3
 8001088:	08001125 	.word	0x08001125
 800108c:	0800112b 	.word	0x0800112b
 8001090:	0800112b 	.word	0x0800112b
 8001094:	0800112b 	.word	0x0800112b
 8001098:	0800112b 	.word	0x0800112b
 800109c:	0800112b 	.word	0x0800112b
 80010a0:	0800112b 	.word	0x0800112b
 80010a4:	0800112b 	.word	0x0800112b
 80010a8:	0800112b 	.word	0x0800112b
 80010ac:	0800112b 	.word	0x0800112b
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	0800112b 	.word	0x0800112b
 80010b8:	0800112b 	.word	0x0800112b
 80010bc:	0800112b 	.word	0x0800112b
 80010c0:	080010d9 	.word	0x080010d9
 80010c4:	080010ed 	.word	0x080010ed
 80010c8:	4a79      	ldr	r2, [pc, #484]	; (80012b0 <HAL_GPIO_Init+0x2b4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ce:	e02c      	b.n	800112a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e029      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	3304      	adds	r3, #4
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e024      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	3308      	adds	r3, #8
 80010e8:	623b      	str	r3, [r7, #32]
          break;
 80010ea:	e01f      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	330c      	adds	r3, #12
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	e01a      	b.n	800112c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010fe:	2304      	movs	r3, #4
 8001100:	623b      	str	r3, [r7, #32]
          break;
 8001102:	e013      	b.n	800112c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d105      	bne.n	8001118 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800110c:	2308      	movs	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	611a      	str	r2, [r3, #16]
          break;
 8001116:	e009      	b.n	800112c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	615a      	str	r2, [r3, #20]
          break;
 8001122:	e003      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x130>
          break;
 800112a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2bff      	cmp	r3, #255	; 0xff
 8001130:	d801      	bhi.n	8001136 <HAL_GPIO_Init+0x13a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	e001      	b.n	800113a <HAL_GPIO_Init+0x13e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3304      	adds	r3, #4
 800113a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d802      	bhi.n	8001148 <HAL_GPIO_Init+0x14c>
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0x152>
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3b08      	subs	r3, #8
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	210f      	movs	r1, #15
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	6a39      	ldr	r1, [r7, #32]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80b1 	beq.w	80012de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_GPIO_Init+0x2bc>)
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a40      	ldr	r2, [pc, #256]	; (80012bc <HAL_GPIO_Init+0x2c0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_GPIO_Init+0x2c4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1e8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <HAL_GPIO_Init+0x2c8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <HAL_GPIO_Init+0x2cc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1e0>
 80011d8:	2303      	movs	r3, #3
 80011da:	e006      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011dc:	2304      	movs	r3, #4
 80011de:	e004      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e8:	2300      	movs	r3, #0
 80011ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011fa:	492f      	ldr	r1, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x2bc>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	492c      	ldr	r1, [pc, #176]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4928      	ldr	r1, [pc, #160]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800122c:	4013      	ands	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	4922      	ldr	r1, [pc, #136]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	60cb      	str	r3, [r1, #12]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	491e      	ldr	r1, [pc, #120]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001254:	4013      	ands	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4918      	ldr	r1, [pc, #96]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	4914      	ldr	r1, [pc, #80]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800127c:	4013      	ands	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d021      	beq.n	80012d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
 8001298:	e021      	b.n	80012de <HAL_GPIO_Init+0x2e2>
 800129a:	bf00      	nop
 800129c:	10320000 	.word	0x10320000
 80012a0:	10310000 	.word	0x10310000
 80012a4:	10220000 	.word	0x10220000
 80012a8:	10210000 	.word	0x10210000
 80012ac:	10120000 	.word	0x10120000
 80012b0:	10110000 	.word	0x10110000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40011400 	.word	0x40011400
 80012cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4909      	ldr	r1, [pc, #36]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012da:	4013      	ands	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	fa22 f303 	lsr.w	r3, r2, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f47f ae8e 	bne.w	8001010 <HAL_GPIO_Init+0x14>
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	372c      	adds	r7, #44	; 0x2c
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e001      	b.n	8001326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	807b      	strh	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001342:	787b      	ldrb	r3, [r7, #1]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001348:	887a      	ldrh	r2, [r7, #2]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800134e:	e003      	b.n	8001358 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	041a      	lsls	r2, r3, #16
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e26c      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8087 	beq.w	8001492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001384:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b04      	cmp	r3, #4
 800138e:	d00c      	beq.n	80013aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001390:	4b8f      	ldr	r3, [pc, #572]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d112      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
 800139c:	4b8c      	ldr	r3, [pc, #560]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a8:	d10b      	bne.n	80013c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	4b89      	ldr	r3, [pc, #548]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d06c      	beq.n	8001490 <HAL_RCC_OscConfig+0x12c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d168      	bne.n	8001490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e246      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x76>
 80013cc:	4b80      	ldr	r3, [pc, #512]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a7f      	ldr	r2, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e02e      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b7b      	ldr	r3, [pc, #492]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7a      	ldr	r2, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a77      	ldr	r2, [pc, #476]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0xbc>
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a71      	ldr	r2, [pc, #452]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6e      	ldr	r2, [pc, #440]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xd4>
 8001420:	4b6b      	ldr	r3, [pc, #428]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b68      	ldr	r3, [pc, #416]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a67      	ldr	r2, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fc12 	bl	8000c68 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fc0e 	bl	8000c68 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1fa      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xe4>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fbfe 	bl	8000c68 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fbfa 	bl	8000c68 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1e6      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x10c>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
 80014b6:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1ba      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4939      	ldr	r1, [pc, #228]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fbb3 	bl	8000c68 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fbaf 	bl	8000c68 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e19b      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4927      	ldr	r1, [pc, #156]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_RCC_OscConfig+0x270>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb92 	bl	8000c68 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fb8e 	bl	8000c68 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e17a      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d03a      	beq.n	80015e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d019      	beq.n	80015ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001580:	f7ff fb72 	bl	8000c68 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fb6e 	bl	8000c68 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e15a      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f000 facc 	bl	8001b44 <RCC_Delay>
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_RCC_OscConfig+0x274>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb58 	bl	8000c68 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ba:	e00f      	b.n	80015dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb54 	bl	8000c68 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d908      	bls.n	80015dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e140      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	42420000 	.word	0x42420000
 80015d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e9      	bne.n	80015bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a6 	beq.w	8001742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fa:	4b97      	ldr	r3, [pc, #604]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10d      	bne.n	8001622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a93      	ldr	r2, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b91      	ldr	r3, [pc, #580]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b8e      	ldr	r3, [pc, #568]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b8b      	ldr	r3, [pc, #556]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a8a      	ldr	r2, [pc, #552]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff fb15 	bl	8000c68 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff fb11 	bl	8000c68 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	; 0x64
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e0fd      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x4f8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x312>
 8001668:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a7a      	ldr	r2, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6213      	str	r3, [r2, #32]
 8001674:	e02d      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x334>
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a75      	ldr	r2, [pc, #468]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b73      	ldr	r3, [pc, #460]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a72      	ldr	r2, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	e01c      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b05      	cmp	r3, #5
 800169e:	d10c      	bne.n	80016ba <HAL_RCC_OscConfig+0x356>
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a6c      	ldr	r2, [pc, #432]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	4b6a      	ldr	r3, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a69      	ldr	r2, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	e00b      	b.n	80016d2 <HAL_RCC_OscConfig+0x36e>
 80016ba:	4b67      	ldr	r3, [pc, #412]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	4a66      	ldr	r2, [pc, #408]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6213      	str	r3, [r2, #32]
 80016c6:	4b64      	ldr	r3, [pc, #400]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a63      	ldr	r2, [pc, #396]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fac5 	bl	8000c68 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fac1 	bl	8000c68 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0ab      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	4b57      	ldr	r3, [pc, #348]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ee      	beq.n	80016e2 <HAL_RCC_OscConfig+0x37e>
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff faaf 	bl	8000c68 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800170e:	f7ff faab 	bl	8000c68 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f241 3288 	movw	r2, #5000	; 0x1388
 800171c:	4293      	cmp	r3, r2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e095      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ee      	bne.n	800170e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001736:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a47      	ldr	r2, [pc, #284]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8081 	beq.w	800184e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174c:	4b42      	ldr	r3, [pc, #264]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d061      	beq.n	800181c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d146      	bne.n	80017ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fa7f 	bl	8000c68 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fa7b 	bl	8000c68 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e067      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001780:	4b35      	ldr	r3, [pc, #212]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	492d      	ldr	r1, [pc, #180]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a19      	ldr	r1, [r3, #32]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	430b      	orrs	r3, r1
 80017ba:	4927      	ldr	r1, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa4f 	bl	8000c68 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fa4b 	bl	8000c68 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e037      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e0:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x46a>
 80017ec:	e02f      	b.n	800184e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_RCC_OscConfig+0x4fc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa38 	bl	8000c68 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fa34 	bl	8000c68 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e020      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x498>
 800181a:	e018      	b.n	800184e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e013      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	429a      	cmp	r2, r3
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	40007000 	.word	0x40007000
 8001860:	42420060 	.word	0x42420060

08001864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0d0      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 0207 	bic.w	r2, r3, #7
 800188e:	4965      	ldr	r1, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0b8      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a58      	ldr	r2, [pc, #352]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e4:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	494d      	ldr	r1, [pc, #308]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d040      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e07f      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e073      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e06b      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff f988 	bl	8000c68 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff f984 	bl	8000c68 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e053      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d210      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4922      	ldr	r1, [pc, #136]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e032      	b.n	8001a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4916      	ldr	r1, [pc, #88]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490e      	ldr	r1, [pc, #56]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f2:	f000 f821 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490a      	ldr	r1, [pc, #40]	; (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1cc>)
 8001a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1d0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f8e6 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08002e50 	.word	0x08002e50
 8001a30:	20000054 	.word	0x20000054
 8001a34:	20000058 	.word	0x20000058

08001a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x30>
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x36>
 8001a66:	e027      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a6a:	613b      	str	r3, [r7, #16]
      break;
 8001a6c:	e027      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	0c9b      	lsrs	r3, r3, #18
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d010      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0c5b      	lsrs	r3, r3, #17
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a9a:	fb02 f203 	mul.w	r2, r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e004      	b.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	613b      	str	r3, [r7, #16]
      break;
 8001ab6:	e002      	b.n	8001abe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aba:	613b      	str	r3, [r7, #16]
      break;
 8001abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001abe:	693b      	ldr	r3, [r7, #16]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	007a1200 	.word	0x007a1200
 8001ad4:	08002e68 	.word	0x08002e68
 8001ad8:	08002e78 	.word	0x08002e78
 8001adc:	003d0900 	.word	0x003d0900

08001ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000054 	.word	0x20000054

08001af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af8:	f7ff fff2 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08002e60 	.word	0x08002e60

08001b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0adb      	lsrs	r3, r3, #11
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08002e60 	.word	0x08002e60

08001b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <RCC_Delay+0x34>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <RCC_Delay+0x38>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0a5b      	lsrs	r3, r3, #9
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b60:	bf00      	nop
  }
  while (Delay --);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1e5a      	subs	r2, r3, #1
 8001b66:	60fa      	str	r2, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f9      	bne.n	8001b60 <RCC_Delay+0x1c>
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000054 	.word	0x20000054
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e041      	b.n	8001c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d106      	bne.n	8001bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe ff28 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	f000 fa74 	bl	80020ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e03a      	b.n	8001cae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0201 	orr.w	r2, r2, #1
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_TIM_Base_Start_IT+0x98>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00e      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x58>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c62:	d009      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x58>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_TIM_Base_Start_IT+0x9c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d004      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x58>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d010      	beq.n	8001cac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9a:	e007      	b.n	8001cac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40012c00 	.word	0x40012c00
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f9b4 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f9a7 	bl	8002062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f9b6 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0204 	mvn.w	r2, #4
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f98a 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f97d 	bl	8002062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f98c 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0208 	mvn.w	r2, #8
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f960 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f953 	bl	8002062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f962 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	d122      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b10      	cmp	r3, #16
 8001de2:	d11b      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0210 	mvn.w	r2, #16
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2208      	movs	r2, #8
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f936 	bl	8002074 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f929 	bl	8002062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f938 	bl	8002086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d10e      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0201 	mvn.w	r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fc30 	bl	80006a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d107      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fa7b 	bl	800236a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7e:	2b40      	cmp	r3, #64	; 0x40
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8fc 	bl	8002098 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0220 	mvn.w	r2, #32
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fa46 	bl	8002358 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0b4      	b.n	800205a <HAL_TIM_ConfigClockSource+0x186>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f28:	d03e      	beq.n	8001fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8001f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2e:	f200 8087 	bhi.w	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f36:	f000 8086 	beq.w	8002046 <HAL_TIM_ConfigClockSource+0x172>
 8001f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3e:	d87f      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d01a      	beq.n	8001f7a <HAL_TIM_ConfigClockSource+0xa6>
 8001f44:	2b70      	cmp	r3, #112	; 0x70
 8001f46:	d87b      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f48:	2b60      	cmp	r3, #96	; 0x60
 8001f4a:	d050      	beq.n	8001fee <HAL_TIM_ConfigClockSource+0x11a>
 8001f4c:	2b60      	cmp	r3, #96	; 0x60
 8001f4e:	d877      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f50:	2b50      	cmp	r3, #80	; 0x50
 8001f52:	d03c      	beq.n	8001fce <HAL_TIM_ConfigClockSource+0xfa>
 8001f54:	2b50      	cmp	r3, #80	; 0x50
 8001f56:	d873      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f58:	2b40      	cmp	r3, #64	; 0x40
 8001f5a:	d058      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x13a>
 8001f5c:	2b40      	cmp	r3, #64	; 0x40
 8001f5e:	d86f      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f60:	2b30      	cmp	r3, #48	; 0x30
 8001f62:	d064      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x15a>
 8001f64:	2b30      	cmp	r3, #48	; 0x30
 8001f66:	d86b      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d060      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x15a>
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d867      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d05c      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x15a>
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d05a      	beq.n	800202e <HAL_TIM_ConfigClockSource+0x15a>
 8001f78:	e062      	b.n	8002040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f000 f968 	bl	800225e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	609a      	str	r2, [r3, #8]
      break;
 8001fa6:	e04f      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6899      	ldr	r1, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f000 f951 	bl	800225e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fca:	609a      	str	r2, [r3, #8]
      break;
 8001fcc:	e03c      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f000 f8c8 	bl	8002170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2150      	movs	r1, #80	; 0x50
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f91f 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 8001fec:	e02c      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	f000 f8e6 	bl	80021cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2160      	movs	r1, #96	; 0x60
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f90f 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 800200c:	e01c      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	461a      	mov	r2, r3
 800201c:	f000 f8a8 	bl	8002170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2140      	movs	r1, #64	; 0x40
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f8ff 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 800202c:	e00c      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4610      	mov	r0, r2
 800203a:	f000 f8f6 	bl	800222a <TIM_ITRx_SetConfig>
      break;
 800203e:	e003      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e000      	b.n	8002048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a29      	ldr	r2, [pc, #164]	; (8002164 <TIM_Base_SetConfig+0xb8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00b      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ca:	d007      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a26      	ldr	r2, [pc, #152]	; (8002168 <TIM_Base_SetConfig+0xbc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a25      	ldr	r2, [pc, #148]	; (800216c <TIM_Base_SetConfig+0xc0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d108      	bne.n	80020ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <TIM_Base_SetConfig+0xb8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00b      	beq.n	800210e <TIM_Base_SetConfig+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d007      	beq.n	800210e <TIM_Base_SetConfig+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <TIM_Base_SetConfig+0xbc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <TIM_Base_SetConfig+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <TIM_Base_SetConfig+0xc0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <TIM_Base_SetConfig+0xb8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d103      	bne.n	8002154 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	615a      	str	r2, [r3, #20]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800

08002170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	f023 0201 	bic.w	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800219a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 030a 	bic.w	r3, r3, #10
 80021ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	621a      	str	r2, [r3, #32]
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	f023 0210 	bic.w	r2, r3, #16
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	031b      	lsls	r3, r3, #12
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002208:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	f043 0307 	orr.w	r3, r3, #7
 800224c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002278:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4313      	orrs	r3, r2
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e046      	b.n	8002342 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a16      	ldr	r2, [pc, #88]	; (800234c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00e      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d009      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a10      	ldr	r2, [pc, #64]	; (8002354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10c      	bne.n	8002330 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800231c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	4313      	orrs	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800

08002358 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr

0800236a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e042      	b.n	8002414 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fb4e 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2224      	movs	r2, #36	; 0x24
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fc7f 	bl	8002cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0ba      	sub	sp, #232	; 0xe8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800245a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
 800246e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fb63 	bl	8002b46 <UART_Receive_IT>
      return;
 8002480:	e25b      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80de 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
 800248c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80d1 	beq.w	8002648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
 80024b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
 80024d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f043 0202 	orr.w	r2, r3, #2
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d011      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800252a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f043 0208 	orr.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 81f2 	beq.w	8002930 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800254c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
 8002558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 faee 	bl	8002b46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_UART_IRQHandler+0x17a>
 800258e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d04f      	beq.n	8002636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9f8 	bl	800298c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d041      	beq.n	800262e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3314      	adds	r3, #20
 80025b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1d9      	bne.n	80025aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d013      	beq.n	8002626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002602:	4a7e      	ldr	r2, [pc, #504]	; (80027fc <HAL_UART_IRQHandler+0x3e0>)
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fc7e 	bl	8000f0c <HAL_DMA_Abort_IT>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002620:	4610      	mov	r0, r2
 8002622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002624:	e00e      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f99c 	bl	8002964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800262c:	e00a      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f998 	bl	8002964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002634:	e006      	b.n	8002644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f994 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002642:	e175      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002644:	bf00      	nop
    return;
 8002646:	e173      	b.n	8002930 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 814f 	bne.w	80028f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8148 	beq.w	80028f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8141 	beq.w	80028f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80b6 	beq.w	8002800 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8145 	beq.w	8002934 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026b2:	429a      	cmp	r2, r3
 80026b4:	f080 813e 	bcs.w	8002934 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	f000 8088 	beq.w	80027dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	330c      	adds	r3, #12
 80026d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002704:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002708:	e841 2300 	strex	r3, r2, [r1]
 800270c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1d9      	bne.n	80026cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3314      	adds	r3, #20
 800271e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002722:	e853 3f00 	ldrex	r3, [r3]
 8002726:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	3314      	adds	r3, #20
 8002738:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800273c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002740:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002744:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002748:	e841 2300 	strex	r3, r2, [r1]
 800274c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800274e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1e1      	bne.n	8002718 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3314      	adds	r3, #20
 800275a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275e:	e853 3f00 	ldrex	r3, [r3]
 8002762:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800276a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3314      	adds	r3, #20
 8002774:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002778:	66fa      	str	r2, [r7, #108]	; 0x6c
 800277a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800277e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002780:	e841 2300 	strex	r3, r2, [r1]
 8002784:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e3      	bne.n	8002754 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	330c      	adds	r3, #12
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	e853 3f00 	ldrex	r3, [r3]
 80027a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ac:	f023 0310 	bic.w	r3, r3, #16
 80027b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	330c      	adds	r3, #12
 80027ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027be:	65ba      	str	r2, [r7, #88]	; 0x58
 80027c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e3      	bne.n	800279a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fb5d 	bl	8000e96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f8bf 	bl	8002976 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f8:	e09c      	b.n	8002934 <HAL_UART_IRQHandler+0x518>
 80027fa:	bf00      	nop
 80027fc:	08002a51 	.word	0x08002a51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002808:	b29b      	uxth	r3, r3
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 808e 	beq.w	8002938 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800281c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8089 	beq.w	8002938 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800283c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800284a:	647a      	str	r2, [r7, #68]	; 0x44
 800284c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e3      	bne.n	8002826 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3314      	adds	r3, #20
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	623b      	str	r3, [r7, #32]
   return(result);
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3314      	adds	r3, #20
 800287e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002882:	633a      	str	r2, [r7, #48]	; 0x30
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e3      	bne.n	800285e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	e853 3f00 	ldrex	r3, [r3]
 80028b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0310 	bic.w	r3, r3, #16
 80028ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028c8:	61fa      	str	r2, [r7, #28]
 80028ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028cc:	69b9      	ldr	r1, [r7, #24]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	e841 2300 	strex	r3, r2, [r1]
 80028d4:	617b      	str	r3, [r7, #20]
   return(result);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e3      	bne.n	80028a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f844 	bl	8002976 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028ee:	e023      	b.n	8002938 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_UART_IRQHandler+0x4f4>
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f8b5 	bl	8002a78 <UART_Transmit_IT>
    return;
 800290e:	e014      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <HAL_UART_IRQHandler+0x51e>
 800291c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8f4 	bl	8002b16 <UART_EndTransmit_IT>
    return;
 800292e:	e004      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
    return;
 8002930:	bf00      	nop
 8002932:	e002      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
      return;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_UART_IRQHandler+0x51e>
      return;
 8002938:	bf00      	nop
  }
}
 800293a:	37e8      	adds	r7, #232	; 0xe8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b095      	sub	sp, #84	; 0x54
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029b4:	643a      	str	r2, [r7, #64]	; 0x40
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e5      	bne.n	8002994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d119      	bne.n	8002a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	613b      	str	r3, [r7, #16]
   return(result);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a46:	bf00      	nop
 8002a48:	3754      	adds	r7, #84	; 0x54
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff ff7a 	bl	8002964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b21      	cmp	r3, #33	; 0x21
 8002a8a:	d13e      	bne.n	8002b0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a94:	d114      	bne.n	8002ac0 <UART_Transmit_IT+0x48>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d110      	bne.n	8002ac0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	1c9a      	adds	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	621a      	str	r2, [r3, #32]
 8002abe:	e008      	b.n	8002ad2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	1c59      	adds	r1, r3, #1
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6211      	str	r1, [r2, #32]
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
  }
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ff02 	bl	8002940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b08c      	sub	sp, #48	; 0x30
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b22      	cmp	r3, #34	; 0x22
 8002b58:	f040 80ae 	bne.w	8002cb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b64:	d117      	bne.n	8002b96 <UART_Receive_IT+0x50>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d113      	bne.n	8002b96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	1c9a      	adds	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
 8002b94:	e026      	b.n	8002be4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba8:	d007      	beq.n	8002bba <UART_Receive_IT+0x74>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <UART_Receive_IT+0x82>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e008      	b.n	8002bda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d15d      	bne.n	8002cb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0220 	bic.w	r2, r2, #32
 8002c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d135      	bne.n	8002caa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	613b      	str	r3, [r7, #16]
   return(result);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f023 0310 	bic.w	r3, r3, #16
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	623a      	str	r2, [r7, #32]
 8002c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	69f9      	ldr	r1, [r7, #28]
 8002c6a:	6a3a      	ldr	r2, [r7, #32]
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d10a      	bne.n	8002c9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fe67 	bl	8002976 <HAL_UARTEx_RxEventCallback>
 8002ca8:	e002      	b.n	8002cb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fe51 	bl	8002952 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e002      	b.n	8002cba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3730      	adds	r7, #48	; 0x30
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002cfe:	f023 030c 	bic.w	r3, r3, #12
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <UART_SetConfig+0x114>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d2c:	f7fe fef6 	bl	8001b1c <HAL_RCC_GetPCLK2Freq>
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	e002      	b.n	8002d3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7fe fede 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8002d38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	009a      	lsls	r2, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <UART_SetConfig+0x118>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	0119      	lsls	r1, r3, #4
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009a      	lsls	r2, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <UART_SetConfig+0x118>)
 8002d72:	fba3 0302 	umull	r0, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2064      	movs	r0, #100	; 0x64
 8002d7a:	fb00 f303 	mul.w	r3, r0, r3
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	3332      	adds	r3, #50	; 0x32
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <UART_SetConfig+0x118>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d90:	4419      	add	r1, r3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <UART_SetConfig+0x118>)
 8002daa:	fba3 0302 	umull	r0, r3, r3, r2
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2064      	movs	r0, #100	; 0x64
 8002db2:	fb00 f303 	mul.w	r3, r0, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	3332      	adds	r3, #50	; 0x32
 8002dbc:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <UART_SetConfig+0x118>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	f003 020f 	and.w	r2, r3, #15
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	440a      	add	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	51eb851f 	.word	0x51eb851f

08002de0 <__libc_init_array>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	2600      	movs	r6, #0
 8002de4:	4d0c      	ldr	r5, [pc, #48]	; (8002e18 <__libc_init_array+0x38>)
 8002de6:	4c0d      	ldr	r4, [pc, #52]	; (8002e1c <__libc_init_array+0x3c>)
 8002de8:	1b64      	subs	r4, r4, r5
 8002dea:	10a4      	asrs	r4, r4, #2
 8002dec:	42a6      	cmp	r6, r4
 8002dee:	d109      	bne.n	8002e04 <__libc_init_array+0x24>
 8002df0:	f000 f822 	bl	8002e38 <_init>
 8002df4:	2600      	movs	r6, #0
 8002df6:	4d0a      	ldr	r5, [pc, #40]	; (8002e20 <__libc_init_array+0x40>)
 8002df8:	4c0a      	ldr	r4, [pc, #40]	; (8002e24 <__libc_init_array+0x44>)
 8002dfa:	1b64      	subs	r4, r4, r5
 8002dfc:	10a4      	asrs	r4, r4, #2
 8002dfe:	42a6      	cmp	r6, r4
 8002e00:	d105      	bne.n	8002e0e <__libc_init_array+0x2e>
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
 8002e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e08:	4798      	blx	r3
 8002e0a:	3601      	adds	r6, #1
 8002e0c:	e7ee      	b.n	8002dec <__libc_init_array+0xc>
 8002e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e12:	4798      	blx	r3
 8002e14:	3601      	adds	r6, #1
 8002e16:	e7f2      	b.n	8002dfe <__libc_init_array+0x1e>
 8002e18:	08002e7c 	.word	0x08002e7c
 8002e1c:	08002e7c 	.word	0x08002e7c
 8002e20:	08002e7c 	.word	0x08002e7c
 8002e24:	08002e80 	.word	0x08002e80

08002e28 <memset>:
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4402      	add	r2, r0
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d100      	bne.n	8002e32 <memset+0xa>
 8002e30:	4770      	bx	lr
 8002e32:	f803 1b01 	strb.w	r1, [r3], #1
 8002e36:	e7f9      	b.n	8002e2c <memset+0x4>

08002e38 <_init>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	bf00      	nop
 8002e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3e:	bc08      	pop	{r3}
 8002e40:	469e      	mov	lr, r3
 8002e42:	4770      	bx	lr

08002e44 <_fini>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	bf00      	nop
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr
