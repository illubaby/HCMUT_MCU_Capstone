
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004210  08004210  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004210  08004210  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004210  08004210  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000008c  080042a4  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  080042a4  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c49  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b3  00000000  00000000  00032cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000355b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00036340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195b2  00000000  00000000  00036fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011417  00000000  00000000  00050572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeab  00000000  00000000  00061989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec834  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  000ec888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	080041cc 	.word	0x080041cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	080041cc 	.word	0x080041cc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <isButtonPressed+0x30>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d106      	bne.n	800066a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <isButtonPressed+0x30>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2100      	movs	r1, #0
 8000662:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <isButtonPressed+0x24>
	}
	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	200000a8 	.word	0x200000a8

0800067c <subKeyProcess>:

void subKeyProcess(int i){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <subKeyProcess+0x1c>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2101      	movs	r1, #1
 800068a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	200000a8 	.word	0x200000a8

0800069c <ReadPin>:

GPIO_PinState ReadPin(int index){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d105      	bne.n	80006b6 <ReadPin+0x1a>
 80006aa:	2102      	movs	r1, #2
 80006ac:	4812      	ldr	r0, [pc, #72]	; (80006f8 <ReadPin+0x5c>)
 80006ae:	f001 fc73 	bl	8001f98 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	e01b      	b.n	80006ee <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d105      	bne.n	80006c8 <ReadPin+0x2c>
 80006bc:	2110      	movs	r1, #16
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <ReadPin+0x5c>)
 80006c0:	f001 fc6a 	bl	8001f98 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	e012      	b.n	80006ee <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d105      	bne.n	80006da <ReadPin+0x3e>
 80006ce:	2101      	movs	r1, #1
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <ReadPin+0x60>)
 80006d2:	f001 fc61 	bl	8001f98 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	e009      	b.n	80006ee <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d105      	bne.n	80006ec <ReadPin+0x50>
 80006e0:	2101      	movs	r1, #1
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <ReadPin+0x5c>)
 80006e4:	f001 fc58 	bl	8001f98 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	e000      	b.n	80006ee <ReadPin+0x52>
	else return 0;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40010800 	.word	0x40010800
 80006fc:	40010c00 	.word	0x40010c00

08000700 <getKeyinput>:

void getKeyinput(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e05c      	b.n	80007c6 <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 800070c:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <getKeyinput+0xd8>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000714:	4931      	ldr	r1, [pc, #196]	; (80007dc <getKeyinput+0xdc>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800071c:	4a30      	ldr	r2, [pc, #192]	; (80007e0 <getKeyinput+0xe0>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000724:	492c      	ldr	r1, [pc, #176]	; (80007d8 <getKeyinput+0xd8>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff ffb5 	bl	800069c <ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	4619      	mov	r1, r3
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <getKeyinput+0xe0>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800073e:	4a27      	ldr	r2, [pc, #156]	; (80007dc <getKeyinput+0xdc>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000746:	4924      	ldr	r1, [pc, #144]	; (80007d8 <getKeyinput+0xd8>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800074e:	429a      	cmp	r2, r3
 8000750:	d136      	bne.n	80007c0 <getKeyinput+0xc0>
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <getKeyinput+0xd8>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800075a:	4921      	ldr	r1, [pc, #132]	; (80007e0 <getKeyinput+0xe0>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000762:	429a      	cmp	r2, r3
 8000764:	d12c      	bne.n	80007c0 <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 8000766:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <getKeyinput+0xe4>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076e:	491c      	ldr	r1, [pc, #112]	; (80007e0 <getKeyinput+0xe0>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000776:	429a      	cmp	r2, r3
 8000778:	d014      	beq.n	80007a4 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <getKeyinput+0xe0>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000782:	4918      	ldr	r1, [pc, #96]	; (80007e4 <getKeyinput+0xe4>)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <getKeyinput+0xe4>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d114      	bne.n	80007c0 <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <getKeyinput+0xe8>)
 8000798:	22c8      	movs	r2, #200	; 0xc8
 800079a:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff6d 	bl	800067c <subKeyProcess>
 80007a2:	e00d      	b.n	80007c0 <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <getKeyinput+0xe8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <getKeyinput+0xe8>)
 80007ac:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <getKeyinput+0xe8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d104      	bne.n	80007c0 <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <getKeyinput+0xe4>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2101      	movs	r1, #1
 80007bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	dd9f      	ble.n	800070c <getKeyinput+0xc>
				}
			}
		}
	}

}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000010 	.word	0x20000010
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000020 	.word	0x20000020
 80007e4:	20000030 	.word	0x20000030
 80007e8:	20000040 	.word	0x20000040

080007ec <get_buzzer_counter>:
extern TIM_HandleTypeDef htim3;  // External declaration
int buzzer_counter;
int state_buzzer = 1	;
int scale_buzzer=0;
float cycle;
void get_buzzer_counter(){	// for take the value of the red time
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	buzzer_counter = red_time/2;
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <get_buzzer_counter+0x1c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	0fda      	lsrs	r2, r3, #31
 80007f6:	4413      	add	r3, r2
 80007f8:	105b      	asrs	r3, r3, #1
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <get_buzzer_counter+0x20>)
 80007fe:	601a      	str	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	2000004c 	.word	0x2000004c
 800080c:	200000f8 	.word	0x200000f8

08000810 <cal_cycle>:
void cal_cycle (){
 8000810:	b598      	push	{r3, r4, r7, lr}
 8000812:	af00      	add	r7, sp, #0
	//cycle = ((float)buzzer_counter / red_time) * 100.0f;	// the speaker decreases volume every 1s
	cycle = ((float)buzzer_counter / red_time) * 100.0f-scale_buzzer; // the speaker decreases volume every 100ms
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <cal_cycle+0x6c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fd51 	bl	80002c0 <__aeabi_i2f>
 800081e:	4604      	mov	r4, r0
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <cal_cycle+0x70>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fd4b 	bl	80002c0 <__aeabi_i2f>
 800082a:	4603      	mov	r3, r0
 800082c:	4619      	mov	r1, r3
 800082e:	4620      	mov	r0, r4
 8000830:	f7ff fe4e 	bl	80004d0 <__aeabi_fdiv>
 8000834:	4603      	mov	r3, r0
 8000836:	4913      	ldr	r1, [pc, #76]	; (8000884 <cal_cycle+0x74>)
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fd95 	bl	8000368 <__aeabi_fmul>
 800083e:	4603      	mov	r3, r0
 8000840:	461c      	mov	r4, r3
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <cal_cycle+0x78>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fd3a 	bl	80002c0 <__aeabi_i2f>
 800084c:	4603      	mov	r3, r0
 800084e:	4619      	mov	r1, r3
 8000850:	4620      	mov	r0, r4
 8000852:	f7ff fc7f 	bl	8000154 <__aeabi_fsub>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <cal_cycle+0x7c>)
 800085c:	601a      	str	r2, [r3, #0]
	scale_buzzer++;
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <cal_cycle+0x78>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	3301      	adds	r3, #1
 8000864:	4a08      	ldr	r2, [pc, #32]	; (8000888 <cal_cycle+0x78>)
 8000866:	6013      	str	r3, [r2, #0]
	if (scale_buzzer>=10){
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <cal_cycle+0x78>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b09      	cmp	r3, #9
 800086e:	dd02      	ble.n	8000876 <cal_cycle+0x66>
		scale_buzzer=0;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <cal_cycle+0x78>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
	}
}
 8000876:	bf00      	nop
 8000878:	bd98      	pop	{r3, r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	200000f8 	.word	0x200000f8
 8000880:	2000004c 	.word	0x2000004c
 8000884:	42c80000 	.word	0x42c80000
 8000888:	200000b8 	.word	0x200000b8
 800088c:	200000f4 	.word	0x200000f4

08000890 <buzzer>:
void buzzer(){
 8000890:	b598      	push	{r3, r4, r7, lr}
 8000892:	af00      	add	r7, sp, #0
	switch(state_buzzer){
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <buzzer+0x90>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d002      	beq.n	80008a2 <buzzer+0x12>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d036      	beq.n	800090e <buzzer+0x7e>
	}
	break;
	case OFF:
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
		break;
	default: break;
 80008a0:	e03b      	b.n	800091a <buzzer+0x8a>
	if (timer_flag[6] == 1){// just for decrease the counter, like the red time
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <buzzer+0x94>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d111      	bne.n	80008ce <buzzer+0x3e>
		if (buzzer_counter>=0)
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <buzzer+0x98>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db04      	blt.n	80008bc <buzzer+0x2c>
		{HAL_GPIO_TogglePin(TEST_GPIO_Port,TEST_Pin);}
 80008b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b6:	481d      	ldr	r0, [pc, #116]	; (800092c <buzzer+0x9c>)
 80008b8:	f001 fb9d 	bl	8001ff6 <HAL_GPIO_TogglePin>
		buzzer_counter--;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <buzzer+0x98>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	4a19      	ldr	r2, [pc, #100]	; (8000928 <buzzer+0x98>)
 80008c4:	6013      	str	r3, [r2, #0]
		setTimer(100, 6);
 80008c6:	2106      	movs	r1, #6
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f000 fe0f 	bl	80014ec <setTimer>
	if (timer_flag[7] == 1){// for update the PWM more detail
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <buzzer+0x94>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d114      	bne.n	8000900 <buzzer+0x70>
		cal_cycle ();
 80008d6:	f7ff ff9b 	bl	8000810 <cal_cycle>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,100- cycle);
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <buzzer+0xa0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	4814      	ldr	r0, [pc, #80]	; (8000934 <buzzer+0xa4>)
 80008e2:	f7ff fc37 	bl	8000154 <__aeabi_fsub>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <buzzer+0xa8>)
 80008ec:	681c      	ldr	r4, [r3, #0]
 80008ee:	4610      	mov	r0, r2
 80008f0:	f7ff fe8a 	bl	8000608 <__aeabi_f2uiz>
 80008f4:	4603      	mov	r3, r0
 80008f6:	6363      	str	r3, [r4, #52]	; 0x34
		setTimer(10, 7);// because we want to update the speaker every 100ms, so we set 10
 80008f8:	2107      	movs	r1, #7
 80008fa:	200a      	movs	r0, #10
 80008fc:	f000 fdf6 	bl	80014ec <setTimer>
	if (buzzer_counter==0){
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <buzzer+0x98>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d107      	bne.n	8000918 <buzzer+0x88>
		get_buzzer_counter();
 8000908:	f7ff ff70 	bl	80007ec <get_buzzer_counter>
	break;
 800090c:	e004      	b.n	8000918 <buzzer+0x88>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <buzzer+0xa8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2200      	movs	r2, #0
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000916:	e000      	b.n	800091a <buzzer+0x8a>
	break;
 8000918:	bf00      	nop
	}
}
 800091a:	bf00      	nop
 800091c:	bd98      	pop	{r3, r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	20000044 	.word	0x20000044
 8000924:	20000058 	.word	0x20000058
 8000928:	200000f8 	.word	0x200000f8
 800092c:	40011000 	.word	0x40011000
 8000930:	200000f4 	.word	0x200000f4
 8000934:	42c80000 	.word	0x42c80000
 8000938:	20000108 	.word	0x20000108

0800093c <fsm_auto>:
int green_time = 3;
int red_time_cd = 0 ; // temp variable for red time length
int yellow_time_cd= 0 ;
int green_time_cd = 0 ;

void fsm_auto(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	switch (status){
 8000940:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <fsm_auto+0x164>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3b5a      	subs	r3, #90	; 0x5a
 8000946:	2b04      	cmp	r3, #4
 8000948:	f200 809e 	bhi.w	8000a88 <fsm_auto+0x14c>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <fsm_auto+0x18>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	08000969 	.word	0x08000969
 8000958:	08000989 	.word	0x08000989
 800095c:	080009c5 	.word	0x080009c5
 8000960:	08000a09 	.word	0x08000a09
 8000964:	08000a45 	.word	0x08000a45
	case INIT:
		red_time_cd = red_time; // time length = 5s, start at 4 and end at 0
 8000968:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <fsm_auto+0x168>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a4e      	ldr	r2, [pc, #312]	; (8000aa8 <fsm_auto+0x16c>)
 800096e:	6013      	str	r3, [r2, #0]
		green_time_cd = green_time;
 8000970:	4b4e      	ldr	r3, [pc, #312]	; (8000aac <fsm_auto+0x170>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a4e      	ldr	r2, [pc, #312]	; (8000ab0 <fsm_auto+0x174>)
 8000976:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 8000978:	2100      	movs	r1, #0
 800097a:	2064      	movs	r0, #100	; 0x64
 800097c:	f000 fdb6 	bl	80014ec <setTimer>
		status = AUTO_RED_GREEN;
 8000980:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <fsm_auto+0x164>)
 8000982:	225b      	movs	r2, #91	; 0x5b
 8000984:	601a      	str	r2, [r3, #0]
		break;
 8000986:	e088      	b.n	8000a9a <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <fsm_auto+0x178>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d17d      	bne.n	8000a8c <fsm_auto+0x150>
			red_time_cd --;
 8000990:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <fsm_auto+0x16c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <fsm_auto+0x16c>)
 8000998:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 800099a:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <fsm_auto+0x174>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3b01      	subs	r3, #1
 80009a0:	4a43      	ldr	r2, [pc, #268]	; (8000ab0 <fsm_auto+0x174>)
 80009a2:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 80009a4:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <fsm_auto+0x174>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d106      	bne.n	80009ba <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 80009ac:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <fsm_auto+0x164>)
 80009ae:	225c      	movs	r2, #92	; 0x5c
 80009b0:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <fsm_auto+0x17c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a41      	ldr	r2, [pc, #260]	; (8000abc <fsm_auto+0x180>)
 80009b8:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f000 fd95 	bl	80014ec <setTimer>
		}
		break;
 80009c2:	e063      	b.n	8000a8c <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <fsm_auto+0x178>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d161      	bne.n	8000a90 <fsm_auto+0x154>
			red_time_cd --;
 80009cc:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <fsm_auto+0x16c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4a35      	ldr	r2, [pc, #212]	; (8000aa8 <fsm_auto+0x16c>)
 80009d4:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 80009d6:	4b39      	ldr	r3, [pc, #228]	; (8000abc <fsm_auto+0x180>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	4a37      	ldr	r2, [pc, #220]	; (8000abc <fsm_auto+0x180>)
 80009de:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 80009e0:	4b36      	ldr	r3, [pc, #216]	; (8000abc <fsm_auto+0x180>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10a      	bne.n	80009fe <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 80009e8:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <fsm_auto+0x164>)
 80009ea:	225d      	movs	r2, #93	; 0x5d
 80009ec:	601a      	str	r2, [r3, #0]
				red_time_cd = red_time;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <fsm_auto+0x168>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a2d      	ldr	r2, [pc, #180]	; (8000aa8 <fsm_auto+0x16c>)
 80009f4:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <fsm_auto+0x170>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <fsm_auto+0x174>)
 80009fc:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80009fe:	2100      	movs	r1, #0
 8000a00:	2064      	movs	r0, #100	; 0x64
 8000a02:	f000 fd73 	bl	80014ec <setTimer>
		}
		break;
 8000a06:	e043      	b.n	8000a90 <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <fsm_auto+0x178>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d141      	bne.n	8000a94 <fsm_auto+0x158>
			red_time_cd --;
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <fsm_auto+0x16c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	4a24      	ldr	r2, [pc, #144]	; (8000aa8 <fsm_auto+0x16c>)
 8000a18:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <fsm_auto+0x174>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4a23      	ldr	r2, [pc, #140]	; (8000ab0 <fsm_auto+0x174>)
 8000a22:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <fsm_auto+0x174>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d106      	bne.n	8000a3a <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <fsm_auto+0x164>)
 8000a2e:	225e      	movs	r2, #94	; 0x5e
 8000a30:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <fsm_auto+0x17c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <fsm_auto+0x180>)
 8000a38:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f000 fd55 	bl	80014ec <setTimer>
		}
		break;
 8000a42:	e027      	b.n	8000a94 <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <fsm_auto+0x178>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d125      	bne.n	8000a98 <fsm_auto+0x15c>
			red_time_cd --;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <fsm_auto+0x16c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <fsm_auto+0x16c>)
 8000a54:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <fsm_auto+0x180>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <fsm_auto+0x180>)
 8000a5e:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <fsm_auto+0x180>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10a      	bne.n	8000a7e <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <fsm_auto+0x164>)
 8000a6a:	225b      	movs	r2, #91	; 0x5b
 8000a6c:	601a      	str	r2, [r3, #0]
				red_time_cd  = red_time;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <fsm_auto+0x168>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <fsm_auto+0x16c>)
 8000a74:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <fsm_auto+0x170>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <fsm_auto+0x174>)
 8000a7c:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f000 fd33 	bl	80014ec <setTimer>
		}
		break;
 8000a86:	e007      	b.n	8000a98 <fsm_auto+0x15c>
	default: break;
 8000a88:	bf00      	nop
 8000a8a:	e006      	b.n	8000a9a <fsm_auto+0x15e>
		break;
 8000a8c:	bf00      	nop
 8000a8e:	e004      	b.n	8000a9a <fsm_auto+0x15e>
		break;
 8000a90:	bf00      	nop
 8000a92:	e002      	b.n	8000a9a <fsm_auto+0x15e>
		break;
 8000a94:	bf00      	nop
 8000a96:	e000      	b.n	8000a9a <fsm_auto+0x15e>
		break;
 8000a98:	bf00      	nop
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000048 	.word	0x20000048
 8000aa4:	2000004c 	.word	0x2000004c
 8000aa8:	200000bc 	.word	0x200000bc
 8000aac:	20000054 	.word	0x20000054
 8000ab0:	200000c4 	.word	0x200000c4
 8000ab4:	20000058 	.word	0x20000058
 8000ab8:	20000050 	.word	0x20000050
 8000abc:	200000c0 	.word	0x200000c0

08000ac0 <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp, yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <turnbackINIT+0x50>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	dd07      	ble.n	8000adc <turnbackINIT+0x1c>
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <turnbackINIT+0x54>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dd03      	ble.n	8000adc <turnbackINIT+0x1c>
			green_time < 1){
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <turnbackINIT+0x58>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dc08      	bgt.n	8000aee <turnbackINIT+0x2e>
		red_time = 5;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <turnbackINIT+0x50>)
 8000ade:	2205      	movs	r2, #5
 8000ae0:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <turnbackINIT+0x54>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]
		green_time = 3;
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <turnbackINIT+0x58>)
 8000aea:	2203      	movs	r2, #3
 8000aec:	601a      	str	r2, [r3, #0]
	}
	setTimer(0, 3); // turn off timer_flag for scan led
 8000aee:	2103      	movs	r1, #3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 fcfb 	bl	80014ec <setTimer>
	red_time = green_time + yellow_time;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <turnbackINIT+0x58>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <turnbackINIT+0x54>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <turnbackINIT+0x50>)
 8000b02:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <turnbackINIT+0x5c>)
 8000b06:	225a      	movs	r2, #90	; 0x5a
 8000b08:	601a      	str	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000004c 	.word	0x2000004c
 8000b14:	20000050 	.word	0x20000050
 8000b18:	20000054 	.word	0x20000054
 8000b1c:	20000048 	.word	0x20000048

08000b20 <checkButton1>:
void checkButton1(){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff fd8f 	bl	8000648 <isButtonPressed>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d11e      	bne.n	8000b6e <checkButton1+0x4e>
		//reset set timer

		if (status == MANUAL_RED) {
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <checkButton1+0x54>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b14      	cmp	r3, #20
 8000b36:	d103      	bne.n	8000b40 <checkButton1+0x20>
			status = MANUAL_YELLOW;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <checkButton1+0x54>)
 8000b3a:	2215      	movs	r2, #21
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e011      	b.n	8000b64 <checkButton1+0x44>
		}
		else if (status == MANUAL_YELLOW) {
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <checkButton1+0x54>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b15      	cmp	r3, #21
 8000b46:	d103      	bne.n	8000b50 <checkButton1+0x30>
			status = MANUAL_GREEN;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <checkButton1+0x54>)
 8000b4a:	2216      	movs	r2, #22
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e009      	b.n	8000b64 <checkButton1+0x44>
		}
		else if (status == MANUAL_GREEN) {
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <checkButton1+0x54>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b16      	cmp	r3, #22
 8000b56:	d102      	bne.n	8000b5e <checkButton1+0x3e>
			turnbackINIT();
 8000b58:	f7ff ffb2 	bl	8000ac0 <turnbackINIT>
 8000b5c:	e002      	b.n	8000b64 <checkButton1+0x44>
		}
		else {
			status = MANUAL_INIT; //auto state -> manual state
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <checkButton1+0x54>)
 8000b60:	2217      	movs	r2, #23
 8000b62:	601a      	str	r2, [r3, #0]
		}
		setTimer(10000, 2);// after 10 sec don't press button1 -> turn back to auto mode
 8000b64:	2102      	movs	r1, #2
 8000b66:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b6a:	f000 fcbf 	bl	80014ec <setTimer>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000048 	.word	0x20000048

08000b78 <checkButton2>:

void checkButton2(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff fd63 	bl	8000648 <isButtonPressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d126      	bne.n	8000bd6 <checkButton2+0x5e>
		if (status == MANUAL_RED){
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <checkButton2+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b14      	cmp	r3, #20
 8000b8e:	d108      	bne.n	8000ba2 <checkButton2+0x2a>
			if (red_time_tmp < 99) red_time_tmp++;
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <checkButton2+0x68>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b62      	cmp	r3, #98	; 0x62
 8000b96:	dc04      	bgt.n	8000ba2 <checkButton2+0x2a>
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <checkButton2+0x68>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <checkButton2+0x68>)
 8000ba0:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_YELLOW){
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <checkButton2+0x64>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b15      	cmp	r3, #21
 8000ba8:	d108      	bne.n	8000bbc <checkButton2+0x44>
			if (yellow_time_tmp < 99) yellow_time_tmp++;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <checkButton2+0x6c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b62      	cmp	r3, #98	; 0x62
 8000bb0:	dc04      	bgt.n	8000bbc <checkButton2+0x44>
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <checkButton2+0x6c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <checkButton2+0x6c>)
 8000bba:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_GREEN){
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <checkButton2+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b16      	cmp	r3, #22
 8000bc2:	d108      	bne.n	8000bd6 <checkButton2+0x5e>
			if (green_time_tmp < 99) green_time_tmp++;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <checkButton2+0x70>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b62      	cmp	r3, #98	; 0x62
 8000bca:	dc04      	bgt.n	8000bd6 <checkButton2+0x5e>
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <checkButton2+0x70>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <checkButton2+0x70>)
 8000bd4:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000048 	.word	0x20000048
 8000be0:	20000104 	.word	0x20000104
 8000be4:	200000fc 	.word	0x200000fc
 8000be8:	20000100 	.word	0x20000100

08000bec <checkButton3>:
void checkButton3(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff fd29 	bl	8000648 <isButtonPressed>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d119      	bne.n	8000c30 <checkButton3+0x44>
		if (status == MANUAL_RED){
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <checkButton3+0x48>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b14      	cmp	r3, #20
 8000c02:	d104      	bne.n	8000c0e <checkButton3+0x22>
			red_time = red_time_tmp;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <checkButton3+0x4c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <checkButton3+0x50>)
 8000c0a:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 8000c0c:	e010      	b.n	8000c30 <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <checkButton3+0x48>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b15      	cmp	r3, #21
 8000c14:	d104      	bne.n	8000c20 <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <checkButton3+0x54>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <checkButton3+0x58>)
 8000c1c:	6013      	str	r3, [r2, #0]
}
 8000c1e:	e007      	b.n	8000c30 <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <checkButton3+0x48>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b16      	cmp	r3, #22
 8000c26:	d103      	bne.n	8000c30 <checkButton3+0x44>
			green_time = green_time_tmp;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <checkButton3+0x5c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <checkButton3+0x60>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000048 	.word	0x20000048
 8000c38:	20000104 	.word	0x20000104
 8000c3c:	2000004c 	.word	0x2000004c
 8000c40:	200000fc 	.word	0x200000fc
 8000c44:	20000050 	.word	0x20000050
 8000c48:	20000100 	.word	0x20000100
 8000c4c:	20000054 	.word	0x20000054

08000c50 <fsm_manual>:


void fsm_manual(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	checkButton1();
 8000c54:	f7ff ff64 	bl	8000b20 <checkButton1>
	switch (status){
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <fsm_manual+0x94>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3b14      	subs	r3, #20
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d83c      	bhi.n	8000cdc <fsm_manual+0x8c>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <fsm_manual+0x18>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c9b 	.word	0x08000c9b
 8000c6c:	08000cb1 	.word	0x08000cb1
 8000c70:	08000cc7 	.word	0x08000cc7
 8000c74:	08000c79 	.word	0x08000c79
	case MANUAL_INIT:
		red_time_tmp = 0;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <fsm_manual+0x98>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
		yellow_time_tmp = 0;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <fsm_manual+0x9c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <fsm_manual+0xa0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <fsm_manual+0x94>)
 8000c8c:	2214      	movs	r2, #20
 8000c8e:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 8000c90:	2103      	movs	r1, #3
 8000c92:	2032      	movs	r0, #50	; 0x32
 8000c94:	f000 fc2a 	bl	80014ec <setTimer>
		break;
 8000c98:	e021      	b.n	8000cde <fsm_manual+0x8e>
	case MANUAL_RED:
		if (timer_flag [2] == 1) {
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <fsm_manual+0xa4>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <fsm_manual+0x56>
			turnbackINIT();
 8000ca2:	f7ff ff0d 	bl	8000ac0 <turnbackINIT>
		}
		checkButton2();
 8000ca6:	f7ff ff67 	bl	8000b78 <checkButton2>
		checkButton3();
 8000caa:	f7ff ff9f 	bl	8000bec <checkButton3>
		break;
 8000cae:	e016      	b.n	8000cde <fsm_manual+0x8e>
	case MANUAL_YELLOW:
		if (timer_flag [2] == 1){
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <fsm_manual+0xa4>)
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d101      	bne.n	8000cbc <fsm_manual+0x6c>
			turnbackINIT();
 8000cb8:	f7ff ff02 	bl	8000ac0 <turnbackINIT>
		}
		checkButton2();
 8000cbc:	f7ff ff5c 	bl	8000b78 <checkButton2>
		checkButton3();
 8000cc0:	f7ff ff94 	bl	8000bec <checkButton3>
		break;
 8000cc4:	e00b      	b.n	8000cde <fsm_manual+0x8e>
	case MANUAL_GREEN:
		if (timer_flag [2] == 1){
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <fsm_manual+0xa4>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <fsm_manual+0x82>
			turnbackINIT();
 8000cce:	f7ff fef7 	bl	8000ac0 <turnbackINIT>
		}
		checkButton2();
 8000cd2:	f7ff ff51 	bl	8000b78 <checkButton2>
		checkButton3();
 8000cd6:	f7ff ff89 	bl	8000bec <checkButton3>
		break;
 8000cda:	e000      	b.n	8000cde <fsm_manual+0x8e>
	default: break;
 8000cdc:	bf00      	nop
	}




}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000048 	.word	0x20000048
 8000ce8:	20000104 	.word	0x20000104
 8000cec:	200000fc 	.word	0x200000fc
 8000cf0:	20000100 	.word	0x20000100
 8000cf4:	20000058 	.word	0x20000058

08000cf8 <fsm_pedestrian_light>:
 */

#include "fsm_pedestrian_light.h"
#include "buzzer.h"

void fsm_pedestrian_light(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	if(isButtonPressed(3)){
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f7ff fca3 	bl	8000648 <isButtonPressed>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d004      	beq.n	8000d12 <fsm_pedestrian_light+0x1a>
		setTimer(1500,4);
 8000d08:	2104      	movs	r1, #4
 8000d0a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d0e:	f000 fbed 	bl	80014ec <setTimer>
//		case MANUAL_GREEN:
//			state_buzzer =OFF;
//			break;
//		default: break;
//	}
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 fd96 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f822 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f000 f948 	bl	8000fb8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d28:	f000 f85a 	bl	8000de0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d2c:	f000 f91a 	bl	8000f64 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d30:	f000 f8a2 	bl	8000e78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <main+0x48>)
 8000d36:	f001 fdd5 	bl	80028e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <main+0x4c>)
 8000d3e:	f001 fe7b 	bl	8002a38 <HAL_TIM_PWM_Start>
  setTimer(10, 7);
 8000d42:	2107      	movs	r1, #7
 8000d44:	200a      	movs	r0, #10
 8000d46:	f000 fbd1 	bl	80014ec <setTimer>
  setTimer(10, 6);
 8000d4a:	2106      	movs	r1, #6
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f000 fbcd 	bl	80014ec <setTimer>
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_auto();
 8000d52:	f7ff fdf3 	bl	800093c <fsm_auto>
	  fsm_manual();
 8000d56:	f7ff ff7b 	bl	8000c50 <fsm_manual>
	  fsm_pedestrian_light();
 8000d5a:	f7ff ffcd 	bl	8000cf8 <fsm_pedestrian_light>
	  fsm_auto();
 8000d5e:	e7f8      	b.n	8000d52 <main+0x3a>
 8000d60:	20000150 	.word	0x20000150
 8000d64:	20000108 	.word	0x20000108

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b090      	sub	sp, #64	; 0x40
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0318 	add.w	r3, r7, #24
 8000d72:	2228      	movs	r2, #40	; 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fa20 	bl	80041bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d92:	2310      	movs	r3, #16
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	f107 0318 	add.w	r3, r7, #24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 f942 	bl	8002028 <HAL_RCC_OscConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000daa:	f000 f9a7 	bl	80010fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dae:	230f      	movs	r3, #15
 8000db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fbae 	bl	8002528 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 f993 	bl	80010fc <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3740      	adds	r7, #64	; 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e24:	4813      	ldr	r0, [pc, #76]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e26:	f001 fd0d 	bl	8002844 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e30:	f000 f964 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480c      	ldr	r0, [pc, #48]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e42:	f002 f865 	bl	8002f10 <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e4c:	f000 f956 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_TIM2_Init+0x94>)
 8000e5e:	f002 fbe7 	bl	8003630 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e68:	f000 f948 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000150 	.word	0x20000150

08000e78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000eaa:	4a2d      	ldr	r2, [pc, #180]	; (8000f60 <MX_TIM3_Init+0xe8>)
 8000eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000eb0:	224f      	movs	r2, #79	; 0x4f
 8000eb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000ebc:	2263      	movs	r2, #99	; 0x63
 8000ebe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec0:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ecc:	4823      	ldr	r0, [pc, #140]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000ece:	f001 fcb9 	bl	8002844 <HAL_TIM_Base_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000ed8:	f000 f910 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481c      	ldr	r0, [pc, #112]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000eea:	f002 f811 	bl	8002f10 <HAL_TIM_ConfigClockSource>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000ef4:	f000 f902 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000efa:	f001 fd45 	bl	8002988 <HAL_TIM_PWM_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000f04:	f000 f8fa 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4619      	mov	r1, r3
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000f18:	f002 fb8a 	bl	8003630 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000f22:	f000 f8eb 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f26:	2360      	movs	r3, #96	; 0x60
 8000f28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000f3e:	f001 ff25 	bl	8002d8c <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000f48:	f000 f8d8 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_TIM3_Init+0xe4>)
 8000f4e:	f000 fb87 	bl	8001660 <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000108 	.word	0x20000108
 8000f60:	40000400 	.word	0x40000400

08000f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_USART2_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	f002 fbb8 	bl	8003710 <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fa6:	f000 f8a9 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000198 	.word	0x20000198
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe4:	4b39      	ldr	r3, [pc, #228]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a38      	ldr	r2, [pc, #224]	; (80010cc <MX_GPIO_Init+0x114>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <MX_GPIO_Init+0x114>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	4b33      	ldr	r3, [pc, #204]	; (80010cc <MX_GPIO_Init+0x114>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a32      	ldr	r2, [pc, #200]	; (80010cc <MX_GPIO_Init+0x114>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_GPIO_Init+0x114>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800101a:	482d      	ldr	r0, [pc, #180]	; (80010d0 <MX_GPIO_Init+0x118>)
 800101c:	f000 ffd3 	bl	8001fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001026:	482b      	ldr	r0, [pc, #172]	; (80010d4 <MX_GPIO_Init+0x11c>)
 8001028:	f000 ffcd 	bl	8001fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001032:	4829      	ldr	r0, [pc, #164]	; (80010d8 <MX_GPIO_Init+0x120>)
 8001034:	f000 ffc7 	bl	8001fc6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8001038:	2313      	movs	r3, #19
 800103a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	4823      	ldr	r0, [pc, #140]	; (80010d8 <MX_GPIO_Init+0x120>)
 800104c:	f000 fe20 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	481b      	ldr	r0, [pc, #108]	; (80010d0 <MX_GPIO_Init+0x118>)
 8001064:	f000 fe14 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 8001068:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2302      	movs	r3, #2
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <MX_GPIO_Init+0x118>)
 8001082:	f000 fe05 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2302      	movs	r3, #2
 8001096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_GPIO_Init+0x11c>)
 80010a0:	f000 fdf6 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 80010a4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80010a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	4806      	ldr	r0, [pc, #24]	; (80010d8 <MX_GPIO_Init+0x120>)
 80010be:	f000 fde7 	bl	8001c90 <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010c00 	.word	0x40010c00
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40010800 	.word	0x40010800

080010dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
 80010e4:	f000 f936 	bl	8001354 <scanLed>
	buzzer(); // buzzer
 80010e8:	f7ff fbd2 	bl	8000890 <buzzer>
	timerRun(); // software timer
 80010ec:	f000 fa16 	bl	800151c <timerRun>
	getKeyinput(); // button
 80010f0:	f7ff fb06 	bl	8000700 <getKeyinput>

//	SCH_Update();
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>
	...

08001108 <turnoffAll>:

#include "scanLed.h"

int enable_change = 0;
//lenh bat tat den cho nhanh
void turnoffAll(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <turnoffAll+0x4c>)
 8001114:	f000 ff57 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2108      	movs	r1, #8
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <turnoffAll+0x50>)
 800111e:	f000 ff52 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	480c      	ldr	r0, [pc, #48]	; (8001158 <turnoffAll+0x50>)
 8001128:	f000 ff4d 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2110      	movs	r1, #16
 8001130:	4809      	ldr	r0, [pc, #36]	; (8001158 <turnoffAll+0x50>)
 8001132:	f000 ff48 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800113c:	4806      	ldr	r0, [pc, #24]	; (8001158 <turnoffAll+0x50>)
 800113e:	f000 ff42 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <turnoffAll+0x4c>)
 800114a:	f000 ff3c 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00

0800115c <onRed_1>:
void onRed_1(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <onRed_1+0x20>)
 8001168:	f000 ff2d 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2108      	movs	r1, #8
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <onRed_1+0x24>)
 8001172:	f000 ff28 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40010800 	.word	0x40010800
 8001180:	40010c00 	.word	0x40010c00

08001184 <onYellow_1>:
void onYellow_1(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <onYellow_1+0x20>)
 8001190:	f000 ff19 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2108      	movs	r1, #8
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <onYellow_1+0x24>)
 800119a:	f000 ff14 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40010800 	.word	0x40010800
 80011a8:	40010c00 	.word	0x40010c00

080011ac <onGreen_1>:
void onGreen_1(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <onGreen_1+0x20>)
 80011b8:	f000 ff05 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2108      	movs	r1, #8
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <onGreen_1+0x24>)
 80011c2:	f000 ff00 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40010c00 	.word	0x40010c00

080011d4 <onRed_2>:
void onRed_2(){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2120      	movs	r1, #32
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <onRed_2+0x1c>)
 80011de:	f000 fef2 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2110      	movs	r1, #16
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <onRed_2+0x1c>)
 80011e8:	f000 feed 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40010c00 	.word	0x40010c00

080011f4 <onYellow_2>:
void onYellow_2(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2120      	movs	r1, #32
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <onYellow_2+0x1c>)
 80011fe:	f000 fee2 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2110      	movs	r1, #16
 8001206:	4802      	ldr	r0, [pc, #8]	; (8001210 <onYellow_2+0x1c>)
 8001208:	f000 fedd 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40010c00 	.word	0x40010c00

08001214 <onGreen_2>:
void onGreen_2(){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2120      	movs	r1, #32
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <onGreen_2+0x1c>)
 800121e:	f000 fed2 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2110      	movs	r1, #16
 8001226:	4802      	ldr	r0, [pc, #8]	; (8001230 <onGreen_2+0x1c>)
 8001228:	f000 fecd 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010c00 	.word	0x40010c00

08001234 <offPed>:
void offPed(){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <offPed+0x20>)
 8001240:	f000 fec1 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124a:	4803      	ldr	r0, [pc, #12]	; (8001258 <offPed+0x24>)
 800124c:	f000 febb 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40010800 	.word	0x40010800

0800125c <onGreenPed>:

void onGreenPed(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <onGreenPed+0x20>)
 8001268:	f000 fead 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <onGreenPed+0x24>)
 8001274:	f000 fea7 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40010800 	.word	0x40010800

08001284 <onRedPed>:
void onRedPed(){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <onRedPed+0x20>)
 8001290:	f000 fe99 	bl	8001fc6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <onRedPed+0x24>)
 800129c:	f000 fe93 	bl	8001fc6 <HAL_GPIO_WritePin>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40010800 	.word	0x40010800

080012ac <onRed_Toggle>:
void onRed_Toggle(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <onRed_Toggle+0x34>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <onRed_Toggle+0x1c>
		onRed_1();
 80012b8:	f7ff ff50 	bl	800115c <onRed_1>
		onRed_2();
 80012bc:	f7ff ff8a 	bl	80011d4 <onRed_2>
		enable_change = 1;
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <onRed_Toggle+0x34>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 80012c6:	e008      	b.n	80012da <onRed_Toggle+0x2e>
	else if (enable_change == 1){
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <onRed_Toggle+0x34>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d104      	bne.n	80012da <onRed_Toggle+0x2e>
		turnoffAll();
 80012d0:	f7ff ff1a 	bl	8001108 <turnoffAll>
		enable_change = 0;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <onRed_Toggle+0x34>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200000c8 	.word	0x200000c8

080012e4 <onGreen_Toggle>:
void onGreen_Toggle(){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <onGreen_Toggle+0x34>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <onGreen_Toggle+0x1c>
		onGreen_1();
 80012f0:	f7ff ff5c 	bl	80011ac <onGreen_1>
		onGreen_2();
 80012f4:	f7ff ff8e 	bl	8001214 <onGreen_2>
		enable_change = 1;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <onGreen_Toggle+0x34>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 80012fe:	e008      	b.n	8001312 <onGreen_Toggle+0x2e>
	else if (enable_change == 1){
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <onGreen_Toggle+0x34>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d104      	bne.n	8001312 <onGreen_Toggle+0x2e>
		turnoffAll();
 8001308:	f7ff fefe 	bl	8001108 <turnoffAll>
		enable_change = 0;
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <onGreen_Toggle+0x34>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200000c8 	.word	0x200000c8

0800131c <onYellow_Toggle>:
void onYellow_Toggle(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <onYellow_Toggle+0x34>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <onYellow_Toggle+0x1c>
		onYellow_1();
 8001328:	f7ff ff2c 	bl	8001184 <onYellow_1>
		onYellow_2();
 800132c:	f7ff ff62 	bl	80011f4 <onYellow_2>
		enable_change = 1;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <onYellow_Toggle+0x34>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 8001336:	e008      	b.n	800134a <onYellow_Toggle+0x2e>
	else if (enable_change == 1){
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <onYellow_Toggle+0x34>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d104      	bne.n	800134a <onYellow_Toggle+0x2e>
		turnoffAll();
 8001340:	f7ff fee2 	bl	8001108 <turnoffAll>
		enable_change = 0;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <onYellow_Toggle+0x34>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000c8 	.word	0x200000c8

08001354 <scanLed>:
void scanLed(){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	switch (status){
 8001358:	4b61      	ldr	r3, [pc, #388]	; (80014e0 <scanLed+0x18c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b5e      	cmp	r3, #94	; 0x5e
 800135e:	f300 80ad 	bgt.w	80014bc <scanLed+0x168>
 8001362:	2b5b      	cmp	r3, #91	; 0x5b
 8001364:	da0b      	bge.n	800137e <scanLed+0x2a>
 8001366:	2b16      	cmp	r3, #22
 8001368:	f000 8098 	beq.w	800149c <scanLed+0x148>
 800136c:	2b16      	cmp	r3, #22
 800136e:	f300 80a5 	bgt.w	80014bc <scanLed+0x168>
 8001372:	2b14      	cmp	r3, #20
 8001374:	d072      	beq.n	800145c <scanLed+0x108>
 8001376:	2b15      	cmp	r3, #21
 8001378:	f000 8080 	beq.w	800147c <scanLed+0x128>
		if (timer_flag[3] == 1){
			onGreen_Toggle();
			setTimer(50,3);
		}
		break;
	default: break;
 800137c:	e09e      	b.n	80014bc <scanLed+0x168>
 800137e:	3b5b      	subs	r3, #91	; 0x5b
 8001380:	2b03      	cmp	r3, #3
 8001382:	f200 809b 	bhi.w	80014bc <scanLed+0x168>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <scanLed+0x38>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013cd 	.word	0x080013cd
 8001394:	080013fd 	.word	0x080013fd
 8001398:	0800142d 	.word	0x0800142d
		onRed_1();
 800139c:	f7ff fede 	bl	800115c <onRed_1>
		onGreen_2();
 80013a0:	f7ff ff38 	bl	8001214 <onGreen_2>
		if(timer_flag[4] == 0){
 80013a4:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <scanLed+0x190>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d105      	bne.n	80013b8 <scanLed+0x64>
			onGreenPed();
 80013ac:	f7ff ff56 	bl	800125c <onGreenPed>
			state_buzzer =ON;//buzzer
 80013b0:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <scanLed+0x194>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
		break;
 80013b6:	e083      	b.n	80014c0 <scanLed+0x16c>
		}else if(timer_flag[4] == 1){
 80013b8:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <scanLed+0x190>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d17f      	bne.n	80014c0 <scanLed+0x16c>
			offPed();
 80013c0:	f7ff ff38 	bl	8001234 <offPed>
			state_buzzer =OFF;//buzzer
 80013c4:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <scanLed+0x194>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	601a      	str	r2, [r3, #0]
		break;
 80013ca:	e079      	b.n	80014c0 <scanLed+0x16c>
		onRed_1();
 80013cc:	f7ff fec6 	bl	800115c <onRed_1>
		onYellow_2();
 80013d0:	f7ff ff10 	bl	80011f4 <onYellow_2>
		if(timer_flag[4] == 0){
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <scanLed+0x190>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <scanLed+0x94>
			onGreenPed();
 80013dc:	f7ff ff3e 	bl	800125c <onGreenPed>
			state_buzzer =ON;//buzzer
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <scanLed+0x194>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
		break;
 80013e6:	e06d      	b.n	80014c4 <scanLed+0x170>
		}else if(timer_flag[4] == 1){
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <scanLed+0x190>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d169      	bne.n	80014c4 <scanLed+0x170>
			offPed();
 80013f0:	f7ff ff20 	bl	8001234 <offPed>
			state_buzzer =OFF;//buzzer
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <scanLed+0x194>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
		break;
 80013fa:	e063      	b.n	80014c4 <scanLed+0x170>
		onGreen_1();
 80013fc:	f7ff fed6 	bl	80011ac <onGreen_1>
		onRed_2();
 8001400:	f7ff fee8 	bl	80011d4 <onRed_2>
		if(timer_flag[4] == 0){
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <scanLed+0x190>)
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <scanLed+0xc4>
			state_buzzer =OFF;//buzzer
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <scanLed+0x194>)
 800140e:	2202      	movs	r2, #2
 8001410:	601a      	str	r2, [r3, #0]
			onRedPed();
 8001412:	f7ff ff37 	bl	8001284 <onRedPed>
		break;
 8001416:	e057      	b.n	80014c8 <scanLed+0x174>
		}else if(timer_flag[4] == 1){
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <scanLed+0x190>)
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d153      	bne.n	80014c8 <scanLed+0x174>
			state_buzzer =OFF;//buzzer
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <scanLed+0x194>)
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
			offPed();
 8001426:	f7ff ff05 	bl	8001234 <offPed>
		break;
 800142a:	e04d      	b.n	80014c8 <scanLed+0x174>
		onYellow_1();
 800142c:	f7ff feaa 	bl	8001184 <onYellow_1>
		onRed_2();
 8001430:	f7ff fed0 	bl	80011d4 <onRed_2>
		if(timer_flag[4] == 0){
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <scanLed+0x190>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <scanLed+0xf4>
			state_buzzer =OFF;//buzzer
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <scanLed+0x194>)
 800143e:	2202      	movs	r2, #2
 8001440:	601a      	str	r2, [r3, #0]
			onRedPed();
 8001442:	f7ff ff1f 	bl	8001284 <onRedPed>
		break;
 8001446:	e041      	b.n	80014cc <scanLed+0x178>
		}else if(timer_flag[4] == 1){
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <scanLed+0x190>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d13d      	bne.n	80014cc <scanLed+0x178>
			state_buzzer =OFF;//buzzer
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <scanLed+0x194>)
 8001452:	2202      	movs	r2, #2
 8001454:	601a      	str	r2, [r3, #0]
			offPed();
 8001456:	f7ff feed 	bl	8001234 <offPed>
		break;
 800145a:	e037      	b.n	80014cc <scanLed+0x178>
		offPed();
 800145c:	f7ff feea 	bl	8001234 <offPed>
		state_buzzer =OFF;//buzzer
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <scanLed+0x194>)
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <scanLed+0x190>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d130      	bne.n	80014d0 <scanLed+0x17c>
			onRed_Toggle();
 800146e:	f7ff ff1d 	bl	80012ac <onRed_Toggle>
			setTimer(50,3);
 8001472:	2103      	movs	r1, #3
 8001474:	2032      	movs	r0, #50	; 0x32
 8001476:	f000 f839 	bl	80014ec <setTimer>
		break;
 800147a:	e029      	b.n	80014d0 <scanLed+0x17c>
		offPed();
 800147c:	f7ff feda 	bl	8001234 <offPed>
		state_buzzer =OFF;//buzzer
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <scanLed+0x194>)
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <scanLed+0x190>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d122      	bne.n	80014d4 <scanLed+0x180>
			onYellow_Toggle();
 800148e:	f7ff ff45 	bl	800131c <onYellow_Toggle>
			setTimer(50,3);
 8001492:	2103      	movs	r1, #3
 8001494:	2032      	movs	r0, #50	; 0x32
 8001496:	f000 f829 	bl	80014ec <setTimer>
		break;
 800149a:	e01b      	b.n	80014d4 <scanLed+0x180>
		offPed();
 800149c:	f7ff feca 	bl	8001234 <offPed>
		state_buzzer =OFF; //buzzer
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <scanLed+0x194>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <scanLed+0x190>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d114      	bne.n	80014d8 <scanLed+0x184>
			onGreen_Toggle();
 80014ae:	f7ff ff19 	bl	80012e4 <onGreen_Toggle>
			setTimer(50,3);
 80014b2:	2103      	movs	r1, #3
 80014b4:	2032      	movs	r0, #50	; 0x32
 80014b6:	f000 f819 	bl	80014ec <setTimer>
		break;
 80014ba:	e00d      	b.n	80014d8 <scanLed+0x184>
	default: break;
 80014bc:	bf00      	nop
 80014be:	e00c      	b.n	80014da <scanLed+0x186>
		break;
 80014c0:	bf00      	nop
 80014c2:	e00a      	b.n	80014da <scanLed+0x186>
		break;
 80014c4:	bf00      	nop
 80014c6:	e008      	b.n	80014da <scanLed+0x186>
		break;
 80014c8:	bf00      	nop
 80014ca:	e006      	b.n	80014da <scanLed+0x186>
		break;
 80014cc:	bf00      	nop
 80014ce:	e004      	b.n	80014da <scanLed+0x186>
		break;
 80014d0:	bf00      	nop
 80014d2:	e002      	b.n	80014da <scanLed+0x186>
		break;
 80014d4:	bf00      	nop
 80014d6:	e000      	b.n	80014da <scanLed+0x186>
		break;
 80014d8:	bf00      	nop
	}
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000048 	.word	0x20000048
 80014e4:	20000058 	.word	0x20000058
 80014e8:	20000044 	.word	0x20000044

080014ec <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 80014f6:	4907      	ldr	r1, [pc, #28]	; (8001514 <setTimer+0x28>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <setTimer+0x2c>)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2100      	movs	r1, #0
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	200000cc 	.word	0x200000cc
 8001518:	20000058 	.word	0x20000058

0800151c <timerRun>:

void timerRun(){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	e01c      	b.n	8001562 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <timerRun+0x58>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dd13      	ble.n	800155c <timerRun+0x40>
			timer_counter[i]--;
 8001534:	4a0f      	ldr	r2, [pc, #60]	; (8001574 <timerRun+0x58>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	1e5a      	subs	r2, r3, #1
 800153e:	490d      	ldr	r1, [pc, #52]	; (8001574 <timerRun+0x58>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <timerRun+0x58>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d104      	bne.n	800155c <timerRun+0x40>
				timer_flag [i] = 1;
 8001552:	4a09      	ldr	r2, [pc, #36]	; (8001578 <timerRun+0x5c>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2101      	movs	r1, #1
 8001558:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3301      	adds	r3, #1
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b09      	cmp	r3, #9
 8001566:	dddf      	ble.n	8001528 <timerRun+0xc>
			}
		}
	}
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	200000cc 	.word	0x200000cc
 8001578:	20000058 	.word	0x20000058

0800157c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_MspInit+0x5c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_MspInit+0x5c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x5c>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_MspInit+0x60>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_MspInit+0x60>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000

080015e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d114      	bne.n	800161c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_TIM_Base_MspInit+0x78>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_TIM_Base_MspInit+0x78>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_TIM_Base_MspInit+0x78>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201c      	movs	r0, #28
 8001610:	f000 fa55 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001614:	201c      	movs	r0, #28
 8001616:	f000 fa6e 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800161a:	e018      	b.n	800164e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_TIM_Base_MspInit+0x7c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d113      	bne.n	800164e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_TIM_Base_MspInit+0x78>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_TIM_Base_MspInit+0x78>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	61d3      	str	r3, [r2, #28]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_TIM_Base_MspInit+0x78>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201d      	movs	r0, #29
 8001644:	f000 fa3b 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001648:	201d      	movs	r0, #29
 800164a:	f000 fa54 	bl	8001af6 <HAL_NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40000400 	.word	0x40000400

08001660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_TIM_MspPostInit+0x58>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d117      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_TIM_MspPostInit+0x5c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_TIM_MspPostInit+0x5c>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_TIM_MspPostInit+0x5c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_TIM_MspPostInit+0x60>)
 80016ac:	f000 faf0 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40000400 	.word	0x40000400
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010800 	.word	0x40010800

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_UART_MspInit+0x98>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d137      	bne.n	8001754 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ee:	61d3      	str	r3, [r2, #28]
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_UART_MspInit+0x9c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_UART_MspInit+0x9c>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_UART_MspInit+0x9c>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001714:	2304      	movs	r3, #4
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	480f      	ldr	r0, [pc, #60]	; (8001764 <HAL_UART_MspInit+0xa0>)
 8001728:	f000 fab2 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800172c:	2308      	movs	r3, #8
 800172e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <HAL_UART_MspInit+0xa0>)
 8001740:	f000 faa6 	bl	8001c90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2026      	movs	r0, #38	; 0x26
 800174a:	f000 f9b8 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800174e:	2026      	movs	r0, #38	; 0x26
 8001750:	f000 f9d1 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40004400 	.word	0x40004400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f893 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f001 f9dd 	bl	8002b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000150 	.word	0x20000150

080017cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <TIM3_IRQHandler+0x10>)
 80017d2:	f001 f9d3 	bl	8002b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000108 	.word	0x20000108

080017e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART2_IRQHandler+0x10>)
 80017e6:	f001 ffe3 	bl	80037b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000198 	.word	0x20000198

080017f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001800:	f7ff fff8 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001806:	490c      	ldr	r1, [pc, #48]	; (8001838 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <LoopFillZerobss+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800181c:	4c09      	ldr	r4, [pc, #36]	; (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f002 fca3 	bl	8004174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800182e:	f7ff fa73 	bl	8000d18 <main>
  bx lr
 8001832:	4770      	bx	lr
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800183c:	08004218 	.word	0x08004218
  ldr r2, =_sbss
 8001840:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001844:	200001e4 	.word	0x200001e4

08001848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC1_2_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_Init+0x28>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_Init+0x28>)
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f923 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	200f      	movs	r0, #15
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fe88 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f93b 	bl	8001b12 <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f903 	bl	8001abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000080 	.word	0x20000080
 80018d0:	20000088 	.word	0x20000088
 80018d4:	20000084 	.word	0x20000084

080018d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_IncTick+0x1c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_IncTick+0x20>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_IncTick+0x20>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000088 	.word	0x20000088
 80018f8:	200001e0 	.word	0x200001e0

080018fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <HAL_GetTick+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	200001e0 	.word	0x200001e0

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <__NVIC_EnableIRQ+0x34>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f7ff ff90 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff2d 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad0:	f7ff ff42 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f7ff ff90 	bl	8001a00 <NVIC_EncodePriority>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff5f 	bl	80019ac <__NVIC_SetPriority>
}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff35 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffa2 	bl	8001a64 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d008      	beq.n	8001b54 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2204      	movs	r2, #4
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e020      	b.n	8001b96 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 020e 	bic.w	r2, r2, #14
 8001b62:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0201 	bic.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d005      	beq.n	8001bc4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e051      	b.n	8001c68 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020e 	bic.w	r2, r2, #14
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_DMA_Abort_IT+0xd4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d029      	beq.n	8001c42 <HAL_DMA_Abort_IT+0xa2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <HAL_DMA_Abort_IT+0xd8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d022      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x9e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <HAL_DMA_Abort_IT+0xdc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01a      	beq.n	8001c38 <HAL_DMA_Abort_IT+0x98>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <HAL_DMA_Abort_IT+0xe0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d012      	beq.n	8001c32 <HAL_DMA_Abort_IT+0x92>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <HAL_DMA_Abort_IT+0xe4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00a      	beq.n	8001c2c <HAL_DMA_Abort_IT+0x8c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	; (8001c88 <HAL_DMA_Abort_IT+0xe8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d102      	bne.n	8001c26 <HAL_DMA_Abort_IT+0x86>
 8001c20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c24:	e00e      	b.n	8001c44 <HAL_DMA_Abort_IT+0xa4>
 8001c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c2a:	e00b      	b.n	8001c44 <HAL_DMA_Abort_IT+0xa4>
 8001c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c30:	e008      	b.n	8001c44 <HAL_DMA_Abort_IT+0xa4>
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	e005      	b.n	8001c44 <HAL_DMA_Abort_IT+0xa4>
 8001c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3c:	e002      	b.n	8001c44 <HAL_DMA_Abort_IT+0xa4>
 8001c3e:	2310      	movs	r3, #16
 8001c40:	e000      	b.n	8001c44 <HAL_DMA_Abort_IT+0xa4>
 8001c42:	2301      	movs	r3, #1
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <HAL_DMA_Abort_IT+0xec>)
 8001c46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
    } 
  }
  return status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40020008 	.word	0x40020008
 8001c78:	4002001c 	.word	0x4002001c
 8001c7c:	40020030 	.word	0x40020030
 8001c80:	40020044 	.word	0x40020044
 8001c84:	40020058 	.word	0x40020058
 8001c88:	4002006c 	.word	0x4002006c
 8001c8c:	40020000 	.word	0x40020000

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b08b      	sub	sp, #44	; 0x2c
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e169      	b.n	8001f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69fa      	ldr	r2, [r7, #28]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8158 	bne.w	8001f72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a9a      	ldr	r2, [pc, #616]	; (8001f30 <HAL_GPIO_Init+0x2a0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d05e      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001ccc:	4a98      	ldr	r2, [pc, #608]	; (8001f30 <HAL_GPIO_Init+0x2a0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d875      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cd2:	4a98      	ldr	r2, [pc, #608]	; (8001f34 <HAL_GPIO_Init+0x2a4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d058      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cd8:	4a96      	ldr	r2, [pc, #600]	; (8001f34 <HAL_GPIO_Init+0x2a4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d86f      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cde:	4a96      	ldr	r2, [pc, #600]	; (8001f38 <HAL_GPIO_Init+0x2a8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d052      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001ce4:	4a94      	ldr	r2, [pc, #592]	; (8001f38 <HAL_GPIO_Init+0x2a8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d869      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cea:	4a94      	ldr	r2, [pc, #592]	; (8001f3c <HAL_GPIO_Init+0x2ac>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d04c      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cf0:	4a92      	ldr	r2, [pc, #584]	; (8001f3c <HAL_GPIO_Init+0x2ac>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d863      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001cf6:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_GPIO_Init+0x2b0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d046      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
 8001cfc:	4a90      	ldr	r2, [pc, #576]	; (8001f40 <HAL_GPIO_Init+0x2b0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d85d      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001d02:	2b12      	cmp	r3, #18
 8001d04:	d82a      	bhi.n	8001d5c <HAL_GPIO_Init+0xcc>
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d859      	bhi.n	8001dbe <HAL_GPIO_Init+0x12e>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <HAL_GPIO_Init+0x80>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d8b 	.word	0x08001d8b
 8001d14:	08001d65 	.word	0x08001d65
 8001d18:	08001d77 	.word	0x08001d77
 8001d1c:	08001db9 	.word	0x08001db9
 8001d20:	08001dbf 	.word	0x08001dbf
 8001d24:	08001dbf 	.word	0x08001dbf
 8001d28:	08001dbf 	.word	0x08001dbf
 8001d2c:	08001dbf 	.word	0x08001dbf
 8001d30:	08001dbf 	.word	0x08001dbf
 8001d34:	08001dbf 	.word	0x08001dbf
 8001d38:	08001dbf 	.word	0x08001dbf
 8001d3c:	08001dbf 	.word	0x08001dbf
 8001d40:	08001dbf 	.word	0x08001dbf
 8001d44:	08001dbf 	.word	0x08001dbf
 8001d48:	08001dbf 	.word	0x08001dbf
 8001d4c:	08001dbf 	.word	0x08001dbf
 8001d50:	08001dbf 	.word	0x08001dbf
 8001d54:	08001d6d 	.word	0x08001d6d
 8001d58:	08001d81 	.word	0x08001d81
 8001d5c:	4a79      	ldr	r2, [pc, #484]	; (8001f44 <HAL_GPIO_Init+0x2b4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d62:	e02c      	b.n	8001dbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	623b      	str	r3, [r7, #32]
          break;
 8001d6a:	e029      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	3304      	adds	r3, #4
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e024      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	623b      	str	r3, [r7, #32]
          break;
 8001d7e:	e01f      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	330c      	adds	r3, #12
 8001d86:	623b      	str	r3, [r7, #32]
          break;
 8001d88:	e01a      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d92:	2304      	movs	r3, #4
 8001d94:	623b      	str	r3, [r7, #32]
          break;
 8001d96:	e013      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da0:	2308      	movs	r3, #8
 8001da2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69fa      	ldr	r2, [r7, #28]
 8001da8:	611a      	str	r2, [r3, #16]
          break;
 8001daa:	e009      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dac:	2308      	movs	r3, #8
 8001dae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	615a      	str	r2, [r3, #20]
          break;
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
          break;
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x130>
          break;
 8001dbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2bff      	cmp	r3, #255	; 0xff
 8001dc4:	d801      	bhi.n	8001dca <HAL_GPIO_Init+0x13a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	e001      	b.n	8001dce <HAL_GPIO_Init+0x13e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2bff      	cmp	r3, #255	; 0xff
 8001dd4:	d802      	bhi.n	8001ddc <HAL_GPIO_Init+0x14c>
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0x152>
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	3b08      	subs	r3, #8
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	210f      	movs	r1, #15
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	6a39      	ldr	r1, [r7, #32]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80b1 	beq.w	8001f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e10:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a4c      	ldr	r2, [pc, #304]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x2b8>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e28:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_GPIO_Init+0x2bc>)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a40      	ldr	r2, [pc, #256]	; (8001f50 <HAL_GPIO_Init+0x2c0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d013      	beq.n	8001e7c <HAL_GPIO_Init+0x1ec>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a3f      	ldr	r2, [pc, #252]	; (8001f54 <HAL_GPIO_Init+0x2c4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00d      	beq.n	8001e78 <HAL_GPIO_Init+0x1e8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <HAL_GPIO_Init+0x2c8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d007      	beq.n	8001e74 <HAL_GPIO_Init+0x1e4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3d      	ldr	r2, [pc, #244]	; (8001f5c <HAL_GPIO_Init+0x2cc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <HAL_GPIO_Init+0x1e0>
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e006      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e004      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e002      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0x1ee>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e8e:	492f      	ldr	r1, [pc, #188]	; (8001f4c <HAL_GPIO_Init+0x2bc>)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	492c      	ldr	r1, [pc, #176]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	608b      	str	r3, [r1, #8]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4928      	ldr	r1, [pc, #160]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	4922      	ldr	r1, [pc, #136]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	491e      	ldr	r1, [pc, #120]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d006      	beq.n	8001f06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4918      	ldr	r1, [pc, #96]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4914      	ldr	r1, [pc, #80]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d021      	beq.n	8001f64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
 8001f2c:	e021      	b.n	8001f72 <HAL_GPIO_Init+0x2e2>
 8001f2e:	bf00      	nop
 8001f30:	10320000 	.word	0x10320000
 8001f34:	10310000 	.word	0x10310000
 8001f38:	10220000 	.word	0x10220000
 8001f3c:	10210000 	.word	0x10210000
 8001f40:	10120000 	.word	0x10120000
 8001f44:	10110000 	.word	0x10110000
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40010800 	.word	0x40010800
 8001f54:	40010c00 	.word	0x40010c00
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40011400 	.word	0x40011400
 8001f60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4909      	ldr	r1, [pc, #36]	; (8001f94 <HAL_GPIO_Init+0x304>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	3301      	adds	r3, #1
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f47f ae8e 	bne.w	8001ca4 <HAL_GPIO_Init+0x14>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	372c      	adds	r7, #44	; 0x2c
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	807b      	strh	r3, [r7, #2]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd6:	787b      	ldrb	r3, [r7, #1]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fdc:	887a      	ldrh	r2, [r7, #2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fe2:	e003      	b.n	8001fec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	041a      	lsls	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	611a      	str	r2, [r3, #16]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002008:	887a      	ldrh	r2, [r7, #2]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	041a      	lsls	r2, r3, #16
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43d9      	mvns	r1, r3
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	400b      	ands	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	611a      	str	r2, [r3, #16]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e26c      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8087 	beq.w	8002156 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b04      	cmp	r3, #4
 8002052:	d00c      	beq.n	800206e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002054:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b08      	cmp	r3, #8
 800205e:	d112      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d10b      	bne.n	8002086 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206e:	4b89      	ldr	r3, [pc, #548]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06c      	beq.n	8002154 <HAL_RCC_OscConfig+0x12c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d168      	bne.n	8002154 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e246      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x76>
 8002090:	4b80      	ldr	r3, [pc, #512]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7f      	ldr	r2, [pc, #508]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b7b      	ldr	r3, [pc, #492]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a7a      	ldr	r2, [pc, #488]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a77      	ldr	r2, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xbc>
 80020ca:	4b72      	ldr	r3, [pc, #456]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a71      	ldr	r2, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6f      	ldr	r3, [pc, #444]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6e      	ldr	r2, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd4>
 80020e4:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a6a      	ldr	r2, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b68      	ldr	r3, [pc, #416]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a67      	ldr	r2, [pc, #412]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fbfa 	bl	80018fc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fbf6 	bl	80018fc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e1fa      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe4>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fbe6 	bl	80018fc <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fbe2 	bl	80018fc <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1e6      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b53      	ldr	r3, [pc, #332]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x10c>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216e:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
 800217a:	4b46      	ldr	r3, [pc, #280]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1ba      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4939      	ldr	r1, [pc, #228]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fb9b 	bl	80018fc <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff fb97 	bl	80018fc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e19b      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4927      	ldr	r1, [pc, #156]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fb7a 	bl	80018fc <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff fb76 	bl	80018fc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e17a      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d03a      	beq.n	80022ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d019      	beq.n	8002272 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff fb5a 	bl	80018fc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff fb56 	bl	80018fc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e15a      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_OscConfig+0x26c>)
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 facc 	bl	8002808 <RCC_Delay>
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x274>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fb40 	bl	80018fc <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	e00f      	b.n	80022a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fb3c 	bl	80018fc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d908      	bls.n	80022a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e140      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	42420000 	.word	0x42420000
 800229c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a0:	4b9e      	ldr	r3, [pc, #632]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e9      	bne.n	8002280 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a6 	beq.w	8002406 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022be:	4b97      	ldr	r3, [pc, #604]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b94      	ldr	r3, [pc, #592]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a93      	ldr	r2, [pc, #588]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b91      	ldr	r3, [pc, #580]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e2:	2301      	movs	r3, #1
 80022e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	4b8e      	ldr	r3, [pc, #568]	; (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f2:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a8a      	ldr	r2, [pc, #552]	; (8002520 <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fe:	f7ff fafd 	bl	80018fc <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7ff faf9 	bl	80018fc <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b64      	cmp	r3, #100	; 0x64
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0fd      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002318:	4b81      	ldr	r3, [pc, #516]	; (8002520 <HAL_RCC_OscConfig+0x4f8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x312>
 800232c:	4b7b      	ldr	r3, [pc, #492]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a7a      	ldr	r2, [pc, #488]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e02d      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x334>
 8002342:	4b76      	ldr	r3, [pc, #472]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a75      	ldr	r2, [pc, #468]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	4b73      	ldr	r3, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4a72      	ldr	r2, [pc, #456]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6213      	str	r3, [r2, #32]
 800235a:	e01c      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b05      	cmp	r3, #5
 8002362:	d10c      	bne.n	800237e <HAL_RCC_OscConfig+0x356>
 8002364:	4b6d      	ldr	r3, [pc, #436]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a6c      	ldr	r2, [pc, #432]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a69      	ldr	r2, [pc, #420]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e00b      	b.n	8002396 <HAL_RCC_OscConfig+0x36e>
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a66      	ldr	r2, [pc, #408]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b64      	ldr	r3, [pc, #400]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a63      	ldr	r2, [pc, #396]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d015      	beq.n	80023ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff faad 	bl	80018fc <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7ff faa9 	bl	80018fc <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0ab      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b57      	ldr	r3, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCC_OscConfig+0x37e>
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7ff fa97 	bl	80018fc <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7ff fa93 	bl	80018fc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e095      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4a47      	ldr	r2, [pc, #284]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002404:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8081 	beq.w	8002512 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	4b42      	ldr	r3, [pc, #264]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d061      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d146      	bne.n	80024b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002424:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_OscConfig+0x4fc>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fa67 	bl	80018fc <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff fa63 	bl	80018fc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e067      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800245a:	4b30      	ldr	r3, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	492d      	ldr	r1, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a19      	ldr	r1, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	430b      	orrs	r3, r1
 800247e:	4927      	ldr	r1, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002484:	4b27      	ldr	r3, [pc, #156]	; (8002524 <HAL_RCC_OscConfig+0x4fc>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248a:	f7ff fa37 	bl	80018fc <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7ff fa33 	bl	80018fc <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e037      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x46a>
 80024b0:	e02f      	b.n	8002512 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <HAL_RCC_OscConfig+0x4fc>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff fa20 	bl	80018fc <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7ff fa1c 	bl	80018fc <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e020      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x498>
 80024de:	e018      	b.n	8002512 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e013      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	42420060 	.word	0x42420060

08002528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d0      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	4965      	ldr	r1, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800258e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d040      	beq.n	8002648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d115      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e073      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4936      	ldr	r1, [pc, #216]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002618:	f7ff f970 	bl	80018fc <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7ff f96c 	bl	80018fc <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e053      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d210      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0207 	bic.w	r2, r3, #7
 800265e:	4922      	ldr	r1, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f821 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1cc>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1d0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f8ce 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080041e4 	.word	0x080041e4
 80026f4:	20000080 	.word	0x20000080
 80026f8:	20000084 	.word	0x20000084

080026fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_RCC_GetSysClockFreq+0x94>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b04      	cmp	r3, #4
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x30>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x36>
 800272a:	e027      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_GetSysClockFreq+0x98>)
 800272e:	613b      	str	r3, [r7, #16]
      break;
 8002730:	e027      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	0c9b      	lsrs	r3, r3, #18
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_RCC_GetSysClockFreq+0x9c>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d010      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_RCC_GetSysClockFreq+0x94>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0c5b      	lsrs	r3, r3, #17
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	4a11      	ldr	r2, [pc, #68]	; (800279c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_RCC_GetSysClockFreq+0x98>)
 800275e:	fb02 f203 	mul.w	r2, r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e004      	b.n	8002776 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	613b      	str	r3, [r7, #16]
      break;
 800277a:	e002      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetSysClockFreq+0x98>)
 800277e:	613b      	str	r3, [r7, #16]
      break;
 8002780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002782:	693b      	ldr	r3, [r7, #16]
}
 8002784:	4618      	mov	r0, r3
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	007a1200 	.word	0x007a1200
 8002798:	080041fc 	.word	0x080041fc
 800279c:	0800420c 	.word	0x0800420c
 80027a0:	003d0900 	.word	0x003d0900

080027a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	20000080 	.word	0x20000080

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027bc:	f7ff fff2 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4903      	ldr	r1, [pc, #12]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	080041f4 	.word	0x080041f4

080027e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e4:	f7ff ffde 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	0adb      	lsrs	r3, r3, #11
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	080041f4 	.word	0x080041f4

08002808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <RCC_Delay+0x34>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <RCC_Delay+0x38>)
 8002816:	fba2 2303 	umull	r2, r3, r2, r3
 800281a:	0a5b      	lsrs	r3, r3, #9
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002824:	bf00      	nop
  }
  while (Delay --);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1e5a      	subs	r2, r3, #1
 800282a:	60fa      	str	r2, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f9      	bne.n	8002824 <RCC_Delay+0x1c>
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	20000080 	.word	0x20000080
 8002840:	10624dd3 	.word	0x10624dd3

08002844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e041      	b.n	80028da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe feb8 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3304      	adds	r3, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f000 fc30 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e03a      	b.n	8002972 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0201 	orr.w	r2, r2, #1
 8002912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_TIM_Base_Start_IT+0x98>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00e      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x58>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d009      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x58>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <HAL_TIM_Base_Start_IT+0x9c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d004      	beq.n	800293c <HAL_TIM_Base_Start_IT+0x58>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_TIM_Base_Start_IT+0xa0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d111      	bne.n	8002960 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b06      	cmp	r3, #6
 800294c:	d010      	beq.n	8002970 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295e:	e007      	b.n	8002970 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800

08002988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e041      	b.n	8002a1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f839 	bl	8002a26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 fb8e 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <HAL_TIM_PWM_Start+0x24>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e022      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x6a>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d109      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x3e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e015      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x6a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d109      	bne.n	8002a90 <HAL_TIM_PWM_Start+0x58>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e008      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x6a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e05e      	b.n	8002b68 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0x82>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab8:	e013      	b.n	8002ae2 <HAL_TIM_PWM_Start+0xaa>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Start+0x92>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac8:	e00b      	b.n	8002ae2 <HAL_TIM_PWM_Start+0xaa>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_PWM_Start+0xa2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad8:	e003      	b.n	8002ae2 <HAL_TIM_PWM_Start+0xaa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	6839      	ldr	r1, [r7, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fd7c 	bl	80035e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_TIM_PWM_Start+0x138>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d107      	bne.n	8002b0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a18      	ldr	r2, [pc, #96]	; (8002b70 <HAL_TIM_PWM_Start+0x138>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00e      	beq.n	8002b32 <HAL_TIM_PWM_Start+0xfa>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d009      	beq.n	8002b32 <HAL_TIM_PWM_Start+0xfa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_TIM_PWM_Start+0x13c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_TIM_PWM_Start+0xfa>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_TIM_PWM_Start+0x140>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d111      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d010      	beq.n	8002b66 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b54:	e007      	b.n	8002b66 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800

08002b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d122      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0202 	mvn.w	r2, #2
 8002ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa76 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002bc4:	e005      	b.n	8002bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa69 	bl	800309e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa78 	bl	80030c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0204 	mvn.w	r2, #4
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fa4c 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa3f 	bl	800309e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa4e 	bl	80030c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0208 	mvn.w	r2, #8
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa22 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa15 	bl	800309e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fa24 	bl	80030c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9f8 	bl	80030b0 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9eb 	bl	800309e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f9fa 	bl	80030c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0201 	mvn.w	r2, #1
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe f9ee 	bl	80010dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fce9 	bl	80036fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f9be 	bl	80030d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0220 	mvn.w	r2, #32
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fcb4 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e0ae      	b.n	8002f08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	f200 809f 	bhi.w	8002ef8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002dba:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc0:	08002df5 	.word	0x08002df5
 8002dc4:	08002ef9 	.word	0x08002ef9
 8002dc8:	08002ef9 	.word	0x08002ef9
 8002dcc:	08002ef9 	.word	0x08002ef9
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08002ef9 	.word	0x08002ef9
 8002dd8:	08002ef9 	.word	0x08002ef9
 8002ddc:	08002ef9 	.word	0x08002ef9
 8002de0:	08002e77 	.word	0x08002e77
 8002de4:	08002ef9 	.word	0x08002ef9
 8002de8:	08002ef9 	.word	0x08002ef9
 8002dec:	08002ef9 	.word	0x08002ef9
 8002df0:	08002eb7 	.word	0x08002eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f9d6 	bl	80031ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0208 	orr.w	r2, r2, #8
 8002e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6999      	ldr	r1, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	619a      	str	r2, [r3, #24]
      break;
 8002e32:	e064      	b.n	8002efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fa1c 	bl	8003278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6999      	ldr	r1, [r3, #24]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
      break;
 8002e74:	e043      	b.n	8002efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fa65 	bl	800334c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0208 	orr.w	r2, r2, #8
 8002e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0204 	bic.w	r2, r2, #4
 8002ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69d9      	ldr	r1, [r3, #28]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
      break;
 8002eb4:	e023      	b.n	8002efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 faaf 	bl	8003420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69d9      	ldr	r1, [r3, #28]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	021a      	lsls	r2, r3, #8
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	61da      	str	r2, [r3, #28]
      break;
 8002ef6:	e002      	b.n	8002efe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	75fb      	strb	r3, [r7, #23]
      break;
 8002efc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_ConfigClockSource+0x1c>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0b4      	b.n	8003096 <HAL_TIM_ConfigClockSource+0x186>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f64:	d03e      	beq.n	8002fe4 <HAL_TIM_ConfigClockSource+0xd4>
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6a:	f200 8087 	bhi.w	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	f000 8086 	beq.w	8003082 <HAL_TIM_ConfigClockSource+0x172>
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d87f      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b70      	cmp	r3, #112	; 0x70
 8002f7e:	d01a      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0xa6>
 8002f80:	2b70      	cmp	r3, #112	; 0x70
 8002f82:	d87b      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b60      	cmp	r3, #96	; 0x60
 8002f86:	d050      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x11a>
 8002f88:	2b60      	cmp	r3, #96	; 0x60
 8002f8a:	d877      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b50      	cmp	r3, #80	; 0x50
 8002f8e:	d03c      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xfa>
 8002f90:	2b50      	cmp	r3, #80	; 0x50
 8002f92:	d873      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d058      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x13a>
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d86f      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002f9c:	2b30      	cmp	r3, #48	; 0x30
 8002f9e:	d064      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x15a>
 8002fa0:	2b30      	cmp	r3, #48	; 0x30
 8002fa2:	d86b      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d060      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x15a>
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d867      	bhi.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d05c      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x15a>
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d05a      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x15a>
 8002fb4:	e062      	b.n	800307c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f000 faf0 	bl	80035aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	609a      	str	r2, [r3, #8]
      break;
 8002fe2:	e04f      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f000 fad9 	bl	80035aa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003006:	609a      	str	r2, [r3, #8]
      break;
 8003008:	e03c      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	461a      	mov	r2, r3
 8003018:	f000 fa50 	bl	80034bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2150      	movs	r1, #80	; 0x50
 8003022:	4618      	mov	r0, r3
 8003024:	f000 faa7 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 8003028:	e02c      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	461a      	mov	r2, r3
 8003038:	f000 fa6e 	bl	8003518 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2160      	movs	r1, #96	; 0x60
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fa97 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 8003048:	e01c      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	461a      	mov	r2, r3
 8003058:	f000 fa30 	bl	80034bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2140      	movs	r1, #64	; 0x40
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fa87 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 8003068:	e00c      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f000 fa7e 	bl	8003576 <TIM_ITRx_SetConfig>
      break;
 800307a:	e003      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      break;
 8003080:	e000      	b.n	8003084 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003082:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	bc80      	pop	{r7}
 80030c0:	4770      	bx	lr

080030c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
	...

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <TIM_Base_SetConfig+0xb8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x30>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x30>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <TIM_Base_SetConfig+0xbc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x30>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a25      	ldr	r2, [pc, #148]	; (80031a8 <TIM_Base_SetConfig+0xc0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <TIM_Base_SetConfig+0xb8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_Base_SetConfig+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0x62>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <TIM_Base_SetConfig+0xbc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <TIM_Base_SetConfig+0xc0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <TIM_Base_SetConfig+0xb8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d103      	bne.n	8003190 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	615a      	str	r2, [r3, #20]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800

080031ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f023 0201 	bic.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0302 	bic.w	r3, r3, #2
 80031f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <TIM_OC1_SetConfig+0xc8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10c      	bne.n	8003222 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0308 	bic.w	r3, r3, #8
 800320e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a13      	ldr	r2, [pc, #76]	; (8003274 <TIM_OC1_SetConfig+0xc8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d111      	bne.n	800324e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40012c00 	.word	0x40012c00

08003278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 0210 	bic.w	r2, r3, #16
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0320 	bic.w	r3, r3, #32
 80032c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <TIM_OC2_SetConfig+0xd0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10d      	bne.n	80032f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a14      	ldr	r2, [pc, #80]	; (8003348 <TIM_OC2_SetConfig+0xd0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d113      	bne.n	8003324 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800330a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	40012c00 	.word	0x40012c00

0800334c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <TIM_OC3_SetConfig+0xd0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10d      	bne.n	80033c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <TIM_OC3_SetConfig+0xd0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d113      	bne.n	80033f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40012c00 	.word	0x40012c00

08003420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800346a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	031b      	lsls	r3, r3, #12
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <TIM_OC4_SetConfig+0x98>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d109      	bne.n	8003494 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	019b      	lsls	r3, r3, #6
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	40012c00 	.word	0x40012c00

080034bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0201 	bic.w	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f023 030a 	bic.w	r3, r3, #10
 80034f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f023 0210 	bic.w	r2, r3, #16
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	031b      	lsls	r3, r3, #12
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003554:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	621a      	str	r2, [r3, #32]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	f043 0307 	orr.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2201      	movs	r2, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1a      	ldr	r2, [r3, #32]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr

08003630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003644:	2302      	movs	r3, #2
 8003646:	e046      	b.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a16      	ldr	r2, [pc, #88]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d009      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10c      	bne.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e042      	b.n	80037a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd ffc4 	bl	80016c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fc7f 	bl	8004058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b0ba      	sub	sp, #232	; 0xe8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037dc:	2300      	movs	r3, #0
 80037de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_UART_IRQHandler+0x66>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fb63 	bl	8003eda <UART_Receive_IT>
      return;
 8003814:	e25b      	b.n	8003cce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80de 	beq.w	80039dc <HAL_UART_IRQHandler+0x22c>
 8003820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800382c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003830:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80d1 	beq.w	80039dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800383a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_UART_IRQHandler+0xae>
 8003846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800384a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_UART_IRQHandler+0xd2>
 800386a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_UART_IRQHandler+0xf6>
 800388e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d011      	beq.n	80038d6 <HAL_UART_IRQHandler+0x126>
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f043 0208 	orr.w	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 81f2 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_UART_IRQHandler+0x14e>
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 faee 	bl	8003eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <HAL_UART_IRQHandler+0x17a>
 8003922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d04f      	beq.n	80039ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9f8 	bl	8003d20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d041      	beq.n	80039c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3314      	adds	r3, #20
 8003944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800395c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3314      	adds	r3, #20
 8003966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800396a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800396e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1d9      	bne.n	800393e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398e:	2b00      	cmp	r3, #0
 8003990:	d013      	beq.n	80039ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	4a7e      	ldr	r2, [pc, #504]	; (8003b90 <HAL_UART_IRQHandler+0x3e0>)
 8003998:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe f8fe 	bl	8001ba0 <HAL_DMA_Abort_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039b4:	4610      	mov	r0, r2
 80039b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e00e      	b.n	80039d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f99c 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e00a      	b.n	80039d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f998 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e006      	b.n	80039d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f994 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039d6:	e175      	b.n	8003cc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	bf00      	nop
    return;
 80039da:	e173      	b.n	8003cc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	f040 814f 	bne.w	8003c84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8148 	beq.w	8003c84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8141 	beq.w	8003c84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80b6 	beq.w	8003b94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8145 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a46:	429a      	cmp	r2, r3
 8003a48:	f080 813e 	bcs.w	8003cc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	f000 8088 	beq.w	8003b70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a8c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1d9      	bne.n	8003a60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ad0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ad8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e1      	bne.n	8003aac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e3      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b40:	f023 0310 	bic.w	r3, r3, #16
 8003b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	330c      	adds	r3, #12
 8003b4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b52:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e3      	bne.n	8003b2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd ffdd 	bl	8001b2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8bf 	bl	8003d0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b8c:	e09c      	b.n	8003cc8 <HAL_UART_IRQHandler+0x518>
 8003b8e:	bf00      	nop
 8003b90:	08003de5 	.word	0x08003de5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 808e 	beq.w	8003ccc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8089 	beq.w	8003ccc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bde:	647a      	str	r2, [r7, #68]	; 0x44
 8003be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e3      	bne.n	8003bba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3314      	adds	r3, #20
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	623b      	str	r3, [r7, #32]
   return(result);
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c16:	633a      	str	r2, [r7, #48]	; 0x30
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	330c      	adds	r3, #12
 8003c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0310 	bic.w	r3, r3, #16
 8003c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c5c:	61fa      	str	r2, [r7, #28]
 8003c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	69b9      	ldr	r1, [r7, #24]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	617b      	str	r3, [r7, #20]
   return(result);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e3      	bne.n	8003c38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f844 	bl	8003d0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c82:	e023      	b.n	8003ccc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x4f4>
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8b5 	bl	8003e0c <UART_Transmit_IT>
    return;
 8003ca2:	e014      	b.n	8003cce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <HAL_UART_IRQHandler+0x51e>
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8f4 	bl	8003eaa <UART_EndTransmit_IT>
    return;
 8003cc2:	e004      	b.n	8003cce <HAL_UART_IRQHandler+0x51e>
    return;
 8003cc4:	bf00      	nop
 8003cc6:	e002      	b.n	8003cce <HAL_UART_IRQHandler+0x51e>
      return;
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <HAL_UART_IRQHandler+0x51e>
      return;
 8003ccc:	bf00      	nop
  }
}
 8003cce:	37e8      	adds	r7, #232	; 0xe8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b095      	sub	sp, #84	; 0x54
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	330c      	adds	r3, #12
 8003d46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d48:	643a      	str	r2, [r7, #64]	; 0x40
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e5      	bne.n	8003d28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3314      	adds	r3, #20
 8003d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3314      	adds	r3, #20
 8003d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d119      	bne.n	8003dcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f023 0310 	bic.w	r3, r3, #16
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db8:	61ba      	str	r2, [r7, #24]
 8003dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dda:	bf00      	nop
 8003ddc:	3754      	adds	r7, #84	; 0x54
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff ff7a 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e04:	bf00      	nop
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b21      	cmp	r3, #33	; 0x21
 8003e1e:	d13e      	bne.n	8003e9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d114      	bne.n	8003e54 <UART_Transmit_IT+0x48>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d110      	bne.n	8003e54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	1c9a      	adds	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]
 8003e52:	e008      	b.n	8003e66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	1c59      	adds	r1, r3, #1
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6211      	str	r1, [r2, #32]
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4619      	mov	r1, r3
 8003e74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e000      	b.n	8003ea0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e9e:	2302      	movs	r3, #2
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ff02 	bl	8003cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b08c      	sub	sp, #48	; 0x30
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	f040 80ae 	bne.w	800404c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef8:	d117      	bne.n	8003f2a <UART_Receive_IT+0x50>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d113      	bne.n	8003f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
 8003f28:	e026      	b.n	8003f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d007      	beq.n	8003f4e <UART_Receive_IT+0x74>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <UART_Receive_IT+0x82>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e008      	b.n	8003f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4619      	mov	r1, r3
 8003f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d15d      	bne.n	8004048 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0220 	bic.w	r2, r2, #32
 8003f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d135      	bne.n	800403e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f023 0310 	bic.w	r3, r3, #16
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	623a      	str	r2, [r7, #32]
 8003ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	69f9      	ldr	r1, [r7, #28]
 8003ffe:	6a3a      	ldr	r2, [r7, #32]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	61bb      	str	r3, [r7, #24]
   return(result);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b10      	cmp	r3, #16
 8004018:	d10a      	bne.n	8004030 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fe67 	bl	8003d0a <HAL_UARTEx_RxEventCallback>
 800403c:	e002      	b.n	8004044 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fe51 	bl	8003ce6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e002      	b.n	800404e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	3730      	adds	r7, #48	; 0x30
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004092:	f023 030c 	bic.w	r3, r3, #12
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	430b      	orrs	r3, r1
 800409e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2c      	ldr	r2, [pc, #176]	; (800416c <UART_SetConfig+0x114>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7fe fb8e 	bl	80027e0 <HAL_RCC_GetPCLK2Freq>
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	e002      	b.n	80040ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040c8:	f7fe fb76 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 80040cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009a      	lsls	r2, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	4a22      	ldr	r2, [pc, #136]	; (8004170 <UART_SetConfig+0x118>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	0119      	lsls	r1, r3, #4
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fbb2 f2f3 	udiv	r2, r2, r3
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <UART_SetConfig+0x118>)
 8004106:	fba3 0302 	umull	r0, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2064      	movs	r0, #100	; 0x64
 800410e:	fb00 f303 	mul.w	r3, r0, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	; 0x32
 8004118:	4a15      	ldr	r2, [pc, #84]	; (8004170 <UART_SetConfig+0x118>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004124:	4419      	add	r1, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009a      	lsls	r2, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	fbb2 f2f3 	udiv	r2, r2, r3
 800413c:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <UART_SetConfig+0x118>)
 800413e:	fba3 0302 	umull	r0, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2064      	movs	r0, #100	; 0x64
 8004146:	fb00 f303 	mul.w	r3, r0, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a07      	ldr	r2, [pc, #28]	; (8004170 <UART_SetConfig+0x118>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	440a      	add	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40013800 	.word	0x40013800
 8004170:	51eb851f 	.word	0x51eb851f

08004174 <__libc_init_array>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	2600      	movs	r6, #0
 8004178:	4d0c      	ldr	r5, [pc, #48]	; (80041ac <__libc_init_array+0x38>)
 800417a:	4c0d      	ldr	r4, [pc, #52]	; (80041b0 <__libc_init_array+0x3c>)
 800417c:	1b64      	subs	r4, r4, r5
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	42a6      	cmp	r6, r4
 8004182:	d109      	bne.n	8004198 <__libc_init_array+0x24>
 8004184:	f000 f822 	bl	80041cc <_init>
 8004188:	2600      	movs	r6, #0
 800418a:	4d0a      	ldr	r5, [pc, #40]	; (80041b4 <__libc_init_array+0x40>)
 800418c:	4c0a      	ldr	r4, [pc, #40]	; (80041b8 <__libc_init_array+0x44>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	42a6      	cmp	r6, r4
 8004194:	d105      	bne.n	80041a2 <__libc_init_array+0x2e>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	f855 3b04 	ldr.w	r3, [r5], #4
 800419c:	4798      	blx	r3
 800419e:	3601      	adds	r6, #1
 80041a0:	e7ee      	b.n	8004180 <__libc_init_array+0xc>
 80041a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a6:	4798      	blx	r3
 80041a8:	3601      	adds	r6, #1
 80041aa:	e7f2      	b.n	8004192 <__libc_init_array+0x1e>
 80041ac:	08004210 	.word	0x08004210
 80041b0:	08004210 	.word	0x08004210
 80041b4:	08004210 	.word	0x08004210
 80041b8:	08004214 	.word	0x08004214

080041bc <memset>:
 80041bc:	4603      	mov	r3, r0
 80041be:	4402      	add	r2, r0
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <_init>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr

080041d8 <_fini>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr
