
BTL_VXL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08005020  08005020  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005020  08005020  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08005028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200000f0  08005118  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005118  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016561  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c99  00000000  00000000  0003667a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00039318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0003a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d84  00000000  00000000  0003ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012355  00000000  00000000  00054b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b409  00000000  00000000  00066e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  000f22c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f08 	.word	0x08004f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08004f08 	.word	0x08004f08

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2uiz>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	d20e      	bcs.n	800063a <__aeabi_f2uiz+0x22>
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30b      	bcc.n	800063a <__aeabi_f2uiz+0x22>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d409      	bmi.n	8000640 <__aeabi_f2uiz+0x28>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	fa23 f002 	lsr.w	r0, r3, r2
 8000638:	4770      	bx	lr
 800063a:	f04f 0000 	mov.w	r0, #0
 800063e:	4770      	bx	lr
 8000640:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000644:	d101      	bne.n	800064a <__aeabi_f2uiz+0x32>
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	d102      	bne.n	8000650 <__aeabi_f2uiz+0x38>
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <isButtonPressed>:


int button_flag[4] = {0,0,0,0};
int TimeOutForKeyPress =  200;

int isButtonPressed(int index){
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1){
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <isButtonPressed+0x30>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d106      	bne.n	800067a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <isButtonPressed+0x30>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2100      	movs	r1, #0
 8000672:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <isButtonPressed+0x24>
	}
	return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000010c 	.word	0x2000010c

0800068c <subKeyProcess>:

void subKeyProcess(int i){
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <subKeyProcess+0x1c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2101      	movs	r1, #1
 800069a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	2000010c 	.word	0x2000010c

080006ac <ReadPin>:

GPIO_PinState ReadPin(int index){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	if (index == 0) return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d105      	bne.n	80006c6 <ReadPin+0x1a>
 80006ba:	2102      	movs	r1, #2
 80006bc:	4812      	ldr	r0, [pc, #72]	; (8000708 <ReadPin+0x5c>)
 80006be:	f001 fde1 	bl	8002284 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	e01b      	b.n	80006fe <ReadPin+0x52>
	else if (index == 1) return HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d105      	bne.n	80006d8 <ReadPin+0x2c>
 80006cc:	2110      	movs	r1, #16
 80006ce:	480e      	ldr	r0, [pc, #56]	; (8000708 <ReadPin+0x5c>)
 80006d0:	f001 fdd8 	bl	8002284 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	e012      	b.n	80006fe <ReadPin+0x52>
	else if (index == 2) return HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d105      	bne.n	80006ea <ReadPin+0x3e>
 80006de:	2101      	movs	r1, #1
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <ReadPin+0x60>)
 80006e2:	f001 fdcf 	bl	8002284 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	e009      	b.n	80006fe <ReadPin+0x52>
	else if (index == 3) return HAL_GPIO_ReadPin(Button4_GPIO_Port, Button4_Pin);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d105      	bne.n	80006fc <ReadPin+0x50>
 80006f0:	2101      	movs	r1, #1
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <ReadPin+0x5c>)
 80006f4:	f001 fdc6 	bl	8002284 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	e000      	b.n	80006fe <ReadPin+0x52>
	else return 0;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40010800 	.word	0x40010800
 800070c:	40010c00 	.word	0x40010c00

08000710 <getKeyinput>:

void getKeyinput(){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	for (int i = 0 ; i < 4; i++){
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	e05c      	b.n	80007d6 <getKeyinput+0xc6>
		KeyReg0[i] = KeyReg1[i];
 800071c:	4a32      	ldr	r2, [pc, #200]	; (80007e8 <getKeyinput+0xd8>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000724:	4931      	ldr	r1, [pc, #196]	; (80007ec <getKeyinput+0xdc>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800072c:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <getKeyinput+0xe0>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000734:	492c      	ldr	r1, [pc, #176]	; (80007e8 <getKeyinput+0xd8>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = ReadPin(i);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ffb5 	bl	80006ac <ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	4619      	mov	r1, r3
 8000746:	4a2a      	ldr	r2, [pc, #168]	; (80007f0 <getKeyinput+0xe0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800074e:	4a27      	ldr	r2, [pc, #156]	; (80007ec <getKeyinput+0xdc>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000756:	4924      	ldr	r1, [pc, #144]	; (80007e8 <getKeyinput+0xd8>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800075e:	429a      	cmp	r2, r3
 8000760:	d136      	bne.n	80007d0 <getKeyinput+0xc0>
 8000762:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <getKeyinput+0xd8>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076a:	4921      	ldr	r1, [pc, #132]	; (80007f0 <getKeyinput+0xe0>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000772:	429a      	cmp	r2, r3
 8000774:	d12c      	bne.n	80007d0 <getKeyinput+0xc0>
			if (KeyReg3[i] != KeyReg2[i]){
 8000776:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <getKeyinput+0xe4>)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077e:	491c      	ldr	r1, [pc, #112]	; (80007f0 <getKeyinput+0xe0>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000786:	429a      	cmp	r2, r3
 8000788:	d014      	beq.n	80007b4 <getKeyinput+0xa4>
				KeyReg3[i] = KeyReg2[i];
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <getKeyinput+0xe0>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000792:	4918      	ldr	r1, [pc, #96]	; (80007f4 <getKeyinput+0xe4>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 800079a:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <getKeyinput+0xe4>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d114      	bne.n	80007d0 <getKeyinput+0xc0>
					TimeOutForKeyPress= 200;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <getKeyinput+0xe8>)
 80007a8:	22c8      	movs	r2, #200	; 0xc8
 80007aa:	601a      	str	r2, [r3, #0]
					subKeyProcess(i);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff6d 	bl	800068c <subKeyProcess>
 80007b2:	e00d      	b.n	80007d0 <getKeyinput+0xc0>
				}
			}
			else{
				TimeOutForKeyPress --;
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <getKeyinput+0xe8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <getKeyinput+0xe8>)
 80007bc:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress ==0 ){
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <getKeyinput+0xe8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d104      	bne.n	80007d0 <getKeyinput+0xc0>
					KeyReg3[i] = NORMAL_STATE;
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <getKeyinput+0xe4>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2101      	movs	r1, #1
 80007cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0 ; i < 4; i++){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	dd9f      	ble.n	800071c <getKeyinput+0xc>
				}
			}
		}
	}

}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000010 	.word	0x20000010
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000020 	.word	0x20000020
 80007f4:	20000030 	.word	0x20000030
 80007f8:	20000040 	.word	0x20000040

080007fc <get_buzzer_counter>:
extern TIM_HandleTypeDef htim3;  // External declaration
int buzzer_counter;
int state_buzzer = 1	;
int scale_buzzer=0;
float cycle;
void get_buzzer_counter(){	// for take the value of the red time
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	buzzer_counter = red_time/2;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <get_buzzer_counter+0x1c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	0fda      	lsrs	r2, r3, #31
 8000806:	4413      	add	r3, r2
 8000808:	105b      	asrs	r3, r3, #1
 800080a:	461a      	mov	r2, r3
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <get_buzzer_counter+0x20>)
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	2000004c 	.word	0x2000004c
 800081c:	20000174 	.word	0x20000174

08000820 <cal_cycle>:
void cal_cycle (){
 8000820:	b598      	push	{r3, r4, r7, lr}
 8000822:	af00      	add	r7, sp, #0
	//cycle = ((float)buzzer_counter / red_time) * 100.0f;	// the speaker decreases volume every 1s
	cycle = ((float)buzzer_counter / red_time) * 100.0f-scale_buzzer; // the speaker decreases volume every 100ms
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <cal_cycle+0x6c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fd51 	bl	80002d0 <__aeabi_i2f>
 800082e:	4604      	mov	r4, r0
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <cal_cycle+0x70>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fd4b 	bl	80002d0 <__aeabi_i2f>
 800083a:	4603      	mov	r3, r0
 800083c:	4619      	mov	r1, r3
 800083e:	4620      	mov	r0, r4
 8000840:	f7ff fe4e 	bl	80004e0 <__aeabi_fdiv>
 8000844:	4603      	mov	r3, r0
 8000846:	4913      	ldr	r1, [pc, #76]	; (8000894 <cal_cycle+0x74>)
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fd95 	bl	8000378 <__aeabi_fmul>
 800084e:	4603      	mov	r3, r0
 8000850:	461c      	mov	r4, r3
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <cal_cycle+0x78>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd3a 	bl	80002d0 <__aeabi_i2f>
 800085c:	4603      	mov	r3, r0
 800085e:	4619      	mov	r1, r3
 8000860:	4620      	mov	r0, r4
 8000862:	f7ff fc7f 	bl	8000164 <__aeabi_fsub>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <cal_cycle+0x7c>)
 800086c:	601a      	str	r2, [r3, #0]
	scale_buzzer++;
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <cal_cycle+0x78>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a08      	ldr	r2, [pc, #32]	; (8000898 <cal_cycle+0x78>)
 8000876:	6013      	str	r3, [r2, #0]
	if (scale_buzzer>=10){
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <cal_cycle+0x78>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b09      	cmp	r3, #9
 800087e:	dd02      	ble.n	8000886 <cal_cycle+0x66>
		scale_buzzer=0;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <cal_cycle+0x78>)
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
	}
}
 8000886:	bf00      	nop
 8000888:	bd98      	pop	{r3, r4, r7, pc}
 800088a:	bf00      	nop
 800088c:	20000174 	.word	0x20000174
 8000890:	2000004c 	.word	0x2000004c
 8000894:	42c80000 	.word	0x42c80000
 8000898:	2000011c 	.word	0x2000011c
 800089c:	20000170 	.word	0x20000170

080008a0 <buzzer>:
void buzzer(){
 80008a0:	b598      	push	{r3, r4, r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	switch(state_buzzer){
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <buzzer+0x90>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d002      	beq.n	80008b2 <buzzer+0x12>
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d036      	beq.n	800091e <buzzer+0x7e>
	}
	break;
	case OFF:
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
		break;
	default: break;
 80008b0:	e03b      	b.n	800092a <buzzer+0x8a>
	if (timer_flag[6] == 1){// just for decrease the counter, like the red time
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <buzzer+0x94>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d111      	bne.n	80008de <buzzer+0x3e>
		if (buzzer_counter>=0)
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <buzzer+0x98>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db04      	blt.n	80008cc <buzzer+0x2c>
		{HAL_GPIO_TogglePin(TEST_GPIO_Port,TEST_Pin);}
 80008c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c6:	481d      	ldr	r0, [pc, #116]	; (800093c <buzzer+0x9c>)
 80008c8:	f001 fd0b 	bl	80022e2 <HAL_GPIO_TogglePin>
		buzzer_counter--;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <buzzer+0x98>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	4a19      	ldr	r2, [pc, #100]	; (8000938 <buzzer+0x98>)
 80008d4:	6013      	str	r3, [r2, #0]
		setTimer(100, 6);
 80008d6:	2106      	movs	r1, #6
 80008d8:	2064      	movs	r0, #100	; 0x64
 80008da:	f000 fe19 	bl	8001510 <setTimer>
	if (timer_flag[7] == 1){// for update the PWM more detail
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <buzzer+0x94>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d114      	bne.n	8000910 <buzzer+0x70>
		cal_cycle ();
 80008e6:	f7ff ff9b 	bl	8000820 <cal_cycle>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,100- cycle);
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <buzzer+0xa0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4814      	ldr	r0, [pc, #80]	; (8000944 <buzzer+0xa4>)
 80008f2:	f7ff fc37 	bl	8000164 <__aeabi_fsub>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <buzzer+0xa8>)
 80008fc:	681c      	ldr	r4, [r3, #0]
 80008fe:	4610      	mov	r0, r2
 8000900:	f7ff fe8a 	bl	8000618 <__aeabi_f2uiz>
 8000904:	4603      	mov	r3, r0
 8000906:	6363      	str	r3, [r4, #52]	; 0x34
		setTimer(10, 7);// because we want to update the speaker every 100ms, so we set 10
 8000908:	2107      	movs	r1, #7
 800090a:	200a      	movs	r0, #10
 800090c:	f000 fe00 	bl	8001510 <setTimer>
	if (buzzer_counter==0){
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <buzzer+0x98>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d107      	bne.n	8000928 <buzzer+0x88>
		get_buzzer_counter();
 8000918:	f7ff ff70 	bl	80007fc <get_buzzer_counter>
	break;
 800091c:	e004      	b.n	8000928 <buzzer+0x88>
		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 0);
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <buzzer+0xa8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2200      	movs	r2, #0
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000926:	e000      	b.n	800092a <buzzer+0x8a>
	break;
 8000928:	bf00      	nop
	}
}
 800092a:	bf00      	nop
 800092c:	bd98      	pop	{r3, r4, r7, pc}
 800092e:	bf00      	nop
 8000930:	20000044 	.word	0x20000044
 8000934:	20000058 	.word	0x20000058
 8000938:	20000174 	.word	0x20000174
 800093c:	40011000 	.word	0x40011000
 8000940:	20000170 	.word	0x20000170
 8000944:	42c80000 	.word	0x42c80000
 8000948:	20000184 	.word	0x20000184

0800094c <fsm_auto>:
int green_time = 3;
int red_time_cd = 0 ; // temp variable for red time length
int yellow_time_cd= 0 ;
int green_time_cd = 0 ;

void fsm_auto(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	switch (status){
 8000950:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <fsm_auto+0x164>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3b5a      	subs	r3, #90	; 0x5a
 8000956:	2b04      	cmp	r3, #4
 8000958:	f200 809e 	bhi.w	8000a98 <fsm_auto+0x14c>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <fsm_auto+0x18>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000979 	.word	0x08000979
 8000968:	08000999 	.word	0x08000999
 800096c:	080009d5 	.word	0x080009d5
 8000970:	08000a19 	.word	0x08000a19
 8000974:	08000a55 	.word	0x08000a55
	case INIT:
		red_time_cd = red_time; // time length = 5s, start at 4 and end at 0
 8000978:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <fsm_auto+0x168>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <fsm_auto+0x16c>)
 800097e:	6013      	str	r3, [r2, #0]
		green_time_cd = green_time;
 8000980:	4b4e      	ldr	r3, [pc, #312]	; (8000abc <fsm_auto+0x170>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a4e      	ldr	r2, [pc, #312]	; (8000ac0 <fsm_auto+0x174>)
 8000986:	6013      	str	r3, [r2, #0]
		setTimer(100, 0);
 8000988:	2100      	movs	r1, #0
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f000 fdc0 	bl	8001510 <setTimer>
		status = AUTO_RED_GREEN;
 8000990:	4b47      	ldr	r3, [pc, #284]	; (8000ab0 <fsm_auto+0x164>)
 8000992:	225b      	movs	r2, #91	; 0x5b
 8000994:	601a      	str	r2, [r3, #0]
		break;
 8000996:	e088      	b.n	8000aaa <fsm_auto+0x15e>
	case AUTO_RED_GREEN:
		if (timer_flag[0] == 1){
 8000998:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <fsm_auto+0x178>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d17d      	bne.n	8000a9c <fsm_auto+0x150>
			red_time_cd --;
 80009a0:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <fsm_auto+0x16c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	4a44      	ldr	r2, [pc, #272]	; (8000ab8 <fsm_auto+0x16c>)
 80009a8:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <fsm_auto+0x174>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	4a43      	ldr	r2, [pc, #268]	; (8000ac0 <fsm_auto+0x174>)
 80009b2:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 80009b4:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <fsm_auto+0x174>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d106      	bne.n	80009ca <fsm_auto+0x7e>
				status = AUTO_RED_YELLOW;
 80009bc:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <fsm_auto+0x164>)
 80009be:	225c      	movs	r2, #92	; 0x5c
 80009c0:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 80009c2:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <fsm_auto+0x17c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a41      	ldr	r2, [pc, #260]	; (8000acc <fsm_auto+0x180>)
 80009c8:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 80009ca:	2100      	movs	r1, #0
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f000 fd9f 	bl	8001510 <setTimer>
		}
		break;
 80009d2:	e063      	b.n	8000a9c <fsm_auto+0x150>
	case AUTO_RED_YELLOW:
		if (timer_flag[0] == 1){
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <fsm_auto+0x178>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d161      	bne.n	8000aa0 <fsm_auto+0x154>
			red_time_cd --;
 80009dc:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <fsm_auto+0x16c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a35      	ldr	r2, [pc, #212]	; (8000ab8 <fsm_auto+0x16c>)
 80009e4:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <fsm_auto+0x180>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	4a37      	ldr	r2, [pc, #220]	; (8000acc <fsm_auto+0x180>)
 80009ee:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 80009f0:	4b36      	ldr	r3, [pc, #216]	; (8000acc <fsm_auto+0x180>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10a      	bne.n	8000a0e <fsm_auto+0xc2>
				status = AUTO_GREEN_RED;
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <fsm_auto+0x164>)
 80009fa:	225d      	movs	r2, #93	; 0x5d
 80009fc:	601a      	str	r2, [r3, #0]
				red_time_cd = red_time;
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <fsm_auto+0x168>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a2d      	ldr	r2, [pc, #180]	; (8000ab8 <fsm_auto+0x16c>)
 8000a04:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <fsm_auto+0x170>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <fsm_auto+0x174>)
 8000a0c:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f000 fd7d 	bl	8001510 <setTimer>
		}
		break;
 8000a16:	e043      	b.n	8000aa0 <fsm_auto+0x154>
	case AUTO_GREEN_RED:
		if (timer_flag[0] == 1){
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <fsm_auto+0x178>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d141      	bne.n	8000aa4 <fsm_auto+0x158>
			red_time_cd --;
 8000a20:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <fsm_auto+0x16c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	4a24      	ldr	r2, [pc, #144]	; (8000ab8 <fsm_auto+0x16c>)
 8000a28:	6013      	str	r3, [r2, #0]
			green_time_cd --;
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <fsm_auto+0x174>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <fsm_auto+0x174>)
 8000a32:	6013      	str	r3, [r2, #0]
			if (green_time_cd == 0){
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <fsm_auto+0x174>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d106      	bne.n	8000a4a <fsm_auto+0xfe>
				status = AUTO_YELLOW_RED;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <fsm_auto+0x164>)
 8000a3e:	225e      	movs	r2, #94	; 0x5e
 8000a40:	601a      	str	r2, [r3, #0]
				yellow_time_cd = yellow_time;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <fsm_auto+0x17c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a21      	ldr	r2, [pc, #132]	; (8000acc <fsm_auto+0x180>)
 8000a48:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2064      	movs	r0, #100	; 0x64
 8000a4e:	f000 fd5f 	bl	8001510 <setTimer>
		}
		break;
 8000a52:	e027      	b.n	8000aa4 <fsm_auto+0x158>
	case AUTO_YELLOW_RED:
		if (timer_flag[0] == 1){
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <fsm_auto+0x178>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d125      	bne.n	8000aa8 <fsm_auto+0x15c>
			red_time_cd --;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <fsm_auto+0x16c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <fsm_auto+0x16c>)
 8000a64:	6013      	str	r3, [r2, #0]
			yellow_time_cd --;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <fsm_auto+0x180>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a17      	ldr	r2, [pc, #92]	; (8000acc <fsm_auto+0x180>)
 8000a6e:	6013      	str	r3, [r2, #0]
			if (yellow_time_cd == 0){
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <fsm_auto+0x180>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10a      	bne.n	8000a8e <fsm_auto+0x142>
				status = AUTO_RED_GREEN;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <fsm_auto+0x164>)
 8000a7a:	225b      	movs	r2, #91	; 0x5b
 8000a7c:	601a      	str	r2, [r3, #0]
				red_time_cd  = red_time;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <fsm_auto+0x168>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <fsm_auto+0x16c>)
 8000a84:	6013      	str	r3, [r2, #0]
				green_time_cd = green_time;
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <fsm_auto+0x170>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <fsm_auto+0x174>)
 8000a8c:	6013      	str	r3, [r2, #0]
			}
			setTimer(100, 0);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f000 fd3d 	bl	8001510 <setTimer>
		}
		break;
 8000a96:	e007      	b.n	8000aa8 <fsm_auto+0x15c>
	default: break;
 8000a98:	bf00      	nop
 8000a9a:	e006      	b.n	8000aaa <fsm_auto+0x15e>
		break;
 8000a9c:	bf00      	nop
 8000a9e:	e004      	b.n	8000aaa <fsm_auto+0x15e>
		break;
 8000aa0:	bf00      	nop
 8000aa2:	e002      	b.n	8000aaa <fsm_auto+0x15e>
		break;
 8000aa4:	bf00      	nop
 8000aa6:	e000      	b.n	8000aaa <fsm_auto+0x15e>
		break;
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000048 	.word	0x20000048
 8000ab4:	2000004c 	.word	0x2000004c
 8000ab8:	20000120 	.word	0x20000120
 8000abc:	20000054 	.word	0x20000054
 8000ac0:	20000128 	.word	0x20000128
 8000ac4:	20000058 	.word	0x20000058
 8000ac8:	20000050 	.word	0x20000050
 8000acc:	20000124 	.word	0x20000124

08000ad0 <turnbackINIT>:
#include "fsm_manual.h"


int red_time_tmp, yellow_time_tmp, green_time_tmp;

void turnbackINIT(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	if (red_time < 1 || yellow_time < 1 ||
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <turnbackINIT+0x50>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	dd07      	ble.n	8000aec <turnbackINIT+0x1c>
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <turnbackINIT+0x54>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	dd03      	ble.n	8000aec <turnbackINIT+0x1c>
			green_time < 1){
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <turnbackINIT+0x58>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
	if (red_time < 1 || yellow_time < 1 ||
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	dc08      	bgt.n	8000afe <turnbackINIT+0x2e>
		red_time = 5;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <turnbackINIT+0x50>)
 8000aee:	2205      	movs	r2, #5
 8000af0:	601a      	str	r2, [r3, #0]
		yellow_time = 2;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <turnbackINIT+0x54>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	601a      	str	r2, [r3, #0]
		green_time = 3;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <turnbackINIT+0x58>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	601a      	str	r2, [r3, #0]
	}
	setTimer(0, 3); // turn off timer_flag for scan led
 8000afe:	2103      	movs	r1, #3
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fd05 	bl	8001510 <setTimer>
	red_time = green_time + yellow_time;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <turnbackINIT+0x58>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <turnbackINIT+0x54>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <turnbackINIT+0x50>)
 8000b12:	6013      	str	r3, [r2, #0]
	status = INIT;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <turnbackINIT+0x5c>)
 8000b16:	225a      	movs	r2, #90	; 0x5a
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000004c 	.word	0x2000004c
 8000b24:	20000050 	.word	0x20000050
 8000b28:	20000054 	.word	0x20000054
 8000b2c:	20000048 	.word	0x20000048

08000b30 <checkButton1>:
void checkButton1(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fd8f 	bl	8000658 <isButtonPressed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d11e      	bne.n	8000b7e <checkButton1+0x4e>
		//reset set timer

		if (status == MANUAL_RED) {
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <checkButton1+0x54>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b14      	cmp	r3, #20
 8000b46:	d103      	bne.n	8000b50 <checkButton1+0x20>
			status = MANUAL_YELLOW;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <checkButton1+0x54>)
 8000b4a:	2215      	movs	r2, #21
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e011      	b.n	8000b74 <checkButton1+0x44>
		}
		else if (status == MANUAL_YELLOW) {
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <checkButton1+0x54>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b15      	cmp	r3, #21
 8000b56:	d103      	bne.n	8000b60 <checkButton1+0x30>
			status = MANUAL_GREEN;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <checkButton1+0x54>)
 8000b5a:	2216      	movs	r2, #22
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e009      	b.n	8000b74 <checkButton1+0x44>
		}
		else if (status == MANUAL_GREEN) {
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <checkButton1+0x54>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b16      	cmp	r3, #22
 8000b66:	d102      	bne.n	8000b6e <checkButton1+0x3e>
			turnbackINIT();
 8000b68:	f7ff ffb2 	bl	8000ad0 <turnbackINIT>
 8000b6c:	e002      	b.n	8000b74 <checkButton1+0x44>
		}
		else {
			status = MANUAL_INIT; //auto state -> manual state
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <checkButton1+0x54>)
 8000b70:	2217      	movs	r2, #23
 8000b72:	601a      	str	r2, [r3, #0]
		}
		setTimer(10000, 2);// after 10 sec don't press button1 -> turn back to auto mode
 8000b74:	2102      	movs	r1, #2
 8000b76:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b7a:	f000 fcc9 	bl	8001510 <setTimer>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000048 	.word	0x20000048

08000b88 <checkButton2>:

void checkButton2(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fd63 	bl	8000658 <isButtonPressed>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d126      	bne.n	8000be6 <checkButton2+0x5e>
		if (status == MANUAL_RED){
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <checkButton2+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b14      	cmp	r3, #20
 8000b9e:	d108      	bne.n	8000bb2 <checkButton2+0x2a>
			if (red_time_tmp < 99) red_time_tmp++;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <checkButton2+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b62      	cmp	r3, #98	; 0x62
 8000ba6:	dc04      	bgt.n	8000bb2 <checkButton2+0x2a>
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <checkButton2+0x68>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <checkButton2+0x68>)
 8000bb0:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_YELLOW){
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <checkButton2+0x64>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b15      	cmp	r3, #21
 8000bb8:	d108      	bne.n	8000bcc <checkButton2+0x44>
			if (yellow_time_tmp < 99) yellow_time_tmp++;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <checkButton2+0x6c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b62      	cmp	r3, #98	; 0x62
 8000bc0:	dc04      	bgt.n	8000bcc <checkButton2+0x44>
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <checkButton2+0x6c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <checkButton2+0x6c>)
 8000bca:	6013      	str	r3, [r2, #0]
		}
		if (status == MANUAL_GREEN){
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <checkButton2+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b16      	cmp	r3, #22
 8000bd2:	d108      	bne.n	8000be6 <checkButton2+0x5e>
			if (green_time_tmp < 99) green_time_tmp++;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <checkButton2+0x70>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b62      	cmp	r3, #98	; 0x62
 8000bda:	dc04      	bgt.n	8000be6 <checkButton2+0x5e>
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <checkButton2+0x70>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <checkButton2+0x70>)
 8000be4:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000048 	.word	0x20000048
 8000bf0:	20000180 	.word	0x20000180
 8000bf4:	20000178 	.word	0x20000178
 8000bf8:	2000017c 	.word	0x2000017c

08000bfc <checkButton3>:
void checkButton3(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff fd29 	bl	8000658 <isButtonPressed>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d119      	bne.n	8000c40 <checkButton3+0x44>
		if (status == MANUAL_RED){
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <checkButton3+0x48>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b14      	cmp	r3, #20
 8000c12:	d104      	bne.n	8000c1e <checkButton3+0x22>
			red_time = red_time_tmp;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <checkButton3+0x4c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <checkButton3+0x50>)
 8000c1a:	6013      	str	r3, [r2, #0]
		else if (status == MANUAL_GREEN){
			green_time = green_time_tmp;
		}
		//when confirm the time, flag =0 to reset timer again
	}
}
 8000c1c:	e010      	b.n	8000c40 <checkButton3+0x44>
		else if (status == MANUAL_YELLOW){
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <checkButton3+0x48>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b15      	cmp	r3, #21
 8000c24:	d104      	bne.n	8000c30 <checkButton3+0x34>
			yellow_time = yellow_time_tmp;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <checkButton3+0x54>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <checkButton3+0x58>)
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	e007      	b.n	8000c40 <checkButton3+0x44>
		else if (status == MANUAL_GREEN){
 8000c30:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <checkButton3+0x48>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b16      	cmp	r3, #22
 8000c36:	d103      	bne.n	8000c40 <checkButton3+0x44>
			green_time = green_time_tmp;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <checkButton3+0x5c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <checkButton3+0x60>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000048 	.word	0x20000048
 8000c48:	20000180 	.word	0x20000180
 8000c4c:	2000004c 	.word	0x2000004c
 8000c50:	20000178 	.word	0x20000178
 8000c54:	20000050 	.word	0x20000050
 8000c58:	2000017c 	.word	0x2000017c
 8000c5c:	20000054 	.word	0x20000054

08000c60 <fsm_manual>:


void fsm_manual(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	checkButton1();
 8000c64:	f7ff ff64 	bl	8000b30 <checkButton1>
	switch (status){
 8000c68:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <fsm_manual+0x94>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3b14      	subs	r3, #20
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d83c      	bhi.n	8000cec <fsm_manual+0x8c>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <fsm_manual+0x18>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000cab 	.word	0x08000cab
 8000c7c:	08000cc1 	.word	0x08000cc1
 8000c80:	08000cd7 	.word	0x08000cd7
 8000c84:	08000c89 	.word	0x08000c89
	case MANUAL_INIT:
		red_time_tmp = 0;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <fsm_manual+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
		yellow_time_tmp = 0;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <fsm_manual+0x9c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
		green_time_tmp = 0;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <fsm_manual+0xa0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
		status = MANUAL_RED;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <fsm_manual+0x94>)
 8000c9c:	2214      	movs	r2, #20
 8000c9e:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	2032      	movs	r0, #50	; 0x32
 8000ca4:	f000 fc34 	bl	8001510 <setTimer>
		break;
 8000ca8:	e021      	b.n	8000cee <fsm_manual+0x8e>
	case MANUAL_RED:
		if (timer_flag [2] == 1) {
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <fsm_manual+0xa4>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d101      	bne.n	8000cb6 <fsm_manual+0x56>
			turnbackINIT();
 8000cb2:	f7ff ff0d 	bl	8000ad0 <turnbackINIT>
		}
		checkButton2();
 8000cb6:	f7ff ff67 	bl	8000b88 <checkButton2>
		checkButton3();
 8000cba:	f7ff ff9f 	bl	8000bfc <checkButton3>
		break;
 8000cbe:	e016      	b.n	8000cee <fsm_manual+0x8e>
	case MANUAL_YELLOW:
		if (timer_flag [2] == 1){
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <fsm_manual+0xa4>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d101      	bne.n	8000ccc <fsm_manual+0x6c>
			turnbackINIT();
 8000cc8:	f7ff ff02 	bl	8000ad0 <turnbackINIT>
		}
		checkButton2();
 8000ccc:	f7ff ff5c 	bl	8000b88 <checkButton2>
		checkButton3();
 8000cd0:	f7ff ff94 	bl	8000bfc <checkButton3>
		break;
 8000cd4:	e00b      	b.n	8000cee <fsm_manual+0x8e>
	case MANUAL_GREEN:
		if (timer_flag [2] == 1){
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <fsm_manual+0xa4>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <fsm_manual+0x82>
			turnbackINIT();
 8000cde:	f7ff fef7 	bl	8000ad0 <turnbackINIT>
		}
		checkButton2();
 8000ce2:	f7ff ff51 	bl	8000b88 <checkButton2>
		checkButton3();
 8000ce6:	f7ff ff89 	bl	8000bfc <checkButton3>
		break;
 8000cea:	e000      	b.n	8000cee <fsm_manual+0x8e>
	default: break;
 8000cec:	bf00      	nop
	}




}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000048 	.word	0x20000048
 8000cf8:	20000180 	.word	0x20000180
 8000cfc:	20000178 	.word	0x20000178
 8000d00:	2000017c 	.word	0x2000017c
 8000d04:	20000058 	.word	0x20000058

08000d08 <fsm_pedestrian_light>:
 */

#include "fsm_pedestrian_light.h"
#include "buzzer.h"

void fsm_pedestrian_light(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	if(isButtonPressed(3)){
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f7ff fca3 	bl	8000658 <isButtonPressed>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <fsm_pedestrian_light+0x1a>
		setTimer(1500,4);
 8000d18:	2104      	movs	r1, #4
 8000d1a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d1e:	f000 fbf7 	bl	8001510 <setTimer>
//		case MANUAL_GREEN:
//			state_buzzer =OFF;
//			break;
//		default: break;
//	}
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f000 ff04 	bl	8001b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f822 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d34:	f000 f948 	bl	8000fc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d38:	f000 f85a 	bl	8000df0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d3c:	f000 f91a 	bl	8000f74 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000d40:	f000 f8a2 	bl	8000e88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <main+0x48>)
 8000d46:	f001 ff43 	bl	8002bd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <main+0x4c>)
 8000d4e:	f001 ffe9 	bl	8002d24 <HAL_TIM_PWM_Start>
  setTimer(10, 7);
 8000d52:	2107      	movs	r1, #7
 8000d54:	200a      	movs	r0, #10
 8000d56:	f000 fbdb 	bl	8001510 <setTimer>
  setTimer(10, 6);
 8000d5a:	2106      	movs	r1, #6
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f000 fbd7 	bl	8001510 <setTimer>
  while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_auto();
 8000d62:	f7ff fdf3 	bl	800094c <fsm_auto>
	  fsm_manual();
 8000d66:	f7ff ff7b 	bl	8000c60 <fsm_manual>
	  fsm_pedestrian_light();
 8000d6a:	f7ff ffcd 	bl	8000d08 <fsm_pedestrian_light>
	  fsm_auto();
 8000d6e:	e7f8      	b.n	8000d62 <main+0x3a>
 8000d70:	200001cc 	.word	0x200001cc
 8000d74:	20000184 	.word	0x20000184

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b090      	sub	sp, #64	; 0x40
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	2228      	movs	r2, #40	; 0x28
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fc7c 	bl	8004684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da2:	2310      	movs	r3, #16
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fab0 	bl	8002314 <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dba:	f000 f9b2 	bl	8001122 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fd1c 	bl	8002814 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000de2:	f000 f99e 	bl	8001122 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3740      	adds	r7, #64	; 0x40
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e16:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e36:	f001 fe7b 	bl	8002b30 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e40:	f000 f96f 	bl	8001122 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e52:	f002 f9d3 	bl	80031fc <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e5c:	f000 f961 	bl	8001122 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e6e:	f002 fd55 	bl	800391c <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e78:	f000 f953 	bl	8001122 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200001cc 	.word	0x200001cc

08000e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000eba:	4a2d      	ldr	r2, [pc, #180]	; (8000f70 <MX_TIM3_Init+0xe8>)
 8000ebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ec0:	224f      	movs	r2, #79	; 0x4f
 8000ec2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000eca:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ecc:	2263      	movs	r2, #99	; 0x63
 8000ece:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000edc:	4823      	ldr	r0, [pc, #140]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000ede:	f001 fe27 	bl	8002b30 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000ee8:	f000 f91b 	bl	8001122 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481c      	ldr	r0, [pc, #112]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000efa:	f002 f97f 	bl	80031fc <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000f04:	f000 f90d 	bl	8001122 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f08:	4818      	ldr	r0, [pc, #96]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f0a:	f001 feb3 	bl	8002c74 <HAL_TIM_PWM_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000f14:	f000 f905 	bl	8001122 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	4619      	mov	r1, r3
 8000f26:	4811      	ldr	r0, [pc, #68]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f28:	f002 fcf8 	bl	800391c <HAL_TIMEx_MasterConfigSynchronization>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000f32:	f000 f8f6 	bl	8001122 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f36:	2360      	movs	r3, #96	; 0x60
 8000f38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f4e:	f002 f893 	bl	8003078 <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000f58:	f000 f8e3 	bl	8001122 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM3_Init+0xe4>)
 8000f5e:	f000 fb91 	bl	8001684 <HAL_TIM_MspPostInit>

}
 8000f62:	bf00      	nop
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000184 	.word	0x20000184
 8000f70:	40000400 	.word	0x40000400

08000f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART2_UART_Init+0x4c>)
 8000fac:	f002 fd26 	bl	80039fc <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f000 f8b4 	bl	8001122 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000214 	.word	0x20000214
 8000fc4:	40004400 	.word	0x40004400

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <MX_GPIO_Init+0x114>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <MX_GPIO_Init+0x114>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <MX_GPIO_Init+0x114>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <MX_GPIO_Init+0x114>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a38      	ldr	r2, [pc, #224]	; (80010dc <MX_GPIO_Init+0x114>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <MX_GPIO_Init+0x114>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <MX_GPIO_Init+0x114>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a32      	ldr	r2, [pc, #200]	; (80010dc <MX_GPIO_Init+0x114>)
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <MX_GPIO_Init+0x114>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800102a:	482d      	ldr	r0, [pc, #180]	; (80010e0 <MX_GPIO_Init+0x118>)
 800102c:	f001 f941 	bl	80022b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001036:	482b      	ldr	r0, [pc, #172]	; (80010e4 <MX_GPIO_Init+0x11c>)
 8001038:	f001 f93b 	bl	80022b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PLB_Pin|TL1A_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001042:	4829      	ldr	r0, [pc, #164]	; (80010e8 <MX_GPIO_Init+0x120>)
 8001044:	f001 f935 	bl	80022b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button4_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button4_Pin|Button1_Pin|Button2_Pin;
 8001048:	2313      	movs	r3, #19
 800104a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2301      	movs	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <MX_GPIO_Init+0x120>)
 800105c:	f000 ff8e 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	2301      	movs	r3, #1
 800106a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	481b      	ldr	r0, [pc, #108]	; (80010e0 <MX_GPIO_Init+0x118>)
 8001074:	f000 ff82 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PLA_Pin TL1B_Pin TL2B_Pin TL2A_Pin */
  GPIO_InitStruct.Pin = PLA_Pin|TL1B_Pin|TL2B_Pin|TL2A_Pin;
 8001078:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2302      	movs	r3, #2
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	4619      	mov	r1, r3
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <MX_GPIO_Init+0x118>)
 8001092:	f000 ff73 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_Pin */
  GPIO_InitStruct.Pin = TEST_Pin;
 8001096:	f44f 7300 	mov.w	r3, #512	; 0x200
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_GPIO_Init+0x11c>)
 80010b0:	f000 ff64 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PLB_Pin TL1A_Pin */
  GPIO_InitStruct.Pin = PLB_Pin|TL1A_Pin;
 80010b4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4619      	mov	r1, r3
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_GPIO_Init+0x120>)
 80010ce:	f000 ff55 	bl	8001f7c <HAL_GPIO_Init>

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010c00 	.word	0x40010c00
 80010e4:	40011000 	.word	0x40011000
 80010e8:	40010800 	.word	0x40010800

080010ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	scanLed(); //scan 3 LED (2 Traffic and 1 Pedestrian)
 80010f4:	f000 f940 	bl	8001378 <scanLed>
	buzzer(); // buzzer
 80010f8:	f7ff fbd2 	bl	80008a0 <buzzer>
	timerRun(); // software timer
 80010fc:	f000 fa20 	bl	8001540 <timerRun>
	getKeyinput(); // button
 8001100:	f7ff fb06 	bl	8000710 <getKeyinput>
	print_statement();
 8001104:	f000 fbc4 	bl	8001890 <print_statement>

//	SCH_Update();
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef * huart ) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001126:	b672      	cpsid	i
}
 8001128:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112a:	e7fe      	b.n	800112a <Error_Handler+0x8>

0800112c <turnoffAll>:

#include "scanLed.h"

int enable_change = 0;
//lenh bat tat den cho nhanh
void turnoffAll(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <turnoffAll+0x4c>)
 8001138:	f001 f8bb 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2108      	movs	r1, #8
 8001140:	480e      	ldr	r0, [pc, #56]	; (800117c <turnoffAll+0x50>)
 8001142:	f001 f8b6 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <turnoffAll+0x50>)
 800114c:	f001 f8b1 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2110      	movs	r1, #16
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <turnoffAll+0x50>)
 8001156:	f001 f8ac 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001160:	4806      	ldr	r0, [pc, #24]	; (800117c <turnoffAll+0x50>)
 8001162:	f001 f8a6 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <turnoffAll+0x4c>)
 800116e:	f001 f8a0 	bl	80022b2 <HAL_GPIO_WritePin>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40010800 	.word	0x40010800
 800117c:	40010c00 	.word	0x40010c00

08001180 <onRed_1>:
void onRed_1(){
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <onRed_1+0x20>)
 800118c:	f001 f891 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2108      	movs	r1, #8
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <onRed_1+0x24>)
 8001196:	f001 f88c 	bl	80022b2 <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <onYellow_1>:
void onYellow_1(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <onYellow_1+0x20>)
 80011b4:	f001 f87d 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2108      	movs	r1, #8
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <onYellow_1+0x24>)
 80011be:	f001 f878 	bl	80022b2 <HAL_GPIO_WritePin>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00

080011d0 <onGreen_1>:
void onGreen_1(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL1A_GPIO_Port, TL1A_Pin, RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <onGreen_1+0x20>)
 80011dc:	f001 f869 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL1B_GPIO_Port, TL1B_Pin, SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2108      	movs	r1, #8
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <onGreen_1+0x24>)
 80011e6:	f001 f864 	bl	80022b2 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40010800 	.word	0x40010800
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <onRed_2>:
void onRed_2(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2120      	movs	r1, #32
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <onRed_2+0x1c>)
 8001202:	f001 f856 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2110      	movs	r1, #16
 800120a:	4802      	ldr	r0, [pc, #8]	; (8001214 <onRed_2+0x1c>)
 800120c:	f001 f851 	bl	80022b2 <HAL_GPIO_WritePin>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010c00 	.word	0x40010c00

08001218 <onYellow_2>:
void onYellow_2(){
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2120      	movs	r1, #32
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <onYellow_2+0x1c>)
 8001222:	f001 f846 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8001226:	2201      	movs	r2, #1
 8001228:	2110      	movs	r1, #16
 800122a:	4802      	ldr	r0, [pc, #8]	; (8001234 <onYellow_2+0x1c>)
 800122c:	f001 f841 	bl	80022b2 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40010c00 	.word	0x40010c00

08001238 <onGreen_2>:
void onGreen_2(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TL2A_GPIO_Port, TL2A_Pin, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2120      	movs	r1, #32
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <onGreen_2+0x1c>)
 8001242:	f001 f836 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TL2B_GPIO_Port, TL2B_Pin, SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2110      	movs	r1, #16
 800124a:	4802      	ldr	r0, [pc, #8]	; (8001254 <onGreen_2+0x1c>)
 800124c:	f001 f831 	bl	80022b2 <HAL_GPIO_WritePin>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40010c00 	.word	0x40010c00

08001258 <offPed>:
void offPed(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <offPed+0x20>)
 8001264:	f001 f825 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <offPed+0x24>)
 8001270:	f001 f81f 	bl	80022b2 <HAL_GPIO_WritePin>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40010800 	.word	0x40010800

08001280 <onGreenPed>:

void onGreenPed(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <onGreenPed+0x20>)
 800128c:	f001 f811 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <onGreenPed+0x24>)
 8001298:	f001 f80b 	bl	80022b2 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40010800 	.word	0x40010800

080012a8 <onRedPed>:
void onRedPed(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PLA_GPIO_Port, PLA_Pin, SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <onRedPed+0x20>)
 80012b4:	f000 fffd 	bl	80022b2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PLB_GPIO_Port, PLB_Pin, RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <onRedPed+0x24>)
 80012c0:	f000 fff7 	bl	80022b2 <HAL_GPIO_WritePin>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010c00 	.word	0x40010c00
 80012cc:	40010800 	.word	0x40010800

080012d0 <onRed_Toggle>:
void onRed_Toggle(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <onRed_Toggle+0x34>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d107      	bne.n	80012ec <onRed_Toggle+0x1c>
		onRed_1();
 80012dc:	f7ff ff50 	bl	8001180 <onRed_1>
		onRed_2();
 80012e0:	f7ff ff8a 	bl	80011f8 <onRed_2>
		enable_change = 1;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <onRed_Toggle+0x34>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 80012ea:	e008      	b.n	80012fe <onRed_Toggle+0x2e>
	else if (enable_change == 1){
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <onRed_Toggle+0x34>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d104      	bne.n	80012fe <onRed_Toggle+0x2e>
		turnoffAll();
 80012f4:	f7ff ff1a 	bl	800112c <turnoffAll>
		enable_change = 0;
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <onRed_Toggle+0x34>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000012c 	.word	0x2000012c

08001308 <onGreen_Toggle>:
void onGreen_Toggle(){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <onGreen_Toggle+0x34>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d107      	bne.n	8001324 <onGreen_Toggle+0x1c>
		onGreen_1();
 8001314:	f7ff ff5c 	bl	80011d0 <onGreen_1>
		onGreen_2();
 8001318:	f7ff ff8e 	bl	8001238 <onGreen_2>
		enable_change = 1;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <onGreen_Toggle+0x34>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 8001322:	e008      	b.n	8001336 <onGreen_Toggle+0x2e>
	else if (enable_change == 1){
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <onGreen_Toggle+0x34>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d104      	bne.n	8001336 <onGreen_Toggle+0x2e>
		turnoffAll();
 800132c:	f7ff fefe 	bl	800112c <turnoffAll>
		enable_change = 0;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <onGreen_Toggle+0x34>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000012c 	.word	0x2000012c

08001340 <onYellow_Toggle>:
void onYellow_Toggle(){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	if (enable_change == 0){
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <onYellow_Toggle+0x34>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <onYellow_Toggle+0x1c>
		onYellow_1();
 800134c:	f7ff ff2c 	bl	80011a8 <onYellow_1>
		onYellow_2();
 8001350:	f7ff ff62 	bl	8001218 <onYellow_2>
		enable_change = 1;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <onYellow_Toggle+0x34>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
	}
	else if (enable_change == 1){
		turnoffAll();
		enable_change = 0;
	}
}
 800135a:	e008      	b.n	800136e <onYellow_Toggle+0x2e>
	else if (enable_change == 1){
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <onYellow_Toggle+0x34>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d104      	bne.n	800136e <onYellow_Toggle+0x2e>
		turnoffAll();
 8001364:	f7ff fee2 	bl	800112c <turnoffAll>
		enable_change = 0;
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <onYellow_Toggle+0x34>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000012c 	.word	0x2000012c

08001378 <scanLed>:
void scanLed(){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	switch (status){
 800137c:	4b61      	ldr	r3, [pc, #388]	; (8001504 <scanLed+0x18c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b5e      	cmp	r3, #94	; 0x5e
 8001382:	f300 80ad 	bgt.w	80014e0 <scanLed+0x168>
 8001386:	2b5b      	cmp	r3, #91	; 0x5b
 8001388:	da0b      	bge.n	80013a2 <scanLed+0x2a>
 800138a:	2b16      	cmp	r3, #22
 800138c:	f000 8098 	beq.w	80014c0 <scanLed+0x148>
 8001390:	2b16      	cmp	r3, #22
 8001392:	f300 80a5 	bgt.w	80014e0 <scanLed+0x168>
 8001396:	2b14      	cmp	r3, #20
 8001398:	d072      	beq.n	8001480 <scanLed+0x108>
 800139a:	2b15      	cmp	r3, #21
 800139c:	f000 8080 	beq.w	80014a0 <scanLed+0x128>
		if (timer_flag[3] == 1){
			onGreen_Toggle();
			setTimer(50,3);
		}
		break;
	default: break;
 80013a0:	e09e      	b.n	80014e0 <scanLed+0x168>
 80013a2:	3b5b      	subs	r3, #91	; 0x5b
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	f200 809b 	bhi.w	80014e0 <scanLed+0x168>
 80013aa:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <scanLed+0x38>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	080013c1 	.word	0x080013c1
 80013b4:	080013f1 	.word	0x080013f1
 80013b8:	08001421 	.word	0x08001421
 80013bc:	08001451 	.word	0x08001451
		onRed_1();
 80013c0:	f7ff fede 	bl	8001180 <onRed_1>
		onGreen_2();
 80013c4:	f7ff ff38 	bl	8001238 <onGreen_2>
		if(timer_flag[4] == 0){
 80013c8:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <scanLed+0x190>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <scanLed+0x64>
			onGreenPed();
 80013d0:	f7ff ff56 	bl	8001280 <onGreenPed>
			state_buzzer =ON;//buzzer
 80013d4:	4b4d      	ldr	r3, [pc, #308]	; (800150c <scanLed+0x194>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
		break;
 80013da:	e083      	b.n	80014e4 <scanLed+0x16c>
		}else if(timer_flag[4] == 1){
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <scanLed+0x190>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d17f      	bne.n	80014e4 <scanLed+0x16c>
			offPed();
 80013e4:	f7ff ff38 	bl	8001258 <offPed>
			state_buzzer =OFF;//buzzer
 80013e8:	4b48      	ldr	r3, [pc, #288]	; (800150c <scanLed+0x194>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	601a      	str	r2, [r3, #0]
		break;
 80013ee:	e079      	b.n	80014e4 <scanLed+0x16c>
		onRed_1();
 80013f0:	f7ff fec6 	bl	8001180 <onRed_1>
		onYellow_2();
 80013f4:	f7ff ff10 	bl	8001218 <onYellow_2>
		if(timer_flag[4] == 0){
 80013f8:	4b43      	ldr	r3, [pc, #268]	; (8001508 <scanLed+0x190>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <scanLed+0x94>
			onGreenPed();
 8001400:	f7ff ff3e 	bl	8001280 <onGreenPed>
			state_buzzer =ON;//buzzer
 8001404:	4b41      	ldr	r3, [pc, #260]	; (800150c <scanLed+0x194>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
		break;
 800140a:	e06d      	b.n	80014e8 <scanLed+0x170>
		}else if(timer_flag[4] == 1){
 800140c:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <scanLed+0x190>)
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d169      	bne.n	80014e8 <scanLed+0x170>
			offPed();
 8001414:	f7ff ff20 	bl	8001258 <offPed>
			state_buzzer =OFF;//buzzer
 8001418:	4b3c      	ldr	r3, [pc, #240]	; (800150c <scanLed+0x194>)
 800141a:	2202      	movs	r2, #2
 800141c:	601a      	str	r2, [r3, #0]
		break;
 800141e:	e063      	b.n	80014e8 <scanLed+0x170>
		onGreen_1();
 8001420:	f7ff fed6 	bl	80011d0 <onGreen_1>
		onRed_2();
 8001424:	f7ff fee8 	bl	80011f8 <onRed_2>
		if(timer_flag[4] == 0){
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <scanLed+0x190>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <scanLed+0xc4>
			state_buzzer =OFF;//buzzer
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <scanLed+0x194>)
 8001432:	2202      	movs	r2, #2
 8001434:	601a      	str	r2, [r3, #0]
			onRedPed();
 8001436:	f7ff ff37 	bl	80012a8 <onRedPed>
		break;
 800143a:	e057      	b.n	80014ec <scanLed+0x174>
		}else if(timer_flag[4] == 1){
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <scanLed+0x190>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d153      	bne.n	80014ec <scanLed+0x174>
			state_buzzer =OFF;//buzzer
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <scanLed+0x194>)
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
			offPed();
 800144a:	f7ff ff05 	bl	8001258 <offPed>
		break;
 800144e:	e04d      	b.n	80014ec <scanLed+0x174>
		onYellow_1();
 8001450:	f7ff feaa 	bl	80011a8 <onYellow_1>
		onRed_2();
 8001454:	f7ff fed0 	bl	80011f8 <onRed_2>
		if(timer_flag[4] == 0){
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <scanLed+0x190>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d105      	bne.n	800146c <scanLed+0xf4>
			state_buzzer =OFF;//buzzer
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <scanLed+0x194>)
 8001462:	2202      	movs	r2, #2
 8001464:	601a      	str	r2, [r3, #0]
			onRedPed();
 8001466:	f7ff ff1f 	bl	80012a8 <onRedPed>
		break;
 800146a:	e041      	b.n	80014f0 <scanLed+0x178>
		}else if(timer_flag[4] == 1){
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <scanLed+0x190>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d13d      	bne.n	80014f0 <scanLed+0x178>
			state_buzzer =OFF;//buzzer
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <scanLed+0x194>)
 8001476:	2202      	movs	r2, #2
 8001478:	601a      	str	r2, [r3, #0]
			offPed();
 800147a:	f7ff feed 	bl	8001258 <offPed>
		break;
 800147e:	e037      	b.n	80014f0 <scanLed+0x178>
		offPed();
 8001480:	f7ff feea 	bl	8001258 <offPed>
		state_buzzer =OFF;//buzzer
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <scanLed+0x194>)
 8001486:	2202      	movs	r2, #2
 8001488:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <scanLed+0x190>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d130      	bne.n	80014f4 <scanLed+0x17c>
			onRed_Toggle();
 8001492:	f7ff ff1d 	bl	80012d0 <onRed_Toggle>
			setTimer(50,3);
 8001496:	2103      	movs	r1, #3
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 f839 	bl	8001510 <setTimer>
		break;
 800149e:	e029      	b.n	80014f4 <scanLed+0x17c>
		offPed();
 80014a0:	f7ff feda 	bl	8001258 <offPed>
		state_buzzer =OFF;//buzzer
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <scanLed+0x194>)
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <scanLed+0x190>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d122      	bne.n	80014f8 <scanLed+0x180>
			onYellow_Toggle();
 80014b2:	f7ff ff45 	bl	8001340 <onYellow_Toggle>
			setTimer(50,3);
 80014b6:	2103      	movs	r1, #3
 80014b8:	2032      	movs	r0, #50	; 0x32
 80014ba:	f000 f829 	bl	8001510 <setTimer>
		break;
 80014be:	e01b      	b.n	80014f8 <scanLed+0x180>
		offPed();
 80014c0:	f7ff feca 	bl	8001258 <offPed>
		state_buzzer =OFF; //buzzer
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <scanLed+0x194>)
 80014c6:	2202      	movs	r2, #2
 80014c8:	601a      	str	r2, [r3, #0]
		if (timer_flag[3] == 1){
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <scanLed+0x190>)
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d114      	bne.n	80014fc <scanLed+0x184>
			onGreen_Toggle();
 80014d2:	f7ff ff19 	bl	8001308 <onGreen_Toggle>
			setTimer(50,3);
 80014d6:	2103      	movs	r1, #3
 80014d8:	2032      	movs	r0, #50	; 0x32
 80014da:	f000 f819 	bl	8001510 <setTimer>
		break;
 80014de:	e00d      	b.n	80014fc <scanLed+0x184>
	default: break;
 80014e0:	bf00      	nop
 80014e2:	e00c      	b.n	80014fe <scanLed+0x186>
		break;
 80014e4:	bf00      	nop
 80014e6:	e00a      	b.n	80014fe <scanLed+0x186>
		break;
 80014e8:	bf00      	nop
 80014ea:	e008      	b.n	80014fe <scanLed+0x186>
		break;
 80014ec:	bf00      	nop
 80014ee:	e006      	b.n	80014fe <scanLed+0x186>
		break;
 80014f0:	bf00      	nop
 80014f2:	e004      	b.n	80014fe <scanLed+0x186>
		break;
 80014f4:	bf00      	nop
 80014f6:	e002      	b.n	80014fe <scanLed+0x186>
		break;
 80014f8:	bf00      	nop
 80014fa:	e000      	b.n	80014fe <scanLed+0x186>
		break;
 80014fc:	bf00      	nop
	}
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000048 	.word	0x20000048
 8001508:	20000058 	.word	0x20000058
 800150c:	20000044 	.word	0x20000044

08001510 <setTimer>:


int timer_counter[10] ={ 0, 0, 0, 0, 0 ,0, 0, 0, 0, 0};
int timer_flag [10] ={ 0, 0, 0, 0, 1 ,0, 0, 0, 0, 0};

void setTimer(int duration, int index){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration;
 800151a:	4907      	ldr	r1, [pc, #28]	; (8001538 <setTimer+0x28>)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag [index] = 0;
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <setTimer+0x2c>)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2100      	movs	r1, #0
 800152a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000130 	.word	0x20000130
 800153c:	20000058 	.word	0x20000058

08001540 <timerRun>:

void timerRun(){
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
	for (int i =0 ;i < 10; i++){
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	e01c      	b.n	8001586 <timerRun+0x46>
		if (timer_counter[i] > 0){
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <timerRun+0x58>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	2b00      	cmp	r3, #0
 8001556:	dd13      	ble.n	8001580 <timerRun+0x40>
			timer_counter[i]--;
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <timerRun+0x58>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	1e5a      	subs	r2, r3, #1
 8001562:	490d      	ldr	r1, [pc, #52]	; (8001598 <timerRun+0x58>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0){
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <timerRun+0x58>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d104      	bne.n	8001580 <timerRun+0x40>
				timer_flag [i] = 1;
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <timerRun+0x5c>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2101      	movs	r1, #1
 800157c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i =0 ;i < 10; i++){
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3301      	adds	r3, #1
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b09      	cmp	r3, #9
 800158a:	dddf      	ble.n	800154c <timerRun+0xc>
			}
		}
	}
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000130 	.word	0x20000130
 800159c:	20000058 	.word	0x20000058

080015a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_MspInit+0x5c>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_MspInit+0x5c>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6193      	str	r3, [r2, #24]
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x5c>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_MspInit+0x5c>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	61d3      	str	r3, [r2, #28]
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_MspInit+0x60>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_MspInit+0x60>)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010000 	.word	0x40010000

08001604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d114      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201c      	movs	r0, #28
 8001634:	f000 fbb9 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001638:	201c      	movs	r0, #28
 800163a:	f000 fbd2 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800163e:	e018      	b.n	8001672 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <HAL_TIM_Base_MspInit+0x7c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d113      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	61d3      	str	r3, [r2, #28]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_TIM_Base_MspInit+0x78>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	201d      	movs	r0, #29
 8001668:	f000 fb9f 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800166c:	201d      	movs	r0, #29
 800166e:	f000 fbb8 	bl	8001de2 <HAL_NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	40000400 	.word	0x40000400

08001684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_TIM_MspPostInit+0x58>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d117      	bne.n	80016d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <HAL_TIM_MspPostInit+0x5c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_TIM_MspPostInit+0x5c>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_TIM_MspPostInit+0x5c>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80016bc:	2340      	movs	r3, #64	; 0x40
 80016be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	4619      	mov	r1, r3
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <HAL_TIM_MspPostInit+0x60>)
 80016d0:	f000 fc54 	bl	8001f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010800 	.word	0x40010800

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <HAL_UART_MspInit+0x98>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d137      	bne.n	8001778 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HAL_UART_MspInit+0x9c>)
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_UART_MspInit+0x9c>)
 800170e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001712:	61d3      	str	r3, [r2, #28]
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_UART_MspInit+0x9c>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <HAL_UART_MspInit+0x9c>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <HAL_UART_MspInit+0x9c>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6193      	str	r3, [r2, #24]
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0x9c>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001738:	2304      	movs	r3, #4
 800173a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	480f      	ldr	r0, [pc, #60]	; (8001788 <HAL_UART_MspInit+0xa0>)
 800174c:	f000 fc16 	bl	8001f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001750:	2308      	movs	r3, #8
 8001752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	4619      	mov	r1, r3
 8001762:	4809      	ldr	r0, [pc, #36]	; (8001788 <HAL_UART_MspInit+0xa0>)
 8001764:	f000 fc0a 	bl	8001f7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2026      	movs	r0, #38	; 0x26
 800176e:	f000 fb1c 	bl	8001daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001772:	2026      	movs	r0, #38	; 0x26
 8001774:	f000 fb35 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40004400 	.word	0x40004400
 8001784:	40021000 	.word	0x40021000
 8001788:	40010800 	.word	0x40010800

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 f9f7 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <TIM2_IRQHandler+0x10>)
 80017e2:	f001 fb41 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200001cc 	.word	0x200001cc

080017f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM3_IRQHandler+0x10>)
 80017f6:	f001 fb37 	bl	8002e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000184 	.word	0x20000184

08001804 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <USART2_IRQHandler+0x10>)
 800180a:	f002 f9cb 	bl	8003ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000214 	.word	0x20000214

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f002 fef2 	bl	8004630 <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20005000 	.word	0x20005000
 8001878:	00000400 	.word	0x00000400
 800187c:	20000158 	.word	0x20000158
 8001880:	20000290 	.word	0x20000290

08001884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <print_statement>:
char strr[30];
int red_time_change =0;
int green_time_change =0;
int yellow_time_change =0;
int state_uart =0;
void print_statement(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	switch (status){
 8001894:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <print_statement+0x218>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b17      	cmp	r3, #23
 800189a:	dc21      	bgt.n	80018e0 <print_statement+0x50>
 800189c:	2b14      	cmp	r3, #20
 800189e:	da0f      	bge.n	80018c0 <print_statement+0x30>
				sprintf( strr , "\r\n!MANUAL_GREEN_MODE\r\n");
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
				state_buzzer = MANUAL_GREEN;
			}
			break;
		default: break;
 80018a0:	e0ef      	b.n	8001a82 <print_statement+0x1f2>
 80018a2:	3b5b      	subs	r3, #91	; 0x5b
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	f200 80ec 	bhi.w	8001a82 <print_statement+0x1f2>
 80018aa:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <print_statement+0x20>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	080018ed 	.word	0x080018ed
 80018b4:	08001927 	.word	0x08001927
 80018b8:	08001961 	.word	0x08001961
 80018bc:	0800199b 	.word	0x0800199b
 80018c0:	3b14      	subs	r3, #20
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	f200 80dd 	bhi.w	8001a82 <print_statement+0x1f2>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <print_statement+0x40>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080019ff 	.word	0x080019ff
 80018d4:	08001a2b 	.word	0x08001a2b
 80018d8:	08001a57 	.word	0x08001a57
 80018dc:	080019d3 	.word	0x080019d3
	switch (status){
 80018e0:	2b5e      	cmp	r3, #94	; 0x5e
 80018e2:	f300 80ce 	bgt.w	8001a82 <print_statement+0x1f2>
 80018e6:	2b5b      	cmp	r3, #91	; 0x5b
 80018e8:	dadb      	bge.n	80018a2 <print_statement+0x12>
		default: break;
 80018ea:	e0ca      	b.n	8001a82 <print_statement+0x1f2>
			if(red_time_change != red_time_cd){
 80018ec:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <print_statement+0x21c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <print_statement+0x220>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f000 80c6 	beq.w	8001a86 <print_statement+0x1f6>
				sprintf( strr , "\r\n!RED_AUTO=%u#\r\n", red_time_cd );
 80018fa:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <print_statement+0x220>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	496c      	ldr	r1, [pc, #432]	; (8001ab4 <print_statement+0x224>)
 8001902:	486d      	ldr	r0, [pc, #436]	; (8001ab8 <print_statement+0x228>)
 8001904:	f002 fec6 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8001908:	486b      	ldr	r0, [pc, #428]	; (8001ab8 <print_statement+0x228>)
 800190a:	f7fe fc1f 	bl	800014c <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	2314      	movs	r3, #20
 8001914:	4968      	ldr	r1, [pc, #416]	; (8001ab8 <print_statement+0x228>)
 8001916:	4869      	ldr	r0, [pc, #420]	; (8001abc <print_statement+0x22c>)
 8001918:	f002 f8c0 	bl	8003a9c <HAL_UART_Transmit>
				red_time_change = red_time_cd;
 800191c:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <print_statement+0x220>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a62      	ldr	r2, [pc, #392]	; (8001aac <print_statement+0x21c>)
 8001922:	6013      	str	r3, [r2, #0]
			break;
 8001924:	e0af      	b.n	8001a86 <print_statement+0x1f6>
			if(red_time_change != red_time_cd){
 8001926:	4b61      	ldr	r3, [pc, #388]	; (8001aac <print_statement+0x21c>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b61      	ldr	r3, [pc, #388]	; (8001ab0 <print_statement+0x220>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	f000 80ab 	beq.w	8001a8a <print_statement+0x1fa>
				sprintf( strr , "\r\n!RED_AUTO=%u#\r\n", red_time_cd );
 8001934:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <print_statement+0x220>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	495e      	ldr	r1, [pc, #376]	; (8001ab4 <print_statement+0x224>)
 800193c:	485e      	ldr	r0, [pc, #376]	; (8001ab8 <print_statement+0x228>)
 800193e:	f002 fea9 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8001942:	485d      	ldr	r0, [pc, #372]	; (8001ab8 <print_statement+0x228>)
 8001944:	f7fe fc02 	bl	800014c <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	b29a      	uxth	r2, r3
 800194c:	2314      	movs	r3, #20
 800194e:	495a      	ldr	r1, [pc, #360]	; (8001ab8 <print_statement+0x228>)
 8001950:	485a      	ldr	r0, [pc, #360]	; (8001abc <print_statement+0x22c>)
 8001952:	f002 f8a3 	bl	8003a9c <HAL_UART_Transmit>
				red_time_change = red_time_cd;
 8001956:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <print_statement+0x220>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a54      	ldr	r2, [pc, #336]	; (8001aac <print_statement+0x21c>)
 800195c:	6013      	str	r3, [r2, #0]
			break;
 800195e:	e094      	b.n	8001a8a <print_statement+0x1fa>
			if(green_time_change != green_time_cd){
 8001960:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <print_statement+0x230>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <print_statement+0x234>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	f000 8090 	beq.w	8001a8e <print_statement+0x1fe>
				sprintf( strr , "\r\n!GREEN_AUTO=%u#\r\n", green_time_cd );
 800196e:	4b55      	ldr	r3, [pc, #340]	; (8001ac4 <print_statement+0x234>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	4954      	ldr	r1, [pc, #336]	; (8001ac8 <print_statement+0x238>)
 8001976:	4850      	ldr	r0, [pc, #320]	; (8001ab8 <print_statement+0x228>)
 8001978:	f002 fe8c 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 800197c:	484e      	ldr	r0, [pc, #312]	; (8001ab8 <print_statement+0x228>)
 800197e:	f7fe fbe5 	bl	800014c <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	2314      	movs	r3, #20
 8001988:	494b      	ldr	r1, [pc, #300]	; (8001ab8 <print_statement+0x228>)
 800198a:	484c      	ldr	r0, [pc, #304]	; (8001abc <print_statement+0x22c>)
 800198c:	f002 f886 	bl	8003a9c <HAL_UART_Transmit>
				green_time_change = green_time_cd;
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <print_statement+0x234>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <print_statement+0x230>)
 8001996:	6013      	str	r3, [r2, #0]
			break;
 8001998:	e079      	b.n	8001a8e <print_statement+0x1fe>
			if(yellow_time_change != yellow_time_cd){
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <print_statement+0x23c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <print_statement+0x240>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d075      	beq.n	8001a92 <print_statement+0x202>
				sprintf( strr , "\r\n!YELLOW_AUTO=%u#\r\n", yellow_time_cd);
 80019a6:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <print_statement+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4949      	ldr	r1, [pc, #292]	; (8001ad4 <print_statement+0x244>)
 80019ae:	4842      	ldr	r0, [pc, #264]	; (8001ab8 <print_statement+0x228>)
 80019b0:	f002 fe70 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 80019b4:	4840      	ldr	r0, [pc, #256]	; (8001ab8 <print_statement+0x228>)
 80019b6:	f7fe fbc9 	bl	800014c <strlen>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b29a      	uxth	r2, r3
 80019be:	2314      	movs	r3, #20
 80019c0:	493d      	ldr	r1, [pc, #244]	; (8001ab8 <print_statement+0x228>)
 80019c2:	483e      	ldr	r0, [pc, #248]	; (8001abc <print_statement+0x22c>)
 80019c4:	f002 f86a 	bl	8003a9c <HAL_UART_Transmit>
				yellow_time_change = yellow_time_cd;
 80019c8:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <print_statement+0x240>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <print_statement+0x23c>)
 80019ce:	6013      	str	r3, [r2, #0]
			break;
 80019d0:	e05f      	b.n	8001a92 <print_statement+0x202>
			if(state_buzzer != MANUAL_INIT){
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <print_statement+0x248>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b17      	cmp	r3, #23
 80019d8:	d05d      	beq.n	8001a96 <print_statement+0x206>
				sprintf( strr , "\r\n!MANUAL_INIT_MODE\r\n");
 80019da:	4940      	ldr	r1, [pc, #256]	; (8001adc <print_statement+0x24c>)
 80019dc:	4836      	ldr	r0, [pc, #216]	; (8001ab8 <print_statement+0x228>)
 80019de:	f002 fe59 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 80019e2:	4835      	ldr	r0, [pc, #212]	; (8001ab8 <print_statement+0x228>)
 80019e4:	f7fe fbb2 	bl	800014c <strlen>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	2314      	movs	r3, #20
 80019ee:	4932      	ldr	r1, [pc, #200]	; (8001ab8 <print_statement+0x228>)
 80019f0:	4832      	ldr	r0, [pc, #200]	; (8001abc <print_statement+0x22c>)
 80019f2:	f002 f853 	bl	8003a9c <HAL_UART_Transmit>
				state_buzzer = MANUAL_INIT;
 80019f6:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <print_statement+0x248>)
 80019f8:	2217      	movs	r2, #23
 80019fa:	601a      	str	r2, [r3, #0]
			break;
 80019fc:	e04b      	b.n	8001a96 <print_statement+0x206>
			if(state_buzzer != MANUAL_RED){
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <print_statement+0x248>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b14      	cmp	r3, #20
 8001a04:	d049      	beq.n	8001a9a <print_statement+0x20a>
				sprintf( strr , "\r\n!MANUAL_RED_MODE\r\n");
 8001a06:	4936      	ldr	r1, [pc, #216]	; (8001ae0 <print_statement+0x250>)
 8001a08:	482b      	ldr	r0, [pc, #172]	; (8001ab8 <print_statement+0x228>)
 8001a0a:	f002 fe43 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8001a0e:	482a      	ldr	r0, [pc, #168]	; (8001ab8 <print_statement+0x228>)
 8001a10:	f7fe fb9c 	bl	800014c <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2314      	movs	r3, #20
 8001a1a:	4927      	ldr	r1, [pc, #156]	; (8001ab8 <print_statement+0x228>)
 8001a1c:	4827      	ldr	r0, [pc, #156]	; (8001abc <print_statement+0x22c>)
 8001a1e:	f002 f83d 	bl	8003a9c <HAL_UART_Transmit>
				state_buzzer = MANUAL_RED;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <print_statement+0x248>)
 8001a24:	2214      	movs	r2, #20
 8001a26:	601a      	str	r2, [r3, #0]
			break;
 8001a28:	e037      	b.n	8001a9a <print_statement+0x20a>
			if(state_buzzer != MANUAL_YELLOW){
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <print_statement+0x248>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b15      	cmp	r3, #21
 8001a30:	d035      	beq.n	8001a9e <print_statement+0x20e>
				sprintf( strr , "\r\n!MANUAL_YELLOW_MODE\r\n");
 8001a32:	492c      	ldr	r1, [pc, #176]	; (8001ae4 <print_statement+0x254>)
 8001a34:	4820      	ldr	r0, [pc, #128]	; (8001ab8 <print_statement+0x228>)
 8001a36:	f002 fe2d 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8001a3a:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <print_statement+0x228>)
 8001a3c:	f7fe fb86 	bl	800014c <strlen>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	2314      	movs	r3, #20
 8001a46:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <print_statement+0x228>)
 8001a48:	481c      	ldr	r0, [pc, #112]	; (8001abc <print_statement+0x22c>)
 8001a4a:	f002 f827 	bl	8003a9c <HAL_UART_Transmit>
				state_buzzer = MANUAL_YELLOW;
 8001a4e:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <print_statement+0x248>)
 8001a50:	2215      	movs	r2, #21
 8001a52:	601a      	str	r2, [r3, #0]
			break;
 8001a54:	e023      	b.n	8001a9e <print_statement+0x20e>
			if(state_buzzer != MANUAL_GREEN){
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <print_statement+0x248>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b16      	cmp	r3, #22
 8001a5c:	d021      	beq.n	8001aa2 <print_statement+0x212>
				sprintf( strr , "\r\n!MANUAL_GREEN_MODE\r\n");
 8001a5e:	4922      	ldr	r1, [pc, #136]	; (8001ae8 <print_statement+0x258>)
 8001a60:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <print_statement+0x228>)
 8001a62:	f002 fe17 	bl	8004694 <siprintf>
				HAL_UART_Transmit (&huart2 , (uint8_t *) strr, strlen( strr), 20);
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <print_statement+0x228>)
 8001a68:	f7fe fb70 	bl	800014c <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2314      	movs	r3, #20
 8001a72:	4911      	ldr	r1, [pc, #68]	; (8001ab8 <print_statement+0x228>)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <print_statement+0x22c>)
 8001a76:	f002 f811 	bl	8003a9c <HAL_UART_Transmit>
				state_buzzer = MANUAL_GREEN;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <print_statement+0x248>)
 8001a7c:	2216      	movs	r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
			break;
 8001a80:	e00f      	b.n	8001aa2 <print_statement+0x212>
		default: break;
 8001a82:	bf00      	nop
 8001a84:	e00e      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001a86:	bf00      	nop
 8001a88:	e00c      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001a8a:	bf00      	nop
 8001a8c:	e00a      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001a8e:	bf00      	nop
 8001a90:	e008      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001a92:	bf00      	nop
 8001a94:	e006      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001a96:	bf00      	nop
 8001a98:	e004      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001a9a:	bf00      	nop
 8001a9c:	e002      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001a9e:	bf00      	nop
 8001aa0:	e000      	b.n	8001aa4 <print_statement+0x214>
			break;
 8001aa2:	bf00      	nop
		}
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000048 	.word	0x20000048
 8001aac:	2000015c 	.word	0x2000015c
 8001ab0:	20000120 	.word	0x20000120
 8001ab4:	08004f20 	.word	0x08004f20
 8001ab8:	2000025c 	.word	0x2000025c
 8001abc:	20000214 	.word	0x20000214
 8001ac0:	20000160 	.word	0x20000160
 8001ac4:	20000128 	.word	0x20000128
 8001ac8:	08004f34 	.word	0x08004f34
 8001acc:	20000164 	.word	0x20000164
 8001ad0:	20000124 	.word	0x20000124
 8001ad4:	08004f48 	.word	0x08004f48
 8001ad8:	20000044 	.word	0x20000044
 8001adc:	08004f60 	.word	0x08004f60
 8001ae0:	08004f78 	.word	0x08004f78
 8001ae4:	08004f90 	.word	0x08004f90
 8001ae8:	08004fa8 	.word	0x08004fa8

08001aec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aec:	f7ff feca 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001af2:	490c      	ldr	r1, [pc, #48]	; (8001b24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001af4:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b08:	4c09      	ldr	r4, [pc, #36]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b16:	f002 fd91 	bl	800463c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b1a:	f7ff f905 	bl	8000d28 <main>
  bx lr
 8001b1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b24:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001b28:	08005028 	.word	0x08005028
  ldr r2, =_sbss
 8001b2c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001b30:	20000290 	.word	0x20000290

08001b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC1_2_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_Init+0x28>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_Init+0x28>)
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f923 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	200f      	movs	r0, #15
 8001b50:	f000 f808 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fd24 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40022000 	.word	0x40022000

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f93b 	bl	8001dfe <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 f903 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	; (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000080 	.word	0x20000080
 8001bbc:	20000088 	.word	0x20000088
 8001bc0:	20000084 	.word	0x20000084

08001bc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_IncTick+0x1c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_IncTick+0x20>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <HAL_IncTick+0x20>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000088 	.word	0x20000088
 8001be4:	2000027c 	.word	0x2000027c

08001be8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <HAL_GetTick+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	2000027c 	.word	0x2000027c

08001bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <__NVIC_SetPriorityGrouping+0x44>)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60d3      	str	r3, [r2, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <__NVIC_GetPriorityGrouping+0x18>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	0a1b      	lsrs	r3, r3, #8
 8001c4e:	f003 0307 	and.w	r3, r3, #7
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db0b      	blt.n	8001c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	4906      	ldr	r1, [pc, #24]	; (8001c94 <__NVIC_EnableIRQ+0x34>)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	2001      	movs	r0, #1
 8001c82:	fa00 f202 	lsl.w	r2, r0, r2
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff90 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff2d 	bl	8001bfc <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff42 	bl	8001c44 <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff90 	bl	8001cec <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5f 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff35 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ffa2 	bl	8001d50 <SysTick_Config>
 8001e0c:	4603      	mov	r3, r0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d008      	beq.n	8001e40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2204      	movs	r2, #4
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e020      	b.n	8001e82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 020e 	bic.w	r2, r2, #14
 8001e4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d005      	beq.n	8001eb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e051      	b.n	8001f54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 020e 	bic.w	r2, r2, #14
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <HAL_DMA_Abort_IT+0xd4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d029      	beq.n	8001f2e <HAL_DMA_Abort_IT+0xa2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <HAL_DMA_Abort_IT+0xd8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_Abort_IT+0x9e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_DMA_Abort_IT+0xdc>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01a      	beq.n	8001f24 <HAL_DMA_Abort_IT+0x98>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_DMA_Abort_IT+0xe0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d012      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x92>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <HAL_DMA_Abort_IT+0xe4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00a      	beq.n	8001f18 <HAL_DMA_Abort_IT+0x8c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <HAL_DMA_Abort_IT+0xe8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d102      	bne.n	8001f12 <HAL_DMA_Abort_IT+0x86>
 8001f0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f10:	e00e      	b.n	8001f30 <HAL_DMA_Abort_IT+0xa4>
 8001f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f16:	e00b      	b.n	8001f30 <HAL_DMA_Abort_IT+0xa4>
 8001f18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f1c:	e008      	b.n	8001f30 <HAL_DMA_Abort_IT+0xa4>
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	e005      	b.n	8001f30 <HAL_DMA_Abort_IT+0xa4>
 8001f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f28:	e002      	b.n	8001f30 <HAL_DMA_Abort_IT+0xa4>
 8001f2a:	2310      	movs	r3, #16
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_Abort_IT+0xa4>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_DMA_Abort_IT+0xec>)
 8001f32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
    } 
  }
  return status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40020008 	.word	0x40020008
 8001f64:	4002001c 	.word	0x4002001c
 8001f68:	40020030 	.word	0x40020030
 8001f6c:	40020044 	.word	0x40020044
 8001f70:	40020058 	.word	0x40020058
 8001f74:	4002006c 	.word	0x4002006c
 8001f78:	40020000 	.word	0x40020000

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b08b      	sub	sp, #44	; 0x2c
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f86:	2300      	movs	r3, #0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	e169      	b.n	8002264 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f90:	2201      	movs	r2, #1
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	f040 8158 	bne.w	800225e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4a9a      	ldr	r2, [pc, #616]	; (800221c <HAL_GPIO_Init+0x2a0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d05e      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a98      	ldr	r2, [pc, #608]	; (800221c <HAL_GPIO_Init+0x2a0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d875      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fbe:	4a98      	ldr	r2, [pc, #608]	; (8002220 <HAL_GPIO_Init+0x2a4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d058      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fc4:	4a96      	ldr	r2, [pc, #600]	; (8002220 <HAL_GPIO_Init+0x2a4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d86f      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fca:	4a96      	ldr	r2, [pc, #600]	; (8002224 <HAL_GPIO_Init+0x2a8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d052      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fd0:	4a94      	ldr	r2, [pc, #592]	; (8002224 <HAL_GPIO_Init+0x2a8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d869      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fd6:	4a94      	ldr	r2, [pc, #592]	; (8002228 <HAL_GPIO_Init+0x2ac>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d04c      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fdc:	4a92      	ldr	r2, [pc, #584]	; (8002228 <HAL_GPIO_Init+0x2ac>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d863      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fe2:	4a92      	ldr	r2, [pc, #584]	; (800222c <HAL_GPIO_Init+0x2b0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d046      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
 8001fe8:	4a90      	ldr	r2, [pc, #576]	; (800222c <HAL_GPIO_Init+0x2b0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d85d      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001fee:	2b12      	cmp	r3, #18
 8001ff0:	d82a      	bhi.n	8002048 <HAL_GPIO_Init+0xcc>
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d859      	bhi.n	80020aa <HAL_GPIO_Init+0x12e>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_GPIO_Init+0x80>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	08002077 	.word	0x08002077
 8002000:	08002051 	.word	0x08002051
 8002004:	08002063 	.word	0x08002063
 8002008:	080020a5 	.word	0x080020a5
 800200c:	080020ab 	.word	0x080020ab
 8002010:	080020ab 	.word	0x080020ab
 8002014:	080020ab 	.word	0x080020ab
 8002018:	080020ab 	.word	0x080020ab
 800201c:	080020ab 	.word	0x080020ab
 8002020:	080020ab 	.word	0x080020ab
 8002024:	080020ab 	.word	0x080020ab
 8002028:	080020ab 	.word	0x080020ab
 800202c:	080020ab 	.word	0x080020ab
 8002030:	080020ab 	.word	0x080020ab
 8002034:	080020ab 	.word	0x080020ab
 8002038:	080020ab 	.word	0x080020ab
 800203c:	080020ab 	.word	0x080020ab
 8002040:	08002059 	.word	0x08002059
 8002044:	0800206d 	.word	0x0800206d
 8002048:	4a79      	ldr	r2, [pc, #484]	; (8002230 <HAL_GPIO_Init+0x2b4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800204e:	e02c      	b.n	80020aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	623b      	str	r3, [r7, #32]
          break;
 8002056:	e029      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	3304      	adds	r3, #4
 800205e:	623b      	str	r3, [r7, #32]
          break;
 8002060:	e024      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	3308      	adds	r3, #8
 8002068:	623b      	str	r3, [r7, #32]
          break;
 800206a:	e01f      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	330c      	adds	r3, #12
 8002072:	623b      	str	r3, [r7, #32]
          break;
 8002074:	e01a      	b.n	80020ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800207e:	2304      	movs	r3, #4
 8002080:	623b      	str	r3, [r7, #32]
          break;
 8002082:	e013      	b.n	80020ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d105      	bne.n	8002098 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800208c:	2308      	movs	r3, #8
 800208e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	611a      	str	r2, [r3, #16]
          break;
 8002096:	e009      	b.n	80020ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002098:	2308      	movs	r3, #8
 800209a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	615a      	str	r2, [r3, #20]
          break;
 80020a2:	e003      	b.n	80020ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e000      	b.n	80020ac <HAL_GPIO_Init+0x130>
          break;
 80020aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2bff      	cmp	r3, #255	; 0xff
 80020b0:	d801      	bhi.n	80020b6 <HAL_GPIO_Init+0x13a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	e001      	b.n	80020ba <HAL_GPIO_Init+0x13e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2bff      	cmp	r3, #255	; 0xff
 80020c0:	d802      	bhi.n	80020c8 <HAL_GPIO_Init+0x14c>
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	e002      	b.n	80020ce <HAL_GPIO_Init+0x152>
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	3b08      	subs	r3, #8
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	210f      	movs	r1, #15
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	6a39      	ldr	r1, [r7, #32]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80b1 	beq.w	800225e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <HAL_GPIO_Init+0x2b8>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <HAL_GPIO_Init+0x2b8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6193      	str	r3, [r2, #24]
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_GPIO_Init+0x2b8>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002114:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_GPIO_Init+0x2bc>)
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a40      	ldr	r2, [pc, #256]	; (800223c <HAL_GPIO_Init+0x2c0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_GPIO_Init+0x1ec>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a3f      	ldr	r2, [pc, #252]	; (8002240 <HAL_GPIO_Init+0x2c4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00d      	beq.n	8002164 <HAL_GPIO_Init+0x1e8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <HAL_GPIO_Init+0x2c8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d007      	beq.n	8002160 <HAL_GPIO_Init+0x1e4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a3d      	ldr	r2, [pc, #244]	; (8002248 <HAL_GPIO_Init+0x2cc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_GPIO_Init+0x1e0>
 8002158:	2303      	movs	r3, #3
 800215a:	e006      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 800215c:	2304      	movs	r3, #4
 800215e:	e004      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002160:	2302      	movs	r3, #2
 8002162:	e002      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_GPIO_Init+0x1ee>
 8002168:	2300      	movs	r3, #0
 800216a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4093      	lsls	r3, r2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800217a:	492f      	ldr	r1, [pc, #188]	; (8002238 <HAL_GPIO_Init+0x2bc>)
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_GPIO_Init+0x2d0>)
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	492c      	ldr	r1, [pc, #176]	; (800224c <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	4928      	ldr	r1, [pc, #160]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4922      	ldr	r1, [pc, #136]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	491e      	ldr	r1, [pc, #120]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4918      	ldr	r1, [pc, #96]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4914      	ldr	r1, [pc, #80]	; (800224c <HAL_GPIO_Init+0x2d0>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d021      	beq.n	8002250 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_GPIO_Init+0x2d0>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <HAL_GPIO_Init+0x2d0>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e021      	b.n	800225e <HAL_GPIO_Init+0x2e2>
 800221a:	bf00      	nop
 800221c:	10320000 	.word	0x10320000
 8002220:	10310000 	.word	0x10310000
 8002224:	10220000 	.word	0x10220000
 8002228:	10210000 	.word	0x10210000
 800222c:	10120000 	.word	0x10120000
 8002230:	10110000 	.word	0x10110000
 8002234:	40021000 	.word	0x40021000
 8002238:	40010000 	.word	0x40010000
 800223c:	40010800 	.word	0x40010800
 8002240:	40010c00 	.word	0x40010c00
 8002244:	40011000 	.word	0x40011000
 8002248:	40011400 	.word	0x40011400
 800224c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_GPIO_Init+0x304>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	43db      	mvns	r3, r3
 8002258:	4909      	ldr	r1, [pc, #36]	; (8002280 <HAL_GPIO_Init+0x304>)
 800225a:	4013      	ands	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	3301      	adds	r3, #1
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	f47f ae8e 	bne.w	8001f90 <HAL_GPIO_Init+0x14>
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	372c      	adds	r7, #44	; 0x2c
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	4013      	ands	r3, r2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e001      	b.n	80022a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]
 80022be:	4613      	mov	r3, r2
 80022c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c2:	787b      	ldrb	r3, [r7, #1]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022ce:	e003      	b.n	80022d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	041a      	lsls	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022f4:	887a      	ldrh	r2, [r7, #2]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	041a      	lsls	r2, r3, #16
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43d9      	mvns	r1, r3
 8002300:	887b      	ldrh	r3, [r7, #2]
 8002302:	400b      	ands	r3, r1
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e26c      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8087 	beq.w	8002442 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002334:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b04      	cmp	r3, #4
 800233e:	d00c      	beq.n	800235a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002340:	4b8f      	ldr	r3, [pc, #572]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	d112      	bne.n	8002372 <HAL_RCC_OscConfig+0x5e>
 800234c:	4b8c      	ldr	r3, [pc, #560]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d10b      	bne.n	8002372 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235a:	4b89      	ldr	r3, [pc, #548]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d06c      	beq.n	8002440 <HAL_RCC_OscConfig+0x12c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d168      	bne.n	8002440 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e246      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x76>
 800237c:	4b80      	ldr	r3, [pc, #512]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a7f      	ldr	r2, [pc, #508]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	e02e      	b.n	80023e8 <HAL_RCC_OscConfig+0xd4>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x98>
 8002392:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7a      	ldr	r2, [pc, #488]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b78      	ldr	r3, [pc, #480]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a77      	ldr	r2, [pc, #476]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xd4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0xbc>
 80023b6:	4b72      	ldr	r3, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a71      	ldr	r2, [pc, #452]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a6e      	ldr	r2, [pc, #440]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xd4>
 80023d0:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a6a      	ldr	r2, [pc, #424]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b68      	ldr	r3, [pc, #416]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a67      	ldr	r2, [pc, #412]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fbfa 	bl	8001be8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff fbf6 	bl	8001be8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1fa      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xe4>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff fbe6 	bl	8001be8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff fbe2 	bl	8001be8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1e6      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x10c>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244e:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800245a:	4b49      	ldr	r3, [pc, #292]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x18c>
 8002466:	4b46      	ldr	r3, [pc, #280]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x176>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1ba      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4939      	ldr	r1, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCC_OscConfig+0x270>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7ff fb9b 	bl	8001be8 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b6:	f7ff fb97 	bl	8001be8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e19b      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4927      	ldr	r1, [pc, #156]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_RCC_OscConfig+0x270>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff fb7a 	bl	8001be8 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f8:	f7ff fb76 	bl	8001be8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e17a      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d03a      	beq.n	8002598 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d019      	beq.n	800255e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002530:	f7ff fb5a 	bl	8001be8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002538:	f7ff fb56 	bl	8001be8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e15a      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_RCC_OscConfig+0x26c>)
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002556:	2001      	movs	r0, #1
 8002558:	f000 facc 	bl	8002af4 <RCC_Delay>
 800255c:	e01c      	b.n	8002598 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_RCC_OscConfig+0x274>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7ff fb40 	bl	8001be8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256a:	e00f      	b.n	800258c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256c:	f7ff fb3c 	bl	8001be8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d908      	bls.n	800258c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e140      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	42420000 	.word	0x42420000
 8002588:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	4b9e      	ldr	r3, [pc, #632]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e9      	bne.n	800256c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80a6 	beq.w	80026f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b97      	ldr	r3, [pc, #604]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b94      	ldr	r3, [pc, #592]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4a93      	ldr	r2, [pc, #588]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	61d3      	str	r3, [r2, #28]
 80025c2:	4b91      	ldr	r3, [pc, #580]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4b8e      	ldr	r3, [pc, #568]	; (800280c <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025de:	4b8b      	ldr	r3, [pc, #556]	; (800280c <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a8a      	ldr	r2, [pc, #552]	; (800280c <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7ff fafd 	bl	8001be8 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7ff faf9 	bl	8001be8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b64      	cmp	r3, #100	; 0x64
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e0fd      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002604:	4b81      	ldr	r3, [pc, #516]	; (800280c <HAL_RCC_OscConfig+0x4f8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x312>
 8002618:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a7a      	ldr	r2, [pc, #488]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	e02d      	b.n	8002682 <HAL_RCC_OscConfig+0x36e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10c      	bne.n	8002648 <HAL_RCC_OscConfig+0x334>
 800262e:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a75      	ldr	r2, [pc, #468]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	4b73      	ldr	r3, [pc, #460]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a72      	ldr	r2, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6213      	str	r3, [r2, #32]
 8002646:	e01c      	b.n	8002682 <HAL_RCC_OscConfig+0x36e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b05      	cmp	r3, #5
 800264e:	d10c      	bne.n	800266a <HAL_RCC_OscConfig+0x356>
 8002650:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a6c      	ldr	r2, [pc, #432]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a69      	ldr	r2, [pc, #420]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6213      	str	r3, [r2, #32]
 8002668:	e00b      	b.n	8002682 <HAL_RCC_OscConfig+0x36e>
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a66      	ldr	r2, [pc, #408]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6213      	str	r3, [r2, #32]
 8002676:	4b64      	ldr	r3, [pc, #400]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a63      	ldr	r2, [pc, #396]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7ff faad 	bl	8001be8 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7ff faa9 	bl	8001be8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0ab      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	4b57      	ldr	r3, [pc, #348]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ee      	beq.n	8002692 <HAL_RCC_OscConfig+0x37e>
 80026b4:	e014      	b.n	80026e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7ff fa97 	bl	8001be8 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7ff fa93 	bl	8001be8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e095      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d4:	4b4c      	ldr	r3, [pc, #304]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d105      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e6:	4b48      	ldr	r3, [pc, #288]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4a47      	ldr	r2, [pc, #284]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8081 	beq.w	80027fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026fc:	4b42      	ldr	r3, [pc, #264]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d061      	beq.n	80027cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d146      	bne.n	800279e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_OscConfig+0x4fc>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7ff fa67 	bl	8001be8 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7ff fa63 	bl	8001be8 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e067      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002730:	4b35      	ldr	r3, [pc, #212]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d108      	bne.n	8002758 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	492d      	ldr	r1, [pc, #180]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a19      	ldr	r1, [r3, #32]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	430b      	orrs	r3, r1
 800276a:	4927      	ldr	r1, [pc, #156]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002770:	4b27      	ldr	r3, [pc, #156]	; (8002810 <HAL_RCC_OscConfig+0x4fc>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7ff fa37 	bl	8001be8 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7ff fa33 	bl	8001be8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e037      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x46a>
 800279c:	e02f      	b.n	80027fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_RCC_OscConfig+0x4fc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7ff fa20 	bl	8001be8 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7ff fa1c 	bl	8001be8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e020      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x498>
 80027ca:	e018      	b.n	80027fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e013      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d001      	beq.n	80027fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
 8002810:	42420060 	.word	0x42420060

08002814 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0d0      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d910      	bls.n	8002858 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 0207 	bic.w	r2, r3, #7
 800283e:	4965      	ldr	r1, [pc, #404]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800287a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002892:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d040      	beq.n	8002934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d115      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e073      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06b      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b39      	ldr	r3, [pc, #228]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4936      	ldr	r1, [pc, #216]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002904:	f7ff f970 	bl	8001be8 <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7ff f96c 	bl	8001be8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e053      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d210      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 0207 	bic.w	r2, r3, #7
 800294a:	4922      	ldr	r1, [pc, #136]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f821 	bl	80029e8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490a      	ldr	r1, [pc, #40]	; (80029dc <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1cc>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f8ce 	bl	8001b64 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000
 80029d8:	40021000 	.word	0x40021000
 80029dc:	08004fc0 	.word	0x08004fc0
 80029e0:	20000080 	.word	0x20000080
 80029e4:	20000084 	.word	0x20000084

080029e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d002      	beq.n	8002a18 <HAL_RCC_GetSysClockFreq+0x30>
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x36>
 8002a16:	e027      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1a:	613b      	str	r3, [r7, #16]
      break;
 8002a1c:	e027      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	0c9b      	lsrs	r3, r3, #18
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a28:	5cd3      	ldrb	r3, [r2, r3]
 8002a2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d010      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	0c5b      	lsrs	r3, r3, #17
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4a:	fb02 f203 	mul.w	r2, r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e004      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	613b      	str	r3, [r7, #16]
      break;
 8002a66:	e002      	b.n	8002a6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a6a:	613b      	str	r3, [r7, #16]
      break;
 8002a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6e:	693b      	ldr	r3, [r7, #16]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	007a1200 	.word	0x007a1200
 8002a84:	08004fd8 	.word	0x08004fd8
 8002a88:	08004fe8 	.word	0x08004fe8
 8002a8c:	003d0900 	.word	0x003d0900

08002a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a94:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a96:	681b      	ldr	r3, [r3, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	20000080 	.word	0x20000080

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa8:	f7ff fff2 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08004fd0 	.word	0x08004fd0

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ad0:	f7ff ffde 	bl	8002a90 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	0adb      	lsrs	r3, r3, #11
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08004fd0 	.word	0x08004fd0

08002af4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <RCC_Delay+0x34>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <RCC_Delay+0x38>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a5b      	lsrs	r3, r3, #9
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b10:	bf00      	nop
  }
  while (Delay --);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1e5a      	subs	r2, r3, #1
 8002b16:	60fa      	str	r2, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f9      	bne.n	8002b10 <RCC_Delay+0x1c>
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	20000080 	.word	0x20000080
 8002b2c:	10624dd3 	.word	0x10624dd3

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e041      	b.n	8002bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fe fd54 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 fc30 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d001      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e03a      	b.n	8002c5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_TIM_Base_Start_IT+0x98>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00e      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x58>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c12:	d009      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x58>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_TIM_Base_Start_IT+0x9c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d004      	beq.n	8002c28 <HAL_TIM_Base_Start_IT+0x58>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d010      	beq.n	8002c5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4a:	e007      	b.n	8002c5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800

08002c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f839 	bl	8002d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 fb8e 	bl	80033d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_TIM_PWM_Start+0x24>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	bf14      	ite	ne
 8002d40:	2301      	movne	r3, #1
 8002d42:	2300      	moveq	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e022      	b.n	8002d8e <HAL_TIM_PWM_Start+0x6a>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d109      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x3e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	bf14      	ite	ne
 8002d5a:	2301      	movne	r3, #1
 8002d5c:	2300      	moveq	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	e015      	b.n	8002d8e <HAL_TIM_PWM_Start+0x6a>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d109      	bne.n	8002d7c <HAL_TIM_PWM_Start+0x58>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e008      	b.n	8002d8e <HAL_TIM_PWM_Start+0x6a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e05e      	b.n	8002e54 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_PWM_Start+0x82>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da4:	e013      	b.n	8002dce <HAL_TIM_PWM_Start+0xaa>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d104      	bne.n	8002db6 <HAL_TIM_PWM_Start+0x92>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db4:	e00b      	b.n	8002dce <HAL_TIM_PWM_Start+0xaa>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d104      	bne.n	8002dc6 <HAL_TIM_PWM_Start+0xa2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc4:	e003      	b.n	8002dce <HAL_TIM_PWM_Start+0xaa>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	6839      	ldr	r1, [r7, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fd7c 	bl	80038d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <HAL_TIM_PWM_Start+0x138>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d107      	bne.n	8002df6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <HAL_TIM_PWM_Start+0x138>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00e      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xfa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e08:	d009      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xfa>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_TIM_PWM_Start+0x13c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xfa>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <HAL_TIM_PWM_Start+0x140>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d111      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d010      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e40:	e007      	b.n	8002e52 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40012c00 	.word	0x40012c00
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800

08002e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0202 	mvn.w	r2, #2
 8002e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fa76 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa69 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fa78 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0204 	mvn.w	r2, #4
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa4c 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa3f 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fa4e 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0208 	mvn.w	r2, #8
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2204      	movs	r2, #4
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa22 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fa15 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fa24 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d122      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d11b      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2208      	movs	r2, #8
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f9f8 	bl	800339c <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f9eb 	bl	800338a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f9fa 	bl	80033ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10e      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0201 	mvn.w	r2, #1
 8002fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fe f880 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b80      	cmp	r3, #128	; 0x80
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b80      	cmp	r3, #128	; 0x80
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fce9 	bl	80039ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9be 	bl	80033c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b20      	cmp	r3, #32
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0220 	mvn.w	r2, #32
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcb4 	bl	80039d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003092:	2302      	movs	r3, #2
 8003094:	e0ae      	b.n	80031f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	f200 809f 	bhi.w	80031e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080031e5 	.word	0x080031e5
 80030b4:	080031e5 	.word	0x080031e5
 80030b8:	080031e5 	.word	0x080031e5
 80030bc:	08003121 	.word	0x08003121
 80030c0:	080031e5 	.word	0x080031e5
 80030c4:	080031e5 	.word	0x080031e5
 80030c8:	080031e5 	.word	0x080031e5
 80030cc:	08003163 	.word	0x08003163
 80030d0:	080031e5 	.word	0x080031e5
 80030d4:	080031e5 	.word	0x080031e5
 80030d8:	080031e5 	.word	0x080031e5
 80030dc:	080031a3 	.word	0x080031a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f9d6 	bl	8003498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0204 	bic.w	r2, r2, #4
 800310a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6999      	ldr	r1, [r3, #24]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	619a      	str	r2, [r3, #24]
      break;
 800311e:	e064      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa1c 	bl	8003564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6999      	ldr	r1, [r3, #24]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	021a      	lsls	r2, r3, #8
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	619a      	str	r2, [r3, #24]
      break;
 8003160:	e043      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa65 	bl	8003638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0208 	orr.w	r2, r2, #8
 800317c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69da      	ldr	r2, [r3, #28]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0204 	bic.w	r2, r2, #4
 800318c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69d9      	ldr	r1, [r3, #28]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	61da      	str	r2, [r3, #28]
      break;
 80031a0:	e023      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68b9      	ldr	r1, [r7, #8]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 faaf 	bl	800370c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	021a      	lsls	r2, r3, #8
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	61da      	str	r2, [r3, #28]
      break;
 80031e2:	e002      	b.n	80031ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	75fb      	strb	r3, [r7, #23]
      break;
 80031e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_TIM_ConfigClockSource+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e0b4      	b.n	8003382 <HAL_TIM_ConfigClockSource+0x186>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003250:	d03e      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003256:	f200 8087 	bhi.w	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 800325a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325e:	f000 8086 	beq.w	800336e <HAL_TIM_ConfigClockSource+0x172>
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	d87f      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d01a      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0xa6>
 800326c:	2b70      	cmp	r3, #112	; 0x70
 800326e:	d87b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d050      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x11a>
 8003274:	2b60      	cmp	r3, #96	; 0x60
 8003276:	d877      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d03c      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0xfa>
 800327c:	2b50      	cmp	r3, #80	; 0x50
 800327e:	d873      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d058      	beq.n	8003336 <HAL_TIM_ConfigClockSource+0x13a>
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d86f      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d064      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 800328c:	2b30      	cmp	r3, #48	; 0x30
 800328e:	d86b      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d060      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b20      	cmp	r3, #32
 8003296:	d867      	bhi.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d05c      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	2b10      	cmp	r3, #16
 800329e:	d05a      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	e062      	b.n	8003368 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f000 faf0 	bl	8003896 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	609a      	str	r2, [r3, #8]
      break;
 80032ce:	e04f      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6899      	ldr	r1, [r3, #8]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f000 fad9 	bl	8003896 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f2:	609a      	str	r2, [r3, #8]
      break;
 80032f4:	e03c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	461a      	mov	r2, r3
 8003304:	f000 fa50 	bl	80037a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2150      	movs	r1, #80	; 0x50
 800330e:	4618      	mov	r0, r3
 8003310:	f000 faa7 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003314:	e02c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	461a      	mov	r2, r3
 8003324:	f000 fa6e 	bl	8003804 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2160      	movs	r1, #96	; 0x60
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fa97 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003334:	e01c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	461a      	mov	r2, r3
 8003344:	f000 fa30 	bl	80037a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2140      	movs	r1, #64	; 0x40
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fa87 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003354:	e00c      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f000 fa7e 	bl	8003862 <TIM_ITRx_SetConfig>
      break;
 8003366:	e003      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e000      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800336e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
	...

080033d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a29      	ldr	r2, [pc, #164]	; (800348c <TIM_Base_SetConfig+0xb8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00b      	beq.n	8003404 <TIM_Base_SetConfig+0x30>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d007      	beq.n	8003404 <TIM_Base_SetConfig+0x30>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a26      	ldr	r2, [pc, #152]	; (8003490 <TIM_Base_SetConfig+0xbc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d003      	beq.n	8003404 <TIM_Base_SetConfig+0x30>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a25      	ldr	r2, [pc, #148]	; (8003494 <TIM_Base_SetConfig+0xc0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d108      	bne.n	8003416 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <TIM_Base_SetConfig+0xb8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0x62>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0x62>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <TIM_Base_SetConfig+0xbc>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a18      	ldr	r2, [pc, #96]	; (8003494 <TIM_Base_SetConfig+0xc0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d108      	bne.n	8003448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <TIM_Base_SetConfig+0xb8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	615a      	str	r2, [r3, #20]
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800

08003498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 0201 	bic.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f023 0302 	bic.w	r3, r3, #2
 80034e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <TIM_OC1_SetConfig+0xc8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d10c      	bne.n	800350e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0308 	bic.w	r3, r3, #8
 80034fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4313      	orrs	r3, r2
 8003504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a13      	ldr	r2, [pc, #76]	; (8003560 <TIM_OC1_SetConfig+0xc8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d111      	bne.n	800353a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800351c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	621a      	str	r2, [r3, #32]
}
 8003554:	bf00      	nop
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40012c00 	.word	0x40012c00

08003564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f023 0210 	bic.w	r2, r3, #16
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 0320 	bic.w	r3, r3, #32
 80035ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <TIM_OC2_SetConfig+0xd0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10d      	bne.n	80035e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <TIM_OC2_SetConfig+0xd0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d113      	bne.n	8003610 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	621a      	str	r2, [r3, #32]
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00

08003638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0303 	bic.w	r3, r3, #3
 800366e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <TIM_OC3_SetConfig+0xd0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d10d      	bne.n	80036b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800369c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <TIM_OC3_SetConfig+0xd0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d113      	bne.n	80036e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	621a      	str	r2, [r3, #32]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40012c00 	.word	0x40012c00

0800370c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	031b      	lsls	r3, r3, #12
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <TIM_OC4_SetConfig+0x98>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d109      	bne.n	8003780 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	4313      	orrs	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40012c00 	.word	0x40012c00

080037a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f023 030a 	bic.w	r3, r3, #10
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0210 	bic.w	r2, r3, #16
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800382e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	031b      	lsls	r3, r3, #12
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	621a      	str	r2, [r3, #32]
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	f043 0307 	orr.w	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	609a      	str	r2, [r3, #8]
}
 800388c:	bf00      	nop
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4313      	orrs	r3, r2
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	609a      	str	r2, [r3, #8]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2201      	movs	r2, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1a      	ldr	r2, [r3, #32]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	401a      	ands	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1a      	ldr	r2, [r3, #32]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	fa01 f303 	lsl.w	r3, r1, r3
 800390c:	431a      	orrs	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003930:	2302      	movs	r3, #2
 8003932:	e046      	b.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00e      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003980:	d009      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d004      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10c      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800

080039d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e042      	b.n	8003a94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fe60 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fd67 	bl	8004514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	; 0x28
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d16d      	bne.n	8003b98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_Transmit+0x2c>
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e066      	b.n	8003b9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2221      	movs	r2, #33	; 0x21
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ada:	f7fe f885 	bl	8001be8 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x6c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b10:	e02a      	b.n	8003b68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	; 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 faf0 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e036      	b.n	8003b9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	3302      	adds	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e007      	b.n	8003b5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	3301      	adds	r3, #1
 8003b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1cf      	bne.n	8003b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fac0 	bl	8004102 <UART_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e006      	b.n	8003b9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b0ba      	sub	sp, #232	; 0xe8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_UART_IRQHandler+0x66>
 8003bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fbc8 	bl	8004398 <UART_Receive_IT>
      return;
 8003c08:	e25b      	b.n	80040c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80de 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x22c>
 8003c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d106      	bne.n	8003c2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80d1 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_UART_IRQHandler+0xae>
 8003c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_UART_IRQHandler+0xd2>
 8003c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_UART_IRQHandler+0xf6>
 8003c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d011      	beq.n	8003cca <HAL_UART_IRQHandler+0x126>
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f043 0208 	orr.w	r2, r3, #8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 81f2 	beq.w	80040b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x14e>
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fb53 	bl	8004398 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf14      	ite	ne
 8003d00:	2301      	movne	r3, #1
 8003d02:	2300      	moveq	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <HAL_UART_IRQHandler+0x17a>
 8003d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04f      	beq.n	8003dbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa5d 	bl	80041de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d041      	beq.n	8003db6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3314      	adds	r3, #20
 8003d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	4a7e      	ldr	r2, [pc, #504]	; (8003f84 <HAL_UART_IRQHandler+0x3e0>)
 8003d8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe f87a 	bl	8001e8c <HAL_DMA_Abort_IT>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003da8:	4610      	mov	r0, r2
 8003daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00e      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f993 	bl	80040da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e00a      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f98f 	bl	80040da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	e006      	b.n	8003dcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f98b 	bl	80040da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003dca:	e175      	b.n	80040b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dcc:	bf00      	nop
    return;
 8003dce:	e173      	b.n	80040b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	f040 814f 	bne.w	8004078 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8148 	beq.w	8004078 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8141 	beq.w	8004078 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80b6 	beq.w	8003f88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8145 	beq.w	80040bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	f080 813e 	bcs.w	80040bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	f000 8088 	beq.w	8003f64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	330c      	adds	r3, #12
 8003e5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e80:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1d9      	bne.n	8003e54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eaa:	e853 3f00 	ldrex	r3, [r3]
 8003eae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ec4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ecc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e1      	bne.n	8003ea0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e3      	bne.n	8003edc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f34:	f023 0310 	bic.w	r3, r3, #16
 8003f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f46:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e3      	bne.n	8003f22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd ff59 	bl	8001e16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8b6 	bl	80040ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f80:	e09c      	b.n	80040bc <HAL_UART_IRQHandler+0x518>
 8003f82:	bf00      	nop
 8003f84:	080042a3 	.word	0x080042a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 808e 	beq.w	80040c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8089 	beq.w	80040c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e3      	bne.n	8003fae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400a:	633a      	str	r2, [r7, #48]	; 0x30
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	60fb      	str	r3, [r7, #12]
   return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004050:	61fa      	str	r2, [r7, #28]
 8004052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	617b      	str	r3, [r7, #20]
   return(result);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e3      	bne.n	800402c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800406a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f83b 	bl	80040ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004076:	e023      	b.n	80040c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_UART_IRQHandler+0x4f4>
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f91a 	bl	80042ca <UART_Transmit_IT>
    return;
 8004096:	e014      	b.n	80040c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <HAL_UART_IRQHandler+0x51e>
 80040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f959 	bl	8004368 <UART_EndTransmit_IT>
    return;
 80040b6:	e004      	b.n	80040c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80040b8:	bf00      	nop
 80040ba:	e002      	b.n	80040c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80040c0:	bf00      	nop
  }
}
 80040c2:	37e8      	adds	r7, #232	; 0xe8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b090      	sub	sp, #64	; 0x40
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004112:	e050      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d04c      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800411c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <UART_WaitOnFlagUntilTimeout+0x30>
 8004122:	f7fd fd61 	bl	8001be8 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800412e:	429a      	cmp	r2, r3
 8004130:	d241      	bcs.n	80041b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	330c      	adds	r3, #12
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004152:	637a      	str	r2, [r7, #52]	; 0x34
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	613b      	str	r3, [r7, #16]
   return(result);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	63bb      	str	r3, [r7, #56]	; 0x38
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004186:	623a      	str	r2, [r7, #32]
 8004188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	69f9      	ldr	r1, [r7, #28]
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	61bb      	str	r3, [r7, #24]
   return(result);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e5      	bne.n	8004166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e00f      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4013      	ands	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d09f      	beq.n	8004114 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3740      	adds	r7, #64	; 0x40
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041de:	b480      	push	{r7}
 80041e0:	b095      	sub	sp, #84	; 0x54
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004206:	643a      	str	r2, [r7, #64]	; 0x40
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800420c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	61fb      	str	r3, [r7, #28]
   return(result);
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	64bb      	str	r3, [r7, #72]	; 0x48
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800423a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	2b01      	cmp	r3, #1
 8004254:	d119      	bne.n	800428a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	60bb      	str	r3, [r7, #8]
   return(result);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f023 0310 	bic.w	r3, r3, #16
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004276:	61ba      	str	r2, [r7, #24]
 8004278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6979      	ldr	r1, [r7, #20]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	613b      	str	r3, [r7, #16]
   return(result);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e5      	bne.n	8004256 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004298:	bf00      	nop
 800429a:	3754      	adds	r7, #84	; 0x54
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr

080042a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff ff0c 	bl	80040da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b21      	cmp	r3, #33	; 0x21
 80042dc:	d13e      	bne.n	800435c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e6:	d114      	bne.n	8004312 <UART_Transmit_IT+0x48>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d110      	bne.n	8004312 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004304:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	1c9a      	adds	r2, r3, #2
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	621a      	str	r2, [r3, #32]
 8004310:	e008      	b.n	8004324 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	1c59      	adds	r1, r3, #1
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6211      	str	r1, [r2, #32]
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29b      	uxth	r3, r3
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4619      	mov	r1, r3
 8004332:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10f      	bne.n	8004358 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004346:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004356:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff fe9d 	bl	80040c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b22      	cmp	r3, #34	; 0x22
 80043aa:	f040 80ae 	bne.w	800450a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b6:	d117      	bne.n	80043e8 <UART_Receive_IT+0x50>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d113      	bne.n	80043e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	1c9a      	adds	r2, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
 80043e6:	e026      	b.n	8004436 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fa:	d007      	beq.n	800440c <UART_Receive_IT+0x74>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <UART_Receive_IT+0x82>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e008      	b.n	800442c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004426:	b2da      	uxtb	r2, r3
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29b      	uxth	r3, r3
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4619      	mov	r1, r3
 8004444:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004446:	2b00      	cmp	r3, #0
 8004448:	d15d      	bne.n	8004506 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0220 	bic.w	r2, r2, #32
 8004458:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004468:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	d135      	bne.n	80044fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	613b      	str	r3, [r7, #16]
   return(result);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f023 0310 	bic.w	r3, r3, #16
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b6:	623a      	str	r2, [r7, #32]
 80044b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	69f9      	ldr	r1, [r7, #28]
 80044bc:	6a3a      	ldr	r2, [r7, #32]
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e5      	bne.n	8004496 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d10a      	bne.n	80044ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fdf9 	bl	80040ec <HAL_UARTEx_RxEventCallback>
 80044fa:	e002      	b.n	8004502 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc fe07 	bl	8001110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	e002      	b.n	800450c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	3730      	adds	r7, #48	; 0x30
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800454e:	f023 030c 	bic.w	r3, r3, #12
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	430b      	orrs	r3, r1
 800455a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a2c      	ldr	r2, [pc, #176]	; (8004628 <UART_SetConfig+0x114>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d103      	bne.n	8004584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800457c:	f7fe faa6 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	e002      	b.n	800458a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7fe fa8e 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8004588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009a      	lsls	r2, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <UART_SetConfig+0x118>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	0119      	lsls	r1, r3, #4
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009a      	lsls	r2, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <UART_SetConfig+0x118>)
 80045c2:	fba3 0302 	umull	r0, r3, r3, r2
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2064      	movs	r0, #100	; 0x64
 80045ca:	fb00 f303 	mul.w	r3, r0, r3
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	3332      	adds	r3, #50	; 0x32
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <UART_SetConfig+0x118>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e0:	4419      	add	r1, r3
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009a      	lsls	r2, r3, #2
 80045ec:	441a      	add	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <UART_SetConfig+0x118>)
 80045fa:	fba3 0302 	umull	r0, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2064      	movs	r0, #100	; 0x64
 8004602:	fb00 f303 	mul.w	r3, r0, r3
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	3332      	adds	r3, #50	; 0x32
 800460c:	4a07      	ldr	r2, [pc, #28]	; (800462c <UART_SetConfig+0x118>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	f003 020f 	and.w	r2, r3, #15
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	440a      	add	r2, r1
 800461e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40013800 	.word	0x40013800
 800462c:	51eb851f 	.word	0x51eb851f

08004630 <__errno>:
 8004630:	4b01      	ldr	r3, [pc, #4]	; (8004638 <__errno+0x8>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2000008c 	.word	0x2000008c

0800463c <__libc_init_array>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	2600      	movs	r6, #0
 8004640:	4d0c      	ldr	r5, [pc, #48]	; (8004674 <__libc_init_array+0x38>)
 8004642:	4c0d      	ldr	r4, [pc, #52]	; (8004678 <__libc_init_array+0x3c>)
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	42a6      	cmp	r6, r4
 800464a:	d109      	bne.n	8004660 <__libc_init_array+0x24>
 800464c:	f000 fc5c 	bl	8004f08 <_init>
 8004650:	2600      	movs	r6, #0
 8004652:	4d0a      	ldr	r5, [pc, #40]	; (800467c <__libc_init_array+0x40>)
 8004654:	4c0a      	ldr	r4, [pc, #40]	; (8004680 <__libc_init_array+0x44>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	42a6      	cmp	r6, r4
 800465c:	d105      	bne.n	800466a <__libc_init_array+0x2e>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f855 3b04 	ldr.w	r3, [r5], #4
 8004664:	4798      	blx	r3
 8004666:	3601      	adds	r6, #1
 8004668:	e7ee      	b.n	8004648 <__libc_init_array+0xc>
 800466a:	f855 3b04 	ldr.w	r3, [r5], #4
 800466e:	4798      	blx	r3
 8004670:	3601      	adds	r6, #1
 8004672:	e7f2      	b.n	800465a <__libc_init_array+0x1e>
 8004674:	08005020 	.word	0x08005020
 8004678:	08005020 	.word	0x08005020
 800467c:	08005020 	.word	0x08005020
 8004680:	08005024 	.word	0x08005024

08004684 <memset>:
 8004684:	4603      	mov	r3, r0
 8004686:	4402      	add	r2, r0
 8004688:	4293      	cmp	r3, r2
 800468a:	d100      	bne.n	800468e <memset+0xa>
 800468c:	4770      	bx	lr
 800468e:	f803 1b01 	strb.w	r1, [r3], #1
 8004692:	e7f9      	b.n	8004688 <memset+0x4>

08004694 <siprintf>:
 8004694:	b40e      	push	{r1, r2, r3}
 8004696:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800469a:	b500      	push	{lr}
 800469c:	b09c      	sub	sp, #112	; 0x70
 800469e:	ab1d      	add	r3, sp, #116	; 0x74
 80046a0:	9002      	str	r0, [sp, #8]
 80046a2:	9006      	str	r0, [sp, #24]
 80046a4:	9107      	str	r1, [sp, #28]
 80046a6:	9104      	str	r1, [sp, #16]
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <siprintf+0x38>)
 80046aa:	4909      	ldr	r1, [pc, #36]	; (80046d0 <siprintf+0x3c>)
 80046ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b0:	9105      	str	r1, [sp, #20]
 80046b2:	6800      	ldr	r0, [r0, #0]
 80046b4:	a902      	add	r1, sp, #8
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	f000 f868 	bl	800478c <_svfiprintf_r>
 80046bc:	2200      	movs	r2, #0
 80046be:	9b02      	ldr	r3, [sp, #8]
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	b01c      	add	sp, #112	; 0x70
 80046c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046c8:	b003      	add	sp, #12
 80046ca:	4770      	bx	lr
 80046cc:	2000008c 	.word	0x2000008c
 80046d0:	ffff0208 	.word	0xffff0208

080046d4 <__ssputs_r>:
 80046d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	688e      	ldr	r6, [r1, #8]
 80046da:	4682      	mov	sl, r0
 80046dc:	429e      	cmp	r6, r3
 80046de:	460c      	mov	r4, r1
 80046e0:	4690      	mov	r8, r2
 80046e2:	461f      	mov	r7, r3
 80046e4:	d838      	bhi.n	8004758 <__ssputs_r+0x84>
 80046e6:	898a      	ldrh	r2, [r1, #12]
 80046e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046ec:	d032      	beq.n	8004754 <__ssputs_r+0x80>
 80046ee:	6825      	ldr	r5, [r4, #0]
 80046f0:	6909      	ldr	r1, [r1, #16]
 80046f2:	3301      	adds	r3, #1
 80046f4:	eba5 0901 	sub.w	r9, r5, r1
 80046f8:	6965      	ldr	r5, [r4, #20]
 80046fa:	444b      	add	r3, r9
 80046fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004704:	106d      	asrs	r5, r5, #1
 8004706:	429d      	cmp	r5, r3
 8004708:	bf38      	it	cc
 800470a:	461d      	movcc	r5, r3
 800470c:	0553      	lsls	r3, r2, #21
 800470e:	d531      	bpl.n	8004774 <__ssputs_r+0xa0>
 8004710:	4629      	mov	r1, r5
 8004712:	f000 fb53 	bl	8004dbc <_malloc_r>
 8004716:	4606      	mov	r6, r0
 8004718:	b950      	cbnz	r0, 8004730 <__ssputs_r+0x5c>
 800471a:	230c      	movs	r3, #12
 800471c:	f04f 30ff 	mov.w	r0, #4294967295
 8004720:	f8ca 3000 	str.w	r3, [sl]
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472a:	81a3      	strh	r3, [r4, #12]
 800472c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004730:	464a      	mov	r2, r9
 8004732:	6921      	ldr	r1, [r4, #16]
 8004734:	f000 face 	bl	8004cd4 <memcpy>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800473e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004742:	81a3      	strh	r3, [r4, #12]
 8004744:	6126      	str	r6, [r4, #16]
 8004746:	444e      	add	r6, r9
 8004748:	6026      	str	r6, [r4, #0]
 800474a:	463e      	mov	r6, r7
 800474c:	6165      	str	r5, [r4, #20]
 800474e:	eba5 0509 	sub.w	r5, r5, r9
 8004752:	60a5      	str	r5, [r4, #8]
 8004754:	42be      	cmp	r6, r7
 8004756:	d900      	bls.n	800475a <__ssputs_r+0x86>
 8004758:	463e      	mov	r6, r7
 800475a:	4632      	mov	r2, r6
 800475c:	4641      	mov	r1, r8
 800475e:	6820      	ldr	r0, [r4, #0]
 8004760:	f000 fac6 	bl	8004cf0 <memmove>
 8004764:	68a3      	ldr	r3, [r4, #8]
 8004766:	6822      	ldr	r2, [r4, #0]
 8004768:	1b9b      	subs	r3, r3, r6
 800476a:	4432      	add	r2, r6
 800476c:	2000      	movs	r0, #0
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	6022      	str	r2, [r4, #0]
 8004772:	e7db      	b.n	800472c <__ssputs_r+0x58>
 8004774:	462a      	mov	r2, r5
 8004776:	f000 fb7b 	bl	8004e70 <_realloc_r>
 800477a:	4606      	mov	r6, r0
 800477c:	2800      	cmp	r0, #0
 800477e:	d1e1      	bne.n	8004744 <__ssputs_r+0x70>
 8004780:	4650      	mov	r0, sl
 8004782:	6921      	ldr	r1, [r4, #16]
 8004784:	f000 face 	bl	8004d24 <_free_r>
 8004788:	e7c7      	b.n	800471a <__ssputs_r+0x46>
	...

0800478c <_svfiprintf_r>:
 800478c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004790:	4698      	mov	r8, r3
 8004792:	898b      	ldrh	r3, [r1, #12]
 8004794:	4607      	mov	r7, r0
 8004796:	061b      	lsls	r3, r3, #24
 8004798:	460d      	mov	r5, r1
 800479a:	4614      	mov	r4, r2
 800479c:	b09d      	sub	sp, #116	; 0x74
 800479e:	d50e      	bpl.n	80047be <_svfiprintf_r+0x32>
 80047a0:	690b      	ldr	r3, [r1, #16]
 80047a2:	b963      	cbnz	r3, 80047be <_svfiprintf_r+0x32>
 80047a4:	2140      	movs	r1, #64	; 0x40
 80047a6:	f000 fb09 	bl	8004dbc <_malloc_r>
 80047aa:	6028      	str	r0, [r5, #0]
 80047ac:	6128      	str	r0, [r5, #16]
 80047ae:	b920      	cbnz	r0, 80047ba <_svfiprintf_r+0x2e>
 80047b0:	230c      	movs	r3, #12
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	e0d1      	b.n	800495e <_svfiprintf_r+0x1d2>
 80047ba:	2340      	movs	r3, #64	; 0x40
 80047bc:	616b      	str	r3, [r5, #20]
 80047be:	2300      	movs	r3, #0
 80047c0:	9309      	str	r3, [sp, #36]	; 0x24
 80047c2:	2320      	movs	r3, #32
 80047c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047c8:	2330      	movs	r3, #48	; 0x30
 80047ca:	f04f 0901 	mov.w	r9, #1
 80047ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80047d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004978 <_svfiprintf_r+0x1ec>
 80047d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047da:	4623      	mov	r3, r4
 80047dc:	469a      	mov	sl, r3
 80047de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047e2:	b10a      	cbz	r2, 80047e8 <_svfiprintf_r+0x5c>
 80047e4:	2a25      	cmp	r2, #37	; 0x25
 80047e6:	d1f9      	bne.n	80047dc <_svfiprintf_r+0x50>
 80047e8:	ebba 0b04 	subs.w	fp, sl, r4
 80047ec:	d00b      	beq.n	8004806 <_svfiprintf_r+0x7a>
 80047ee:	465b      	mov	r3, fp
 80047f0:	4622      	mov	r2, r4
 80047f2:	4629      	mov	r1, r5
 80047f4:	4638      	mov	r0, r7
 80047f6:	f7ff ff6d 	bl	80046d4 <__ssputs_r>
 80047fa:	3001      	adds	r0, #1
 80047fc:	f000 80aa 	beq.w	8004954 <_svfiprintf_r+0x1c8>
 8004800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004802:	445a      	add	r2, fp
 8004804:	9209      	str	r2, [sp, #36]	; 0x24
 8004806:	f89a 3000 	ldrb.w	r3, [sl]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a2 	beq.w	8004954 <_svfiprintf_r+0x1c8>
 8004810:	2300      	movs	r3, #0
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800481a:	f10a 0a01 	add.w	sl, sl, #1
 800481e:	9304      	str	r3, [sp, #16]
 8004820:	9307      	str	r3, [sp, #28]
 8004822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004826:	931a      	str	r3, [sp, #104]	; 0x68
 8004828:	4654      	mov	r4, sl
 800482a:	2205      	movs	r2, #5
 800482c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004830:	4851      	ldr	r0, [pc, #324]	; (8004978 <_svfiprintf_r+0x1ec>)
 8004832:	f000 fa41 	bl	8004cb8 <memchr>
 8004836:	9a04      	ldr	r2, [sp, #16]
 8004838:	b9d8      	cbnz	r0, 8004872 <_svfiprintf_r+0xe6>
 800483a:	06d0      	lsls	r0, r2, #27
 800483c:	bf44      	itt	mi
 800483e:	2320      	movmi	r3, #32
 8004840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004844:	0711      	lsls	r1, r2, #28
 8004846:	bf44      	itt	mi
 8004848:	232b      	movmi	r3, #43	; 0x2b
 800484a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800484e:	f89a 3000 	ldrb.w	r3, [sl]
 8004852:	2b2a      	cmp	r3, #42	; 0x2a
 8004854:	d015      	beq.n	8004882 <_svfiprintf_r+0xf6>
 8004856:	4654      	mov	r4, sl
 8004858:	2000      	movs	r0, #0
 800485a:	f04f 0c0a 	mov.w	ip, #10
 800485e:	9a07      	ldr	r2, [sp, #28]
 8004860:	4621      	mov	r1, r4
 8004862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004866:	3b30      	subs	r3, #48	; 0x30
 8004868:	2b09      	cmp	r3, #9
 800486a:	d94e      	bls.n	800490a <_svfiprintf_r+0x17e>
 800486c:	b1b0      	cbz	r0, 800489c <_svfiprintf_r+0x110>
 800486e:	9207      	str	r2, [sp, #28]
 8004870:	e014      	b.n	800489c <_svfiprintf_r+0x110>
 8004872:	eba0 0308 	sub.w	r3, r0, r8
 8004876:	fa09 f303 	lsl.w	r3, r9, r3
 800487a:	4313      	orrs	r3, r2
 800487c:	46a2      	mov	sl, r4
 800487e:	9304      	str	r3, [sp, #16]
 8004880:	e7d2      	b.n	8004828 <_svfiprintf_r+0x9c>
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	1d19      	adds	r1, r3, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	9103      	str	r1, [sp, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfbb      	ittet	lt
 800488e:	425b      	neglt	r3, r3
 8004890:	f042 0202 	orrlt.w	r2, r2, #2
 8004894:	9307      	strge	r3, [sp, #28]
 8004896:	9307      	strlt	r3, [sp, #28]
 8004898:	bfb8      	it	lt
 800489a:	9204      	strlt	r2, [sp, #16]
 800489c:	7823      	ldrb	r3, [r4, #0]
 800489e:	2b2e      	cmp	r3, #46	; 0x2e
 80048a0:	d10c      	bne.n	80048bc <_svfiprintf_r+0x130>
 80048a2:	7863      	ldrb	r3, [r4, #1]
 80048a4:	2b2a      	cmp	r3, #42	; 0x2a
 80048a6:	d135      	bne.n	8004914 <_svfiprintf_r+0x188>
 80048a8:	9b03      	ldr	r3, [sp, #12]
 80048aa:	3402      	adds	r4, #2
 80048ac:	1d1a      	adds	r2, r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	9203      	str	r2, [sp, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bfb8      	it	lt
 80048b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80048ba:	9305      	str	r3, [sp, #20]
 80048bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004988 <_svfiprintf_r+0x1fc>
 80048c0:	2203      	movs	r2, #3
 80048c2:	4650      	mov	r0, sl
 80048c4:	7821      	ldrb	r1, [r4, #0]
 80048c6:	f000 f9f7 	bl	8004cb8 <memchr>
 80048ca:	b140      	cbz	r0, 80048de <_svfiprintf_r+0x152>
 80048cc:	2340      	movs	r3, #64	; 0x40
 80048ce:	eba0 000a 	sub.w	r0, r0, sl
 80048d2:	fa03 f000 	lsl.w	r0, r3, r0
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	3401      	adds	r4, #1
 80048da:	4303      	orrs	r3, r0
 80048dc:	9304      	str	r3, [sp, #16]
 80048de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e2:	2206      	movs	r2, #6
 80048e4:	4825      	ldr	r0, [pc, #148]	; (800497c <_svfiprintf_r+0x1f0>)
 80048e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ea:	f000 f9e5 	bl	8004cb8 <memchr>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d038      	beq.n	8004964 <_svfiprintf_r+0x1d8>
 80048f2:	4b23      	ldr	r3, [pc, #140]	; (8004980 <_svfiprintf_r+0x1f4>)
 80048f4:	bb1b      	cbnz	r3, 800493e <_svfiprintf_r+0x1b2>
 80048f6:	9b03      	ldr	r3, [sp, #12]
 80048f8:	3307      	adds	r3, #7
 80048fa:	f023 0307 	bic.w	r3, r3, #7
 80048fe:	3308      	adds	r3, #8
 8004900:	9303      	str	r3, [sp, #12]
 8004902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004904:	4433      	add	r3, r6
 8004906:	9309      	str	r3, [sp, #36]	; 0x24
 8004908:	e767      	b.n	80047da <_svfiprintf_r+0x4e>
 800490a:	460c      	mov	r4, r1
 800490c:	2001      	movs	r0, #1
 800490e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004912:	e7a5      	b.n	8004860 <_svfiprintf_r+0xd4>
 8004914:	2300      	movs	r3, #0
 8004916:	f04f 0c0a 	mov.w	ip, #10
 800491a:	4619      	mov	r1, r3
 800491c:	3401      	adds	r4, #1
 800491e:	9305      	str	r3, [sp, #20]
 8004920:	4620      	mov	r0, r4
 8004922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004926:	3a30      	subs	r2, #48	; 0x30
 8004928:	2a09      	cmp	r2, #9
 800492a:	d903      	bls.n	8004934 <_svfiprintf_r+0x1a8>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0c5      	beq.n	80048bc <_svfiprintf_r+0x130>
 8004930:	9105      	str	r1, [sp, #20]
 8004932:	e7c3      	b.n	80048bc <_svfiprintf_r+0x130>
 8004934:	4604      	mov	r4, r0
 8004936:	2301      	movs	r3, #1
 8004938:	fb0c 2101 	mla	r1, ip, r1, r2
 800493c:	e7f0      	b.n	8004920 <_svfiprintf_r+0x194>
 800493e:	ab03      	add	r3, sp, #12
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	462a      	mov	r2, r5
 8004944:	4638      	mov	r0, r7
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <_svfiprintf_r+0x1f8>)
 8004948:	a904      	add	r1, sp, #16
 800494a:	f3af 8000 	nop.w
 800494e:	1c42      	adds	r2, r0, #1
 8004950:	4606      	mov	r6, r0
 8004952:	d1d6      	bne.n	8004902 <_svfiprintf_r+0x176>
 8004954:	89ab      	ldrh	r3, [r5, #12]
 8004956:	065b      	lsls	r3, r3, #25
 8004958:	f53f af2c 	bmi.w	80047b4 <_svfiprintf_r+0x28>
 800495c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800495e:	b01d      	add	sp, #116	; 0x74
 8004960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004964:	ab03      	add	r3, sp, #12
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	462a      	mov	r2, r5
 800496a:	4638      	mov	r0, r7
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <_svfiprintf_r+0x1f8>)
 800496e:	a904      	add	r1, sp, #16
 8004970:	f000 f87c 	bl	8004a6c <_printf_i>
 8004974:	e7eb      	b.n	800494e <_svfiprintf_r+0x1c2>
 8004976:	bf00      	nop
 8004978:	08004fea 	.word	0x08004fea
 800497c:	08004ff4 	.word	0x08004ff4
 8004980:	00000000 	.word	0x00000000
 8004984:	080046d5 	.word	0x080046d5
 8004988:	08004ff0 	.word	0x08004ff0

0800498c <_printf_common>:
 800498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004990:	4616      	mov	r6, r2
 8004992:	4699      	mov	r9, r3
 8004994:	688a      	ldr	r2, [r1, #8]
 8004996:	690b      	ldr	r3, [r1, #16]
 8004998:	4607      	mov	r7, r0
 800499a:	4293      	cmp	r3, r2
 800499c:	bfb8      	it	lt
 800499e:	4613      	movlt	r3, r2
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049a6:	460c      	mov	r4, r1
 80049a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049ac:	b10a      	cbz	r2, 80049b2 <_printf_common+0x26>
 80049ae:	3301      	adds	r3, #1
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	0699      	lsls	r1, r3, #26
 80049b6:	bf42      	ittt	mi
 80049b8:	6833      	ldrmi	r3, [r6, #0]
 80049ba:	3302      	addmi	r3, #2
 80049bc:	6033      	strmi	r3, [r6, #0]
 80049be:	6825      	ldr	r5, [r4, #0]
 80049c0:	f015 0506 	ands.w	r5, r5, #6
 80049c4:	d106      	bne.n	80049d4 <_printf_common+0x48>
 80049c6:	f104 0a19 	add.w	sl, r4, #25
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	6832      	ldr	r2, [r6, #0]
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	42ab      	cmp	r3, r5
 80049d2:	dc28      	bgt.n	8004a26 <_printf_common+0x9a>
 80049d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049d8:	1e13      	subs	r3, r2, #0
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	bf18      	it	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	0692      	lsls	r2, r2, #26
 80049e2:	d42d      	bmi.n	8004a40 <_printf_common+0xb4>
 80049e4:	4649      	mov	r1, r9
 80049e6:	4638      	mov	r0, r7
 80049e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ec:	47c0      	blx	r8
 80049ee:	3001      	adds	r0, #1
 80049f0:	d020      	beq.n	8004a34 <_printf_common+0xa8>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	68e5      	ldr	r5, [r4, #12]
 80049f6:	f003 0306 	and.w	r3, r3, #6
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	bf18      	it	ne
 80049fe:	2500      	movne	r5, #0
 8004a00:	6832      	ldr	r2, [r6, #0]
 8004a02:	f04f 0600 	mov.w	r6, #0
 8004a06:	68a3      	ldr	r3, [r4, #8]
 8004a08:	bf08      	it	eq
 8004a0a:	1aad      	subeq	r5, r5, r2
 8004a0c:	6922      	ldr	r2, [r4, #16]
 8004a0e:	bf08      	it	eq
 8004a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfc4      	itt	gt
 8004a18:	1a9b      	subgt	r3, r3, r2
 8004a1a:	18ed      	addgt	r5, r5, r3
 8004a1c:	341a      	adds	r4, #26
 8004a1e:	42b5      	cmp	r5, r6
 8004a20:	d11a      	bne.n	8004a58 <_printf_common+0xcc>
 8004a22:	2000      	movs	r0, #0
 8004a24:	e008      	b.n	8004a38 <_printf_common+0xac>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4652      	mov	r2, sl
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	47c0      	blx	r8
 8004a30:	3001      	adds	r0, #1
 8004a32:	d103      	bne.n	8004a3c <_printf_common+0xb0>
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	e7c4      	b.n	80049ca <_printf_common+0x3e>
 8004a40:	2030      	movs	r0, #48	; 0x30
 8004a42:	18e1      	adds	r1, r4, r3
 8004a44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a4e:	4422      	add	r2, r4
 8004a50:	3302      	adds	r3, #2
 8004a52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a56:	e7c5      	b.n	80049e4 <_printf_common+0x58>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	4638      	mov	r0, r7
 8004a60:	47c0      	blx	r8
 8004a62:	3001      	adds	r0, #1
 8004a64:	d0e6      	beq.n	8004a34 <_printf_common+0xa8>
 8004a66:	3601      	adds	r6, #1
 8004a68:	e7d9      	b.n	8004a1e <_printf_common+0x92>
	...

08004a6c <_printf_i>:
 8004a6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	460c      	mov	r4, r1
 8004a72:	7e27      	ldrb	r7, [r4, #24]
 8004a74:	4691      	mov	r9, r2
 8004a76:	2f78      	cmp	r7, #120	; 0x78
 8004a78:	4680      	mov	r8, r0
 8004a7a:	469a      	mov	sl, r3
 8004a7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a82:	d807      	bhi.n	8004a94 <_printf_i+0x28>
 8004a84:	2f62      	cmp	r7, #98	; 0x62
 8004a86:	d80a      	bhi.n	8004a9e <_printf_i+0x32>
 8004a88:	2f00      	cmp	r7, #0
 8004a8a:	f000 80d9 	beq.w	8004c40 <_printf_i+0x1d4>
 8004a8e:	2f58      	cmp	r7, #88	; 0x58
 8004a90:	f000 80a4 	beq.w	8004bdc <_printf_i+0x170>
 8004a94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a9c:	e03a      	b.n	8004b14 <_printf_i+0xa8>
 8004a9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aa2:	2b15      	cmp	r3, #21
 8004aa4:	d8f6      	bhi.n	8004a94 <_printf_i+0x28>
 8004aa6:	a001      	add	r0, pc, #4	; (adr r0, 8004aac <_printf_i+0x40>)
 8004aa8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004aac:	08004b05 	.word	0x08004b05
 8004ab0:	08004b19 	.word	0x08004b19
 8004ab4:	08004a95 	.word	0x08004a95
 8004ab8:	08004a95 	.word	0x08004a95
 8004abc:	08004a95 	.word	0x08004a95
 8004ac0:	08004a95 	.word	0x08004a95
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004a95 	.word	0x08004a95
 8004acc:	08004a95 	.word	0x08004a95
 8004ad0:	08004a95 	.word	0x08004a95
 8004ad4:	08004a95 	.word	0x08004a95
 8004ad8:	08004c27 	.word	0x08004c27
 8004adc:	08004b49 	.word	0x08004b49
 8004ae0:	08004c09 	.word	0x08004c09
 8004ae4:	08004a95 	.word	0x08004a95
 8004ae8:	08004a95 	.word	0x08004a95
 8004aec:	08004c49 	.word	0x08004c49
 8004af0:	08004a95 	.word	0x08004a95
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004a95 	.word	0x08004a95
 8004afc:	08004a95 	.word	0x08004a95
 8004b00:	08004c11 	.word	0x08004c11
 8004b04:	680b      	ldr	r3, [r1, #0]
 8004b06:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b0a:	1d1a      	adds	r2, r3, #4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	600a      	str	r2, [r1, #0]
 8004b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0a4      	b.n	8004c62 <_printf_i+0x1f6>
 8004b18:	6825      	ldr	r5, [r4, #0]
 8004b1a:	6808      	ldr	r0, [r1, #0]
 8004b1c:	062e      	lsls	r6, r5, #24
 8004b1e:	f100 0304 	add.w	r3, r0, #4
 8004b22:	d50a      	bpl.n	8004b3a <_printf_i+0xce>
 8004b24:	6805      	ldr	r5, [r0, #0]
 8004b26:	600b      	str	r3, [r1, #0]
 8004b28:	2d00      	cmp	r5, #0
 8004b2a:	da03      	bge.n	8004b34 <_printf_i+0xc8>
 8004b2c:	232d      	movs	r3, #45	; 0x2d
 8004b2e:	426d      	negs	r5, r5
 8004b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b34:	230a      	movs	r3, #10
 8004b36:	485e      	ldr	r0, [pc, #376]	; (8004cb0 <_printf_i+0x244>)
 8004b38:	e019      	b.n	8004b6e <_printf_i+0x102>
 8004b3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b3e:	6805      	ldr	r5, [r0, #0]
 8004b40:	600b      	str	r3, [r1, #0]
 8004b42:	bf18      	it	ne
 8004b44:	b22d      	sxthne	r5, r5
 8004b46:	e7ef      	b.n	8004b28 <_printf_i+0xbc>
 8004b48:	680b      	ldr	r3, [r1, #0]
 8004b4a:	6825      	ldr	r5, [r4, #0]
 8004b4c:	1d18      	adds	r0, r3, #4
 8004b4e:	6008      	str	r0, [r1, #0]
 8004b50:	0628      	lsls	r0, r5, #24
 8004b52:	d501      	bpl.n	8004b58 <_printf_i+0xec>
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	e002      	b.n	8004b5e <_printf_i+0xf2>
 8004b58:	0669      	lsls	r1, r5, #25
 8004b5a:	d5fb      	bpl.n	8004b54 <_printf_i+0xe8>
 8004b5c:	881d      	ldrh	r5, [r3, #0]
 8004b5e:	2f6f      	cmp	r7, #111	; 0x6f
 8004b60:	bf0c      	ite	eq
 8004b62:	2308      	moveq	r3, #8
 8004b64:	230a      	movne	r3, #10
 8004b66:	4852      	ldr	r0, [pc, #328]	; (8004cb0 <_printf_i+0x244>)
 8004b68:	2100      	movs	r1, #0
 8004b6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b6e:	6866      	ldr	r6, [r4, #4]
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	bfa8      	it	ge
 8004b74:	6821      	ldrge	r1, [r4, #0]
 8004b76:	60a6      	str	r6, [r4, #8]
 8004b78:	bfa4      	itt	ge
 8004b7a:	f021 0104 	bicge.w	r1, r1, #4
 8004b7e:	6021      	strge	r1, [r4, #0]
 8004b80:	b90d      	cbnz	r5, 8004b86 <_printf_i+0x11a>
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	d04d      	beq.n	8004c22 <_printf_i+0x1b6>
 8004b86:	4616      	mov	r6, r2
 8004b88:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b8c:	fb03 5711 	mls	r7, r3, r1, r5
 8004b90:	5dc7      	ldrb	r7, [r0, r7]
 8004b92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b96:	462f      	mov	r7, r5
 8004b98:	42bb      	cmp	r3, r7
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	d9f4      	bls.n	8004b88 <_printf_i+0x11c>
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d10b      	bne.n	8004bba <_printf_i+0x14e>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	07df      	lsls	r7, r3, #31
 8004ba6:	d508      	bpl.n	8004bba <_printf_i+0x14e>
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	6861      	ldr	r1, [r4, #4]
 8004bac:	4299      	cmp	r1, r3
 8004bae:	bfde      	ittt	le
 8004bb0:	2330      	movle	r3, #48	; 0x30
 8004bb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bba:	1b92      	subs	r2, r2, r6
 8004bbc:	6122      	str	r2, [r4, #16]
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	f8cd a000 	str.w	sl, [sp]
 8004bc8:	aa03      	add	r2, sp, #12
 8004bca:	f7ff fedf 	bl	800498c <_printf_common>
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d14c      	bne.n	8004c6c <_printf_i+0x200>
 8004bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd6:	b004      	add	sp, #16
 8004bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bdc:	4834      	ldr	r0, [pc, #208]	; (8004cb0 <_printf_i+0x244>)
 8004bde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004be2:	680e      	ldr	r6, [r1, #0]
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bea:	061f      	lsls	r7, r3, #24
 8004bec:	600e      	str	r6, [r1, #0]
 8004bee:	d514      	bpl.n	8004c1a <_printf_i+0x1ae>
 8004bf0:	07d9      	lsls	r1, r3, #31
 8004bf2:	bf44      	itt	mi
 8004bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8004bf8:	6023      	strmi	r3, [r4, #0]
 8004bfa:	b91d      	cbnz	r5, 8004c04 <_printf_i+0x198>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	f023 0320 	bic.w	r3, r3, #32
 8004c02:	6023      	str	r3, [r4, #0]
 8004c04:	2310      	movs	r3, #16
 8004c06:	e7af      	b.n	8004b68 <_printf_i+0xfc>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	f043 0320 	orr.w	r3, r3, #32
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	2378      	movs	r3, #120	; 0x78
 8004c12:	4828      	ldr	r0, [pc, #160]	; (8004cb4 <_printf_i+0x248>)
 8004c14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c18:	e7e3      	b.n	8004be2 <_printf_i+0x176>
 8004c1a:	065e      	lsls	r6, r3, #25
 8004c1c:	bf48      	it	mi
 8004c1e:	b2ad      	uxthmi	r5, r5
 8004c20:	e7e6      	b.n	8004bf0 <_printf_i+0x184>
 8004c22:	4616      	mov	r6, r2
 8004c24:	e7bb      	b.n	8004b9e <_printf_i+0x132>
 8004c26:	680b      	ldr	r3, [r1, #0]
 8004c28:	6826      	ldr	r6, [r4, #0]
 8004c2a:	1d1d      	adds	r5, r3, #4
 8004c2c:	6960      	ldr	r0, [r4, #20]
 8004c2e:	600d      	str	r5, [r1, #0]
 8004c30:	0635      	lsls	r5, r6, #24
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	d501      	bpl.n	8004c3a <_printf_i+0x1ce>
 8004c36:	6018      	str	r0, [r3, #0]
 8004c38:	e002      	b.n	8004c40 <_printf_i+0x1d4>
 8004c3a:	0671      	lsls	r1, r6, #25
 8004c3c:	d5fb      	bpl.n	8004c36 <_printf_i+0x1ca>
 8004c3e:	8018      	strh	r0, [r3, #0]
 8004c40:	2300      	movs	r3, #0
 8004c42:	4616      	mov	r6, r2
 8004c44:	6123      	str	r3, [r4, #16]
 8004c46:	e7ba      	b.n	8004bbe <_printf_i+0x152>
 8004c48:	680b      	ldr	r3, [r1, #0]
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	600a      	str	r2, [r1, #0]
 8004c4e:	681e      	ldr	r6, [r3, #0]
 8004c50:	2100      	movs	r1, #0
 8004c52:	4630      	mov	r0, r6
 8004c54:	6862      	ldr	r2, [r4, #4]
 8004c56:	f000 f82f 	bl	8004cb8 <memchr>
 8004c5a:	b108      	cbz	r0, 8004c60 <_printf_i+0x1f4>
 8004c5c:	1b80      	subs	r0, r0, r6
 8004c5e:	6060      	str	r0, [r4, #4]
 8004c60:	6863      	ldr	r3, [r4, #4]
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	2300      	movs	r3, #0
 8004c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c6a:	e7a8      	b.n	8004bbe <_printf_i+0x152>
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	6923      	ldr	r3, [r4, #16]
 8004c74:	47d0      	blx	sl
 8004c76:	3001      	adds	r0, #1
 8004c78:	d0ab      	beq.n	8004bd2 <_printf_i+0x166>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	079b      	lsls	r3, r3, #30
 8004c7e:	d413      	bmi.n	8004ca8 <_printf_i+0x23c>
 8004c80:	68e0      	ldr	r0, [r4, #12]
 8004c82:	9b03      	ldr	r3, [sp, #12]
 8004c84:	4298      	cmp	r0, r3
 8004c86:	bfb8      	it	lt
 8004c88:	4618      	movlt	r0, r3
 8004c8a:	e7a4      	b.n	8004bd6 <_printf_i+0x16a>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4632      	mov	r2, r6
 8004c90:	4649      	mov	r1, r9
 8004c92:	4640      	mov	r0, r8
 8004c94:	47d0      	blx	sl
 8004c96:	3001      	adds	r0, #1
 8004c98:	d09b      	beq.n	8004bd2 <_printf_i+0x166>
 8004c9a:	3501      	adds	r5, #1
 8004c9c:	68e3      	ldr	r3, [r4, #12]
 8004c9e:	9903      	ldr	r1, [sp, #12]
 8004ca0:	1a5b      	subs	r3, r3, r1
 8004ca2:	42ab      	cmp	r3, r5
 8004ca4:	dcf2      	bgt.n	8004c8c <_printf_i+0x220>
 8004ca6:	e7eb      	b.n	8004c80 <_printf_i+0x214>
 8004ca8:	2500      	movs	r5, #0
 8004caa:	f104 0619 	add.w	r6, r4, #25
 8004cae:	e7f5      	b.n	8004c9c <_printf_i+0x230>
 8004cb0:	08004ffb 	.word	0x08004ffb
 8004cb4:	0800500c 	.word	0x0800500c

08004cb8 <memchr>:
 8004cb8:	4603      	mov	r3, r0
 8004cba:	b510      	push	{r4, lr}
 8004cbc:	b2c9      	uxtb	r1, r1
 8004cbe:	4402      	add	r2, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	d101      	bne.n	8004cca <memchr+0x12>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e003      	b.n	8004cd2 <memchr+0x1a>
 8004cca:	7804      	ldrb	r4, [r0, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	428c      	cmp	r4, r1
 8004cd0:	d1f6      	bne.n	8004cc0 <memchr+0x8>
 8004cd2:	bd10      	pop	{r4, pc}

08004cd4 <memcpy>:
 8004cd4:	440a      	add	r2, r1
 8004cd6:	4291      	cmp	r1, r2
 8004cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cdc:	d100      	bne.n	8004ce0 <memcpy+0xc>
 8004cde:	4770      	bx	lr
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce6:	4291      	cmp	r1, r2
 8004ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cec:	d1f9      	bne.n	8004ce2 <memcpy+0xe>
 8004cee:	bd10      	pop	{r4, pc}

08004cf0 <memmove>:
 8004cf0:	4288      	cmp	r0, r1
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	eb01 0402 	add.w	r4, r1, r2
 8004cf8:	d902      	bls.n	8004d00 <memmove+0x10>
 8004cfa:	4284      	cmp	r4, r0
 8004cfc:	4623      	mov	r3, r4
 8004cfe:	d807      	bhi.n	8004d10 <memmove+0x20>
 8004d00:	1e43      	subs	r3, r0, #1
 8004d02:	42a1      	cmp	r1, r4
 8004d04:	d008      	beq.n	8004d18 <memmove+0x28>
 8004d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d0e:	e7f8      	b.n	8004d02 <memmove+0x12>
 8004d10:	4601      	mov	r1, r0
 8004d12:	4402      	add	r2, r0
 8004d14:	428a      	cmp	r2, r1
 8004d16:	d100      	bne.n	8004d1a <memmove+0x2a>
 8004d18:	bd10      	pop	{r4, pc}
 8004d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d22:	e7f7      	b.n	8004d14 <memmove+0x24>

08004d24 <_free_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4605      	mov	r5, r0
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	d043      	beq.n	8004db4 <_free_r+0x90>
 8004d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d30:	1f0c      	subs	r4, r1, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bfb8      	it	lt
 8004d36:	18e4      	addlt	r4, r4, r3
 8004d38:	f000 f8d0 	bl	8004edc <__malloc_lock>
 8004d3c:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <_free_r+0x94>)
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	4610      	mov	r0, r2
 8004d42:	b933      	cbnz	r3, 8004d52 <_free_r+0x2e>
 8004d44:	6063      	str	r3, [r4, #4]
 8004d46:	6014      	str	r4, [r2, #0]
 8004d48:	4628      	mov	r0, r5
 8004d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d4e:	f000 b8cb 	b.w	8004ee8 <__malloc_unlock>
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	d90a      	bls.n	8004d6c <_free_r+0x48>
 8004d56:	6821      	ldr	r1, [r4, #0]
 8004d58:	1862      	adds	r2, r4, r1
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	bf01      	itttt	eq
 8004d5e:	681a      	ldreq	r2, [r3, #0]
 8004d60:	685b      	ldreq	r3, [r3, #4]
 8004d62:	1852      	addeq	r2, r2, r1
 8004d64:	6022      	streq	r2, [r4, #0]
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	6004      	str	r4, [r0, #0]
 8004d6a:	e7ed      	b.n	8004d48 <_free_r+0x24>
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	b10b      	cbz	r3, 8004d76 <_free_r+0x52>
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	d9fa      	bls.n	8004d6c <_free_r+0x48>
 8004d76:	6811      	ldr	r1, [r2, #0]
 8004d78:	1850      	adds	r0, r2, r1
 8004d7a:	42a0      	cmp	r0, r4
 8004d7c:	d10b      	bne.n	8004d96 <_free_r+0x72>
 8004d7e:	6820      	ldr	r0, [r4, #0]
 8004d80:	4401      	add	r1, r0
 8004d82:	1850      	adds	r0, r2, r1
 8004d84:	4283      	cmp	r3, r0
 8004d86:	6011      	str	r1, [r2, #0]
 8004d88:	d1de      	bne.n	8004d48 <_free_r+0x24>
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4401      	add	r1, r0
 8004d90:	6011      	str	r1, [r2, #0]
 8004d92:	6053      	str	r3, [r2, #4]
 8004d94:	e7d8      	b.n	8004d48 <_free_r+0x24>
 8004d96:	d902      	bls.n	8004d9e <_free_r+0x7a>
 8004d98:	230c      	movs	r3, #12
 8004d9a:	602b      	str	r3, [r5, #0]
 8004d9c:	e7d4      	b.n	8004d48 <_free_r+0x24>
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	1821      	adds	r1, r4, r0
 8004da2:	428b      	cmp	r3, r1
 8004da4:	bf01      	itttt	eq
 8004da6:	6819      	ldreq	r1, [r3, #0]
 8004da8:	685b      	ldreq	r3, [r3, #4]
 8004daa:	1809      	addeq	r1, r1, r0
 8004dac:	6021      	streq	r1, [r4, #0]
 8004dae:	6063      	str	r3, [r4, #4]
 8004db0:	6054      	str	r4, [r2, #4]
 8004db2:	e7c9      	b.n	8004d48 <_free_r+0x24>
 8004db4:	bd38      	pop	{r3, r4, r5, pc}
 8004db6:	bf00      	nop
 8004db8:	20000168 	.word	0x20000168

08004dbc <_malloc_r>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	1ccd      	adds	r5, r1, #3
 8004dc0:	f025 0503 	bic.w	r5, r5, #3
 8004dc4:	3508      	adds	r5, #8
 8004dc6:	2d0c      	cmp	r5, #12
 8004dc8:	bf38      	it	cc
 8004dca:	250c      	movcc	r5, #12
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	4606      	mov	r6, r0
 8004dd0:	db01      	blt.n	8004dd6 <_malloc_r+0x1a>
 8004dd2:	42a9      	cmp	r1, r5
 8004dd4:	d903      	bls.n	8004dde <_malloc_r+0x22>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	2000      	movs	r0, #0
 8004ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dde:	f000 f87d 	bl	8004edc <__malloc_lock>
 8004de2:	4921      	ldr	r1, [pc, #132]	; (8004e68 <_malloc_r+0xac>)
 8004de4:	680a      	ldr	r2, [r1, #0]
 8004de6:	4614      	mov	r4, r2
 8004de8:	b99c      	cbnz	r4, 8004e12 <_malloc_r+0x56>
 8004dea:	4f20      	ldr	r7, [pc, #128]	; (8004e6c <_malloc_r+0xb0>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	b923      	cbnz	r3, 8004dfa <_malloc_r+0x3e>
 8004df0:	4621      	mov	r1, r4
 8004df2:	4630      	mov	r0, r6
 8004df4:	f000 f862 	bl	8004ebc <_sbrk_r>
 8004df8:	6038      	str	r0, [r7, #0]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f000 f85d 	bl	8004ebc <_sbrk_r>
 8004e02:	1c43      	adds	r3, r0, #1
 8004e04:	d123      	bne.n	8004e4e <_malloc_r+0x92>
 8004e06:	230c      	movs	r3, #12
 8004e08:	4630      	mov	r0, r6
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	f000 f86c 	bl	8004ee8 <__malloc_unlock>
 8004e10:	e7e3      	b.n	8004dda <_malloc_r+0x1e>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	1b5b      	subs	r3, r3, r5
 8004e16:	d417      	bmi.n	8004e48 <_malloc_r+0x8c>
 8004e18:	2b0b      	cmp	r3, #11
 8004e1a:	d903      	bls.n	8004e24 <_malloc_r+0x68>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	441c      	add	r4, r3
 8004e20:	6025      	str	r5, [r4, #0]
 8004e22:	e004      	b.n	8004e2e <_malloc_r+0x72>
 8004e24:	6863      	ldr	r3, [r4, #4]
 8004e26:	42a2      	cmp	r2, r4
 8004e28:	bf0c      	ite	eq
 8004e2a:	600b      	streq	r3, [r1, #0]
 8004e2c:	6053      	strne	r3, [r2, #4]
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 f85a 	bl	8004ee8 <__malloc_unlock>
 8004e34:	f104 000b 	add.w	r0, r4, #11
 8004e38:	1d23      	adds	r3, r4, #4
 8004e3a:	f020 0007 	bic.w	r0, r0, #7
 8004e3e:	1ac2      	subs	r2, r0, r3
 8004e40:	d0cc      	beq.n	8004ddc <_malloc_r+0x20>
 8004e42:	1a1b      	subs	r3, r3, r0
 8004e44:	50a3      	str	r3, [r4, r2]
 8004e46:	e7c9      	b.n	8004ddc <_malloc_r+0x20>
 8004e48:	4622      	mov	r2, r4
 8004e4a:	6864      	ldr	r4, [r4, #4]
 8004e4c:	e7cc      	b.n	8004de8 <_malloc_r+0x2c>
 8004e4e:	1cc4      	adds	r4, r0, #3
 8004e50:	f024 0403 	bic.w	r4, r4, #3
 8004e54:	42a0      	cmp	r0, r4
 8004e56:	d0e3      	beq.n	8004e20 <_malloc_r+0x64>
 8004e58:	1a21      	subs	r1, r4, r0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f000 f82e 	bl	8004ebc <_sbrk_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d1dd      	bne.n	8004e20 <_malloc_r+0x64>
 8004e64:	e7cf      	b.n	8004e06 <_malloc_r+0x4a>
 8004e66:	bf00      	nop
 8004e68:	20000168 	.word	0x20000168
 8004e6c:	2000016c 	.word	0x2000016c

08004e70 <_realloc_r>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	4607      	mov	r7, r0
 8004e74:	4614      	mov	r4, r2
 8004e76:	460e      	mov	r6, r1
 8004e78:	b921      	cbnz	r1, 8004e84 <_realloc_r+0x14>
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e80:	f7ff bf9c 	b.w	8004dbc <_malloc_r>
 8004e84:	b922      	cbnz	r2, 8004e90 <_realloc_r+0x20>
 8004e86:	f7ff ff4d 	bl	8004d24 <_free_r>
 8004e8a:	4625      	mov	r5, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e90:	f000 f830 	bl	8004ef4 <_malloc_usable_size_r>
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d20f      	bcs.n	8004eb8 <_realloc_r+0x48>
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f7ff ff8e 	bl	8004dbc <_malloc_r>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d0f2      	beq.n	8004e8c <_realloc_r+0x1c>
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	f7ff ff13 	bl	8004cd4 <memcpy>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7ff ff37 	bl	8004d24 <_free_r>
 8004eb6:	e7e9      	b.n	8004e8c <_realloc_r+0x1c>
 8004eb8:	4635      	mov	r5, r6
 8004eba:	e7e7      	b.n	8004e8c <_realloc_r+0x1c>

08004ebc <_sbrk_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4d05      	ldr	r5, [pc, #20]	; (8004ed8 <_sbrk_r+0x1c>)
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	f7fc fca6 	bl	8001818 <_sbrk>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_sbrk_r+0x1a>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_sbrk_r+0x1a>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20000280 	.word	0x20000280

08004edc <__malloc_lock>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__malloc_lock+0x8>)
 8004ede:	f000 b811 	b.w	8004f04 <__retarget_lock_acquire_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	20000288 	.word	0x20000288

08004ee8 <__malloc_unlock>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__malloc_unlock+0x8>)
 8004eea:	f000 b80c 	b.w	8004f06 <__retarget_lock_release_recursive>
 8004eee:	bf00      	nop
 8004ef0:	20000288 	.word	0x20000288

08004ef4 <_malloc_usable_size_r>:
 8004ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef8:	1f18      	subs	r0, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfbc      	itt	lt
 8004efe:	580b      	ldrlt	r3, [r1, r0]
 8004f00:	18c0      	addlt	r0, r0, r3
 8004f02:	4770      	bx	lr

08004f04 <__retarget_lock_acquire_recursive>:
 8004f04:	4770      	bx	lr

08004f06 <__retarget_lock_release_recursive>:
 8004f06:	4770      	bx	lr

08004f08 <_init>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr

08004f14 <_fini>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr
